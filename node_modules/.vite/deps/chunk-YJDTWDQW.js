import {
  AudioUnitDefaultValue,
  Avatar$1,
  AvatarDefault,
  Be,
  BottomSheetMenuItem,
  Button,
  ButtonSizes,
  ButtonTypes,
  ChannelAvatar,
  Colors,
  ContextMenu,
  EMOJI_MENU_ROOT_ID,
  EmojiListItems,
  Header$1,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  ImageRenderer,
  Input,
  K,
  Label,
  LabelColors,
  LabelStringSet,
  LabelTypography,
  Loader,
  LocalizationContext,
  MENTION_USER_LABEL_CLASSNAME,
  MENU_OBSERVING_CLASS_NAME,
  MENU_ROOT_ID,
  MODAL_ROOT,
  MenuItem$1,
  MenuItems,
  MessageMenuProvider,
  MessageStatus,
  Modal,
  ModalFooter,
  Os,
  PlaceHolder,
  PlaceHolderTypes,
  TextButton,
  TypingIndicator,
  TypingIndicatorType,
  UIKitMessageTypes,
  UI_CONTAINER_TYPES,
  UserListItem,
  UserProfile,
  UserProfileContext,
  UserProfileProvider,
  VOICE_PLAYER_STATUS,
  __assign,
  __awaiter,
  __extends,
  __generator,
  __spreadArray,
  arrayEqual,
  changeColorToClassName,
  changeColorToClassName2,
  classnames,
  copyToClipboard,
  deleteNullish,
  format,
  generateGroupKey,
  getBorderRadiusForMultipleImageRenderer,
  getClassName,
  getEmojiListAll,
  getEmojiMapAll,
  getEmojiTooltipString,
  getEmojiUrl,
  getMessageContentMiddleClassNameByContainerType,
  getMimeTypesUIKitAccepts,
  getObservingId,
  getSenderName,
  getSuggestedReplies,
  getUIKitFileType,
  getUIKitFileTypes,
  getUIKitMessageType,
  getUIKitMessageTypes,
  isAboutSame,
  isAdminMessage,
  isAudioMessage,
  isEditedMessage,
  isFailedMessage,
  isFileMessage,
  isGif,
  isGifMessage,
  isImage,
  isImageFileInfo,
  isImageMessage,
  isMobileIOS,
  isMultipleFilesMessage,
  isOGMessage,
  isPendingMessage,
  isReactedBy,
  isReadMessage,
  isSameDay,
  isSendableMessage,
  isSentMessage,
  isSupportedFileView,
  isTemplateMessage,
  isTextMessage,
  isThreadMessage,
  isThumbnailMessage,
  isUserMessage,
  isVideo,
  isVideoMessage,
  isVoiceMessage,
  je,
  mt,
  noop,
  openURL,
  pubSubTopics,
  pxToNumber,
  removeAtAndBraces,
  startsWithAtAndEndsWithBraces,
  truncateString,
  useAsyncEffect,
  useAsyncLayoutEffect,
  useGlobalModalContext,
  useGroupChannelHandler,
  useGroupChannelMessages,
  useIIFE,
  useLocalization,
  useLongPress,
  useMediaQueryContext,
  useMessageMenuContext,
  usePreservedCallback,
  useSendbirdStateContext,
  useVoicePlayerContext,
  useVoiceRecorderContext,
  uuidv4,
  xe
} from "./chunk-6LPVY4UA.js";
import {
  B,
  V,
  W
} from "./chunk-OQ72IX5E.js";
import {
  META_ARRAY_MESSAGE_TYPE_KEY,
  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,
  META_ARRAY_VOICE_DURATION_KEY,
  SCROLL_BUFFER,
  SLIDER_BUTTON_ICON_SIDE_LENGTH,
  VOICE_MESSAGE_FILE_NAME,
  VOICE_MESSAGE_MIME_TYPE,
  VOICE_PLAYER_AUDIO_ID,
  VOICE_PLAYER_ROOT_ID,
  VOICE_RECORDER_CLICK_BUFFER_TIME,
  VOICE_RECORDER_DEFAULT_MIN
} from "./chunk-ZRNKNDBU.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/@sendbird/uikit-react/GroupChannel.js
var import_react69 = __toESM(require_react());

// node_modules/@sendbird/uikit-react/GroupChannel/context.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DgQjrhyW.js
var import_react = __toESM(require_react(), 1);
var LOG_PRESET = "useToggleReactionCallback:";
function useToggleReactionCallback(currentChannel, logger) {
  return (0, import_react.useCallback)(function(message, key, isReacted) {
    if (!currentChannel) {
      logger === null || logger === void 0 ? void 0 : logger.warning("".concat(LOG_PRESET, " currentChannel doesn't exist"), currentChannel);
      return;
    }
    if (isReacted) {
      currentChannel.deleteReaction(message, key).then(function(res) {
        logger === null || logger === void 0 ? void 0 : logger.info("".concat(LOG_PRESET, " Delete reaction success"), res);
      }).catch(function(err) {
        logger === null || logger === void 0 ? void 0 : logger.warning("".concat(LOG_PRESET, " Delete reaction failed"), err);
      });
    } else {
      currentChannel.addReaction(message, key).then(function(res) {
        logger === null || logger === void 0 ? void 0 : logger.info("".concat(LOG_PRESET, " Add reaction success"), res);
      }).catch(function(err) {
        logger === null || logger === void 0 ? void 0 : logger.warning("".concat(LOG_PRESET, " Add reaction failed"), err);
      });
    }
  }, [currentChannel]);
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DW8Sq-WK.js
function getCaseResolvedReplyType(replyType) {
  return {
    lowerCase: replyType.toLowerCase(),
    upperCase: replyType.toUpperCase()
  };
}
function getCaseResolvedThreadReplySelectType(threadReplySelectType) {
  return {
    lowerCase: threadReplySelectType.toLowerCase(),
    upperCase: threadReplySelectType.toUpperCase()
  };
}

// node_modules/@sendbird/uikit-react/chunks/bundle-h1wbrjk9.js
function getComponentKeyFromMessage(message) {
  if ("sendingStatus" in message) {
    if (message.sendingStatus === "succeeded")
      return String(message.messageId);
    return message.reqId;
  }
  return String(message.messageId);
}
function isContextMenuClosed() {
  var _a, _b;
  return ((_a = document.getElementById("sendbird-dropdown-portal")) === null || _a === void 0 ? void 0 : _a.childElementCount) === 0 && ((_b = document.getElementById("sendbird-emoji-list-portal")) === null || _b === void 0 ? void 0 : _b.childElementCount) === 0;
}
function getMessageTopOffset(messageCreatedAt) {
  var _a;
  var element = (_a = document.querySelectorAll('[data-sb-created-at="'.concat(messageCreatedAt, '"]'))) === null || _a === void 0 ? void 0 : _a[0];
  if (element instanceof HTMLElement) {
    return element.offsetTop;
  }
  return null;
}
var isDisabledBecauseFrozen = function(groupChannel) {
  if (!groupChannel)
    return false;
  return groupChannel.isFrozen && groupChannel.myRole !== "operator";
};
var isDisabledBecauseMuted = function(groupChannel) {
  if (!groupChannel)
    return false;
  return groupChannel.myMutedState === "muted";
};
var isDisabledBecauseSuggestedReplies = function(channel, enableSuggestedReplies) {
  var _a, _b;
  return enableSuggestedReplies && !!((_b = (_a = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _a === void 0 ? void 0 : _a.extendedMessagePayload) === null || _b === void 0 ? void 0 : _b.disable_chat_input);
};

// node_modules/@sendbird/uikit-react/chunks/bundle-5R9f3ZZp.js
var pubSubFactory = function(opts) {
  var topics = {};
  return {
    __getTopics: function() {
      return topics;
    },
    subscribe: function(topic, listener) {
      var _a;
      (_a = topics[topic]) !== null && _a !== void 0 ? _a : topics[topic] = /* @__PURE__ */ new Set();
      topics[topic].add(listener);
      return {
        remove: function() {
          topics[topic].delete(listener);
        }
      };
    },
    publish: function(topic, info) {
      if (topics[topic]) {
        topics[topic].forEach(function(fn) {
          if (opts === null || opts === void 0 ? void 0 : opts.publishSynchronous) {
            fn(info !== void 0 ? info : {});
          } else {
            setTimeout(function() {
              return fn(info !== void 0 ? info : {});
            }, 0);
          }
        });
      }
    }
  };
};

// node_modules/@sendbird/uikit-react/chunks/bundle-uSSYB2TA.js
function getIsReactionEnabled(_a) {
  var channel = _a.channel, config = _a.config, moduleLevel = _a.moduleLevel;
  if (!channel || channel.isBroadcast || channel.isEphemeral) {
    return false;
  }
  if (channel.isSuper)
    return moduleLevel !== null && moduleLevel !== void 0 ? moduleLevel : config.groupChannel.enableReactionsSupergroup;
  return moduleLevel !== null && moduleLevel !== void 0 ? moduleLevel : config.groupChannel.enableReactions;
}

// node_modules/@sendbird/uikit-react/chunks/bundle-ke1HVuUa.js
var import_react2 = __toESM(require_react(), 1);
var useHTMLTextDirection = function(direction) {
  (0, import_react2.useEffect)(function() {
    var targetElement = document.getElementById(VOICE_PLAYER_ROOT_ID);
    targetElement.parentElement.dir = direction;
  }, [direction]);
};
var useMessageLayoutDirection = function(direction, forceLeftToRightMessageLayout, loading) {
  (0, import_react2.useEffect)(function() {
    if (loading)
      return;
    var messageListElements = document.getElementsByClassName("sendbird-conversation__messages");
    if (messageListElements.length > 0) {
      Array.from(messageListElements).forEach(function(elem) {
        elem.dir = forceLeftToRightMessageLayout ? "ltr" : direction;
      });
    }
  }, [direction, forceLeftToRightMessageLayout, loading]);
};

// node_modules/@sendbird/uikit-react/GroupChannel/context.js
function useMessageListScroll(behavior, deps) {
  if (deps === void 0) {
    deps = [];
  }
  var scrollRef = (0, import_react3.useRef)(null);
  var scrollPositionRef = (0, import_react3.useRef)(0);
  var scrollDistanceFromBottomRef = (0, import_react3.useRef)(0);
  var scrollPubSub = (0, import_react3.useState)(function() {
    return pubSubFactory({ publishSynchronous: true });
  })[0];
  var _a = (0, import_react3.useState)(true), isScrollBottomReached = _a[0], setIsScrollBottomReached = _a[1];
  (0, import_react3.useLayoutEffect)(function() {
    scrollPositionRef.current = 0;
    scrollDistanceFromBottomRef.current = 0;
    setIsScrollBottomReached(true);
    if (scrollRef.current)
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
  }, deps);
  (0, import_react3.useLayoutEffect)(function() {
    var unsubscribes = [];
    unsubscribes.push(scrollPubSub.subscribe("scrollToBottom", function(_a2) {
      var resolve = _a2.resolve, animated = _a2.animated;
      runCallback(function() {
        if (!scrollRef.current) {
          if (resolve)
            resolve();
          return;
        }
        if (scrollRef.current.scroll) {
          scrollRef.current.scroll({ top: scrollRef.current.scrollHeight, behavior: getScrollBehavior(behavior, animated) });
        } else {
          scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
        }
        scrollDistanceFromBottomRef.current = 0;
        setIsScrollBottomReached(true);
        if (resolve)
          resolve();
      });
    }));
    unsubscribes.push(scrollPubSub.subscribe("scroll", function(_a2) {
      var top = _a2.top, animated = _a2.animated, lazy = _a2.lazy, resolve = _a2.resolve;
      runCallback(function() {
        if (!scrollRef.current)
          return;
        var _a3 = scrollRef.current, scrollTop = _a3.scrollTop, scrollHeight = _a3.scrollHeight, clientHeight = _a3.clientHeight;
        if (scrollRef.current.scroll) {
          scrollRef.current.scroll({ top, behavior: getScrollBehavior(behavior, animated) });
        } else if (typeof top === "number") {
          scrollRef.current.scrollTop = top;
        }
        scrollDistanceFromBottomRef.current = Math.max(0, scrollHeight - scrollTop - clientHeight);
        setIsScrollBottomReached(scrollDistanceFromBottomRef.current === 0);
        if (resolve)
          resolve();
      }, lazy);
    }));
    return function() {
      unsubscribes.forEach(function(_a2) {
        var remove = _a2.remove;
        return remove();
      });
    };
  }, [behavior]);
  return {
    scrollRef,
    scrollPubSub,
    isScrollBottomReached,
    setIsScrollBottomReached,
    scrollDistanceFromBottomRef,
    scrollPositionRef
  };
}
function runCallback(callback, lazy) {
  if (lazy === void 0) {
    lazy = true;
  }
  if (lazy) {
    setTimeout(function() {
      callback();
    });
  } else {
    callback();
  }
}
function getScrollBehavior(behavior, animated) {
  if (typeof animated === "boolean")
    return animated ? "smooth" : "auto";
  return behavior;
}
var pass = function(value) {
  return value;
};
function useMessageActions(params) {
  var _this = this;
  var _a = params.onBeforeSendUserMessage, onBeforeSendUserMessage = _a === void 0 ? pass : _a, _b = params.onBeforeSendFileMessage, onBeforeSendFileMessage = _b === void 0 ? pass : _b, _c = params.onBeforeUpdateUserMessage, onBeforeUpdateUserMessage = _c === void 0 ? pass : _c, _d = params.onBeforeSendVoiceMessage, onBeforeSendVoiceMessage = _d === void 0 ? pass : _d, _e = params.onBeforeSendMultipleFilesMessage, onBeforeSendMultipleFilesMessage = _e === void 0 ? pass : _e, sendFileMessage = params.sendFileMessage, sendMultipleFilesMessage = params.sendMultipleFilesMessage, sendUserMessage = params.sendUserMessage, updateUserMessage = params.updateUserMessage, scrollToBottom = params.scrollToBottom, quoteMessage = params.quoteMessage, replyType = params.replyType;
  var buildInternalMessageParams = (0, import_react3.useCallback)(function(basicParams) {
    var messageParams = __assign({}, basicParams);
    if (params.quoteMessage && replyType !== "NONE") {
      messageParams.isReplyToChannel = true;
      messageParams.parentMessageId = quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId;
    }
    return messageParams;
  }, [replyType, quoteMessage]);
  return {
    sendUserMessage: (0, import_react3.useCallback)(function(params2) {
      return __awaiter(_this, void 0, void 0, function() {
        var internalParams, processedParams;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              internalParams = buildInternalMessageParams(params2);
              return [4, onBeforeSendUserMessage(internalParams)];
            case 1:
              processedParams = _a2.sent();
              return [2, sendUserMessage(processedParams, function() {
                return scrollToBottom();
              })];
          }
        });
      });
    }, [buildInternalMessageParams, sendUserMessage, scrollToBottom]),
    sendFileMessage: (0, import_react3.useCallback)(function(params2) {
      return __awaiter(_this, void 0, void 0, function() {
        var internalParams, processedParams;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              internalParams = buildInternalMessageParams(params2);
              return [4, onBeforeSendFileMessage(internalParams)];
            case 1:
              processedParams = _a2.sent();
              return [2, sendFileMessage(processedParams, function() {
                return scrollToBottom();
              })];
          }
        });
      });
    }, [buildInternalMessageParams, sendFileMessage, scrollToBottom]),
    sendMultipleFilesMessage: (0, import_react3.useCallback)(function(params2) {
      return __awaiter(_this, void 0, void 0, function() {
        var internalParams, processedParams;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              internalParams = buildInternalMessageParams(params2);
              return [4, onBeforeSendMultipleFilesMessage(internalParams)];
            case 1:
              processedParams = _a2.sent();
              return [2, sendMultipleFilesMessage(processedParams, function() {
                return scrollToBottom();
              })];
          }
        });
      });
    }, [buildInternalMessageParams, sendMultipleFilesMessage, scrollToBottom]),
    sendVoiceMessage: (0, import_react3.useCallback)(function(params2, duration) {
      return __awaiter(_this, void 0, void 0, function() {
        var internalParams, processedParams;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              internalParams = buildInternalMessageParams(__assign(__assign({}, params2), { fileName: VOICE_MESSAGE_FILE_NAME, mimeType: VOICE_MESSAGE_MIME_TYPE, metaArrays: [
                new je({
                  key: META_ARRAY_VOICE_DURATION_KEY,
                  value: ["".concat(duration)]
                }),
                new je({
                  key: META_ARRAY_MESSAGE_TYPE_KEY,
                  value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE]
                })
              ] }));
              return [4, onBeforeSendVoiceMessage(internalParams)];
            case 1:
              processedParams = _a2.sent();
              return [2, sendFileMessage(processedParams, function() {
                return scrollToBottom();
              })];
          }
        });
      });
    }, [buildInternalMessageParams, sendFileMessage, scrollToBottom]),
    updateUserMessage: (0, import_react3.useCallback)(function(messageId, params2) {
      return __awaiter(_this, void 0, void 0, function() {
        var internalParams, processedParams;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              internalParams = buildInternalMessageParams(params2);
              return [4, onBeforeUpdateUserMessage(internalParams)];
            case 1:
              processedParams = _a2.sent();
              return [2, updateUserMessage(messageId, processedParams)];
          }
        });
      });
    }, [buildInternalMessageParams, updateUserMessage])
  };
}
var GroupChannelContext = import_react3.default.createContext(null);
var GroupChannelProvider = function(props) {
  var _a, _b, _c;
  var channelUrl = props.channelUrl, children = props.children, moduleReactionEnabled = props.isReactionEnabled, moduleReplyType = props.replyType, moduleThreadReplySelectType = props.threadReplySelectType, _d = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _d === void 0 ? true : _d, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, showSearchIcon = props.showSearchIcon, _e = props.disableMarkAsRead, disableMarkAsRead = _e === void 0 ? false : _e, _f = props.scrollBehavior, scrollBehavior = _f === void 0 ? "auto" : _f, startingPoint = props.startingPoint, _animatedMessageId = props.animatedMessageId, messageListQueryParams = props.messageListQueryParams, onBeforeSendUserMessage = props.onBeforeSendUserMessage, onBeforeSendFileMessage = props.onBeforeSendFileMessage, onBeforeSendVoiceMessage = props.onBeforeSendVoiceMessage, onBeforeSendMultipleFilesMessage = props.onBeforeSendMultipleFilesMessage, onBeforeUpdateUserMessage = props.onBeforeUpdateUserMessage, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, onMessageAnimated = props.onMessageAnimated, onBackClick = props.onBackClick, onChatHeaderActionClick = props.onChatHeaderActionClick, onReplyInThreadClick = props.onReplyInThreadClick, onSearchClick = props.onSearchClick, onQuoteMessageClick = props.onQuoteMessageClick, renderUserMentionItem = props.renderUserMentionItem;
  var _g = useSendbirdStateContext(), config = _g.config, stores = _g.stores;
  var sdkStore = stores.sdkStore;
  var markAsReadScheduler = config.markAsReadScheduler, logger = config.logger, htmlTextDirection = config.htmlTextDirection, forceLeftToRightMessageLayout = config.forceLeftToRightMessageLayout;
  var _h = (0, import_react3.useState)(null), quoteMessage = _h[0], setQuoteMessage = _h[1];
  var _j = (0, import_react3.useState)(null), animatedMessageId = _j[0], setAnimatedMessageId = _j[1];
  var _k = (0, import_react3.useState)(null), currentChannel = _k[0], setCurrentChannel = _k[1];
  var _l = (0, import_react3.useState)(null), fetchChannelError = _l[0], setFetchChannelError = _l[1];
  var _m = useMessageListScroll(scrollBehavior, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]), scrollRef = _m.scrollRef, scrollPubSub = _m.scrollPubSub, scrollDistanceFromBottomRef = _m.scrollDistanceFromBottomRef, isScrollBottomReached = _m.isScrollBottomReached, setIsScrollBottomReached = _m.setIsScrollBottomReached, scrollPositionRef = _m.scrollPositionRef;
  var messageInputRef = (0, import_react3.useRef)(null);
  var toggleReaction = useToggleReactionCallback(currentChannel, logger);
  var replyType = getCaseResolvedReplyType(moduleReplyType !== null && moduleReplyType !== void 0 ? moduleReplyType : config.groupChannel.replyType).upperCase;
  var threadReplySelectType = getCaseResolvedThreadReplySelectType(moduleThreadReplySelectType !== null && moduleThreadReplySelectType !== void 0 ? moduleThreadReplySelectType : config.groupChannel.threadReplySelectType).upperCase;
  var chatReplyType = useIIFE(function() {
    if (replyType === "NONE")
      return B.NONE;
    return B.ONLY_REPLY_TO_CHANNEL;
  });
  var isReactionEnabled = getIsReactionEnabled({
    channel: currentChannel,
    config,
    moduleLevel: moduleReactionEnabled
  });
  var nicknamesMap = (0, import_react3.useMemo)(function() {
    var _a2;
    return new Map(((_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) !== null && _a2 !== void 0 ? _a2 : []).map(function(_a3) {
      var userId = _a3.userId, nickname = _a3.nickname;
      return [userId, nickname];
    }));
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members]);
  var messageDataSource = useGroupChannelMessages(sdkStore.sdk, currentChannel, {
    startingPoint,
    replyType: chatReplyType,
    collectionCreator: getCollectionCreator(currentChannel, messageListQueryParams),
    shouldCountNewMessages: function() {
      return !isScrollBottomReached;
    },
    markAsRead: function(channels) {
      if (isScrollBottomReached && !disableMarkAsRead) {
        channels.forEach(function(it) {
          return markAsReadScheduler.push(it);
        });
      }
    },
    onMessagesReceived: function() {
      if (isScrollBottomReached && isContextMenuClosed()) {
        scrollPubSub.publish("scrollToBottom", {});
      }
    },
    onChannelDeleted: function() {
      setCurrentChannel(null);
      setFetchChannelError(null);
    },
    onCurrentUserBanned: function() {
      setCurrentChannel(null);
      setFetchChannelError(null);
    },
    onChannelUpdated: function(channel) {
      return setCurrentChannel(channel);
    },
    logger
  });
  useAsyncEffect(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var channel, error_1;
      var _a2;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            if (!(sdkStore.initialized && channelUrl)) return [3, 5];
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, 4, 5]);
            return [4, sdkStore.sdk.groupChannel.getChannel(channelUrl)];
          case 2:
            channel = _b2.sent();
            setCurrentChannel(channel);
            setFetchChannelError(null);
            return [3, 5];
          case 3:
            error_1 = _b2.sent();
            setCurrentChannel(null);
            setFetchChannelError(error_1);
            (_a2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "GroupChannelProvider: error when fetching channel", error_1);
            return [3, 5];
          case 4:
            setQuoteMessage(null);
            setAnimatedMessageId(null);
            return [
              7
              /*endfinally*/
            ];
          case 5:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [sdkStore.initialized, sdkStore.sdk, channelUrl]);
  useAsyncLayoutEffect(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var onSentMessageFromOtherModule, subscribes;
      return __generator(this, function(_a2) {
        if (messageDataSource.initialized) {
          scrollPubSub.publish("scrollToBottom", {});
        }
        onSentMessageFromOtherModule = function(data) {
          if (data.channel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url))
            scrollPubSub.publish("scrollToBottom", {});
        };
        subscribes = [
          config.pubSub.subscribe(pubSubTopics.SEND_USER_MESSAGE, onSentMessageFromOtherModule),
          config.pubSub.subscribe(pubSubTopics.SEND_FILE_MESSAGE, onSentMessageFromOtherModule)
        ];
        return [2, function() {
          subscribes.forEach(function(subscribe) {
            return subscribe.remove();
          });
        }];
      });
    });
  }, [messageDataSource.initialized, currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  (0, import_react3.useEffect)(function() {
    if (typeof startingPoint === "number") {
      scrollToMessage(startingPoint, 0, false, false);
    }
  }, [startingPoint]);
  (0, import_react3.useEffect)(function() {
    if (_animatedMessageId)
      setAnimatedMessageId(_animatedMessageId);
  }, [_animatedMessageId]);
  useMessageLayoutDirection(htmlTextDirection, forceLeftToRightMessageLayout, messageDataSource.loading);
  var scrollToBottom = usePreservedCallback(function(animated) {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!scrollRef.current)
              return [
                2
                /*return*/
              ];
            setAnimatedMessageId(null);
            setIsScrollBottomReached(true);
            if (!(config.isOnline && messageDataSource.hasNext())) return [3, 2];
            return [4, messageDataSource.resetWithStartingPoint(Number.MAX_SAFE_INTEGER)];
          case 1:
            _a2.sent();
            scrollPubSub.publish("scrollToBottom", { animated });
            return [3, 3];
          case 2:
            scrollPubSub.publish("scrollToBottom", { animated });
            _a2.label = 3;
          case 3:
            if (currentChannel && !messageDataSource.hasNext()) {
              messageDataSource.resetNewMessages();
              if (!disableMarkAsRead)
                markAsReadScheduler.push(currentChannel);
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  });
  var scrollToMessage = usePreservedCallback(function(createdAt, messageId, messageFocusAnimated, scrollAnimated) {
    return __awaiter(void 0, void 0, void 0, function() {
      var element, parentNode, clickHandler, message, topOffset;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            element = scrollRef.current;
            parentNode = element === null || element === void 0 ? void 0 : element.parentNode;
            clickHandler = {
              activate: function() {
                if (!element || !parentNode)
                  return;
                element.style.pointerEvents = "auto";
                parentNode.style.cursor = "auto";
              },
              deactivate: function() {
                if (!element || !parentNode)
                  return;
                element.style.pointerEvents = "none";
                parentNode.style.cursor = "wait";
              }
            };
            clickHandler.deactivate();
            setAnimatedMessageId(null);
            message = messageDataSource.messages.find(function(it) {
              return it.messageId === messageId || it.createdAt === createdAt;
            });
            if (!message) return [3, 1];
            topOffset = getMessageTopOffset(message.createdAt);
            if (topOffset)
              scrollPubSub.publish("scroll", { top: topOffset, animated: scrollAnimated });
            if (messageFocusAnimated !== null && messageFocusAnimated !== void 0 ? messageFocusAnimated : true)
              setAnimatedMessageId(messageId);
            return [3, 3];
          case 1:
            return [4, messageDataSource.resetWithStartingPoint(createdAt)];
          case 2:
            _a2.sent();
            setTimeout(function() {
              var topOffset2 = getMessageTopOffset(createdAt);
              if (topOffset2)
                scrollPubSub.publish("scroll", { top: topOffset2, lazy: false, animated: scrollAnimated });
              if (messageFocusAnimated !== null && messageFocusAnimated !== void 0 ? messageFocusAnimated : true)
                setAnimatedMessageId(messageId);
            });
            _a2.label = 3;
          case 3:
            clickHandler.activate();
            return [
              2
              /*return*/
            ];
        }
      });
    });
  });
  var messageActions = useMessageActions(__assign(__assign(__assign({}, props), messageDataSource), { scrollToBottom, quoteMessage, replyType }));
  return import_react3.default.createElement(
    GroupChannelContext.Provider,
    { value: __assign(__assign({
      // # Props
      channelUrl,
      isReactionEnabled,
      isMessageGroupingEnabled,
      isMultipleFilesMessageEnabled,
      showSearchIcon: showSearchIcon !== null && showSearchIcon !== void 0 ? showSearchIcon : config.groupChannelSettings.enableMessageSearch,
      replyType,
      threadReplySelectType,
      disableMarkAsRead,
      scrollBehavior,
      // # Custom Props
      messageListQueryParams,
      // ## Message
      onBeforeSendUserMessage,
      onBeforeSendFileMessage,
      onBeforeSendVoiceMessage,
      onBeforeSendMultipleFilesMessage,
      onBeforeUpdateUserMessage,
      onBeforeDownloadFileMessage,
      // ## Focusing
      onMessageAnimated,
      // ## Click
      onBackClick,
      onChatHeaderActionClick,
      onReplyInThreadClick,
      onSearchClick,
      onQuoteMessageClick,
      // ## Custom render
      renderUserMentionItem,
      // Internal Interface
      currentChannel,
      fetchChannelError,
      nicknamesMap,
      scrollRef,
      scrollDistanceFromBottomRef,
      scrollPositionRef,
      scrollPubSub,
      messageInputRef,
      quoteMessage,
      setQuoteMessage,
      animatedMessageId,
      setAnimatedMessageId,
      isScrollBottomReached,
      setIsScrollBottomReached,
      scrollToBottom,
      scrollToMessage,
      toggleReaction
    }, messageDataSource), messageActions) },
    import_react3.default.createElement(UserProfileProvider, { disableUserProfile: (_a = props === null || props === void 0 ? void 0 : props.disableUserProfile) !== null && _a !== void 0 ? _a : config === null || config === void 0 ? void 0 : config.disableUserProfile, renderUserProfile: (_b = props === null || props === void 0 ? void 0 : props.renderUserProfile) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.renderUserProfile, onUserProfileMessage: (_c = props === null || props === void 0 ? void 0 : props.onUserProfileMessage) !== null && _c !== void 0 ? _c : config === null || config === void 0 ? void 0 : config.onUserProfileMessage }, children)
  );
};
var useGroupChannelContext = function() {
  var context = (0, import_react3.useContext)(GroupChannelContext);
  if (!context)
    throw new Error("GroupChannelContext not found. Use within the GroupChannel module.");
  return context;
};
function getCollectionCreator(groupChannel, messageListQueryParams) {
  return function(defaultParams) {
    var params = __assign(__assign(__assign({}, defaultParams), { prevResultLimit: 30, nextResultLimit: 30 }), messageListQueryParams);
    return groupChannel.createMessageCollection(__assign(__assign({}, params), { filter: new Os(params) }));
  };
}

// node_modules/@sendbird/uikit-react/GroupChannel/components/GroupChannelUI.js
var import_react68 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CmAUKSnK.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ConnectionStatus.js
var import_react4 = __toESM(require_react(), 1);
function ConnectionStatus() {
  var stringSet = (0, import_react4.useContext)(LocalizationContext).stringSet;
  return import_react4.default.createElement(
    "div",
    { className: "sendbird-connection-status" },
    import_react4.default.createElement(Label, { type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.TRYING_TO_CONNECT),
    import_react4.default.createElement(Icon, { type: IconTypes.DISCONNECTED, fillColor: IconColors.SENT, width: "14px", height: "14px" })
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CmAUKSnK.js
var GroupChannelUIView = function(props) {
  var _a, _b, _c, _d;
  var isLoading = props.isLoading, isInvalid = props.isInvalid, channelUrl = props.channelUrl;
  var _e = deleteNullish(props), renderChannelHeader = _e.renderChannelHeader, renderMessageList = _e.renderMessageList, renderMessageInput = _e.renderMessageInput, renderTypingIndicator = _e.renderTypingIndicator, renderPlaceholderLoader = _e.renderPlaceholderLoader, renderPlaceholderInvalid = _e.renderPlaceholderInvalid;
  var _f = useSendbirdStateContext(), stores = _f.stores, config = _f.config;
  var sdkError = (_a = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a === void 0 ? void 0 : _a.error;
  var logger = config.logger, isOnline = config.isOnline;
  if (isLoading) {
    return import_react5.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderLoader === null || renderPlaceholderLoader === void 0 ? void 0 : renderPlaceholderLoader()) || import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }));
  }
  if (!channelUrl) {
    return import_react5.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS }));
  }
  if (isInvalid) {
    return import_react5.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG }));
  }
  if (sdkError) {
    return import_react5.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG, retryToConnect: function() {
      logger.info("Channel: reconnecting");
    } }));
  }
  return import_react5.default.createElement(
    "div",
    { className: "sendbird-conversation" },
    renderChannelHeader === null || renderChannelHeader === void 0 ? void 0 : renderChannelHeader({ className: "sendbird-conversation__channel-header" }),
    renderMessageList === null || renderMessageList === void 0 ? void 0 : renderMessageList(props),
    import_react5.default.createElement(
      "div",
      { className: "sendbird-conversation__footer" },
      renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput(),
      import_react5.default.createElement(
        "div",
        { className: "sendbird-conversation__footer__typing-indicator" },
        (renderTypingIndicator === null || renderTypingIndicator === void 0 ? void 0 : renderTypingIndicator()) || ((_b = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_d = (_c = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _c === void 0 ? void 0 : _c.typingIndicatorTypes) === null || _d === void 0 ? void 0 : _d.has(TypingIndicatorType.Text)) && import_react5.default.createElement(TypingIndicator, { channelUrl }),
        !isOnline && import_react5.default.createElement(ConnectionStatus, null)
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/GroupChannelHeader.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-Dg8Q1yIF.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-FBWhhyW3.js
var getChannelTitle = function(channel, currentUserId, stringSet) {
  var _a;
  var LABEL_STRING_SET = stringSet || LabelStringSet;
  if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members)) {
    return LABEL_STRING_SET.NO_TITLE;
  }
  if ((channel === null || channel === void 0 ? void 0 : channel.name) && channel.name !== "Group Channel") {
    return channel.name;
  }
  if (((_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.length) === 1) {
    return LABEL_STRING_SET.NO_MEMBERS;
  }
  return channel === null || channel === void 0 ? void 0 : channel.members.filter(function(_a2) {
    var userId = _a2.userId;
    return userId !== currentUserId;
  }).map(function(_a2) {
    var nickname = _a2.nickname;
    return nickname || LABEL_STRING_SET.NO_NAME;
  }).join(", ");
};

// node_modules/@sendbird/uikit-react/chunks/bundle-Dg8Q1yIF.js
var GroupChannelHeaderView = function(_a) {
  var className = _a.className, currentChannel = _a.currentChannel, showSearchIcon = _a.showSearchIcon, onBackClick = _a.onBackClick, onSearchClick = _a.onSearchClick, onChatHeaderActionClick = _a.onChatHeaderActionClick, renderLeft = _a.renderLeft, renderMiddle = _a.renderMiddle, renderRight = _a.renderRight;
  var config = useSendbirdStateContext().config;
  var userId = config.userId, theme = config.theme;
  var isMobile = useMediaQueryContext().isMobile;
  var stringSet = useLocalization().stringSet;
  var isMuted = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === "muted";
  var channelTitle = getChannelTitle(currentChannel, userId, stringSet);
  return import_react6.default.createElement(Header$1, { className: classnames("sendbird-chat-header", className), renderLeft: renderLeft !== null && renderLeft !== void 0 ? renderLeft : function() {
    return import_react6.default.createElement(
      import_react6.default.Fragment,
      null,
      isMobile && import_react6.default.createElement(Header$1.Icon, { className: "sendbird-chat-header__icon_back", onClick: onBackClick, type: IconTypes.ARROW_LEFT, color: IconColors.PRIMARY, width: "24px", height: "24px" }),
      import_react6.default.createElement(ChannelAvatar, { theme, channel: currentChannel, userId, height: 32, width: 32 })
    );
  }, renderMiddle: renderMiddle !== null && renderMiddle !== void 0 ? renderMiddle : function() {
    return import_react6.default.createElement(Header$1.Title, { title: channelTitle });
  }, renderRight: renderRight !== null && renderRight !== void 0 ? renderRight : function() {
    return import_react6.default.createElement(
      import_react6.default.Fragment,
      null,
      isMuted && import_react6.default.createElement(Header$1.Icon, { className: "sendbird-chat-header__right__mute", type: IconTypes.NOTIFICATIONS_OFF_FILLED, color: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px" }),
      showSearchIcon && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isEphemeral) && import_react6.default.createElement(Header$1.IconButton, { className: "sendbird-chat-header__right__search", onClick: onSearchClick, type: IconTypes.SEARCH, color: IconColors.PRIMARY, renderIcon: function(props) {
        return import_react6.default.createElement(Header$1.Icon, __assign({}, props, { width: "24px", height: "24px" }));
      } }),
      import_react6.default.createElement(Header$1.IconButton, { className: "sendbird-chat-header__right__info", onClick: onChatHeaderActionClick, type: IconTypes.INFO, color: IconColors.PRIMARY, renderIcon: function(props) {
        return import_react6.default.createElement(Header$1.Icon, __assign({}, props, { width: "24px", height: "24px" }));
      } })
    );
  } });
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/GroupChannelHeader.js
var GroupChannelHeader = function(props) {
  var context = useGroupChannelContext();
  return import_react7.default.createElement(GroupChannelHeaderView, __assign({}, props, context, { currentChannel: context.currentChannel }));
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/MessageList.js
var import_react61 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/GroupChannel/components/Message.js
var import_react57 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CAXTSiql.js
var import_react52 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DHJZgVZH.js
var MAX_USER_MENTION_COUNT = 10;
var MAX_USER_SUGGESTION_COUNT = 15;
var USER_MENTION_TEMP_CHAR = "@";
var ThreadReplySelectType;
(function(ThreadReplySelectType2) {
  ThreadReplySelectType2["PARENT"] = "PARENT";
  ThreadReplySelectType2["THREAD"] = "THREAD";
})(ThreadReplySelectType || (ThreadReplySelectType = {}));

// node_modules/@sendbird/uikit-react/Message/hooks/useDirtyGetMentions.js
var import_react8 = __toESM(require_react(), 1);
function getMentionNodes(root) {
  if (root) {
    var mentions = root.querySelectorAll("[data-sb-mention='true']");
    var mentionsArray = Array.from(mentions);
    return mentionsArray;
  }
  return [];
}
function useDirtyGetMentions(_a, _b) {
  var ref = _a.ref;
  var logger = _b.logger;
  var targetNode = ref.current;
  var _c = (0, import_react8.useState)([]), mentionNodes = _c[0], setMentionNodes = _c[1];
  (0, import_react8.useLayoutEffect)(function() {
    if (targetNode) {
      var mentions = getMentionNodes(targetNode);
      setMentionNodes(mentions);
    }
  }, [targetNode]);
  (0, import_react8.useEffect)(function() {
    var config = { childList: true, subtree: true };
    var callback = function(mutationList) {
      var hasMutation = mutationList.length > 0;
      if (hasMutation) {
        setMentionNodes(getMentionNodes(targetNode));
      }
    };
    var observer = new MutationObserver(callback);
    if (targetNode) {
      observer.observe(targetNode, config);
    }
    return function() {
      try {
        observer.disconnect();
      } catch (error) {
        logger.error("useDirtyGetMentions: observer disconnect failed", { observer });
      }
    };
  }, [targetNode]);
  return mentionNodes;
}

// node_modules/@sendbird/uikit-react/ui/DateSeparator.js
var import_react9 = __toESM(require_react(), 1);
var DateSeparator = function(_a) {
  var _b = _a.children, children = _b === void 0 ? void 0 : _b, _c = _a.className, className = _c === void 0 ? "" : _c, _d = _a.separatorColor, separatorColor = _d === void 0 ? Colors.ONBACKGROUND_4 : _d;
  return import_react9.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-separator"
    ], false).join(" ") },
    import_react9.default.createElement("div", { className: ["sendbird-separator__left", "".concat(changeColorToClassName2(separatorColor), "--background-color")].join(" ") }),
    import_react9.default.createElement("div", { className: "sendbird-separator__text" }, children || import_react9.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, "Date Separator")),
    import_react9.default.createElement("div", { className: ["sendbird-separator__right", "".concat(changeColorToClassName2(separatorColor), "--background-color")].join(" ") })
  );
};

// node_modules/@sendbird/uikit-react/ui/MessageInput.js
var import_react11 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DcNHBjGp.js
var MessageInputKeys = {
  Enter: "Enter",
  ArrowUp: "ArrowUp",
  ArrowDown: "ArrowDown",
  Backspace: "Backspace"
};
var NodeTypes = {
  ElementNode: 1,
  TextNode: 3
};
var NodeNames = {
  Span: "SPAN",
  Br: "BR",
  Div: "DIV"
};

// node_modules/@sendbird/uikit-react/chunks/bundle-BGQ77Eco.js
var import_react10 = __toESM(require_react(), 1);

// node_modules/dompurify/dist/purify.es.mjs
var {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
var {
  freeze,
  seal,
  create
} = Object;
var {
  apply,
  construct
} = typeof Reflect !== "undefined" && Reflect;
if (!freeze) {
  freeze = function freeze2(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal2(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply2(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct2(Func, args) {
    return new Func(...args);
  };
}
var arrayForEach = unapply(Array.prototype.forEach);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringToString = unapply(String.prototype.toString);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
  return function(thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
function unconstruct(func) {
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === "string") {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === "object" && value.constructor === Object) {
        newObject[property] = clone(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === "function") {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}
var html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
var svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
var mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]);
var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
var text = freeze(["#text"]);
var html = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]);
var svg = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
var mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
var IS_ALLOWED_URI = seal(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
);
var DOCTYPE_NAME = seal(/^html$/i);
var CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);
var EXPRESSIONS = Object.freeze({
  __proto__: null,
  MUSTACHE_EXPR,
  ERB_EXPR,
  TMPLIT_EXPR,
  DATA_ATTR,
  ARIA_ATTR,
  IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA,
  ATTR_WHITESPACE,
  DOCTYPE_NAME,
  CUSTOM_ELEMENT
});
var NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12
  // Deprecated
};
var getGlobal = function getGlobal2() {
  return typeof window === "undefined" ? null : window;
};
var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== "object" || typeof trustedTypes.createPolicy !== "function") {
    return null;
  }
  let suffix = null;
  const ATTR_NAME = "data-tt-policy-suffix";
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = "dompurify" + (suffix ? "#" + suffix : "");
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html2) {
        return html2;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    console.warn("TrustedTypes policy " + policyName + " could not be created.");
    return null;
  }
};
function createDOMPurify() {
  let window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
  const DOMPurify = (root) => createDOMPurify(root);
  DOMPurify.version = "3.1.6";
  DOMPurify.removed = [];
  if (!window2 || !window2.document || window2.document.nodeType !== NODE_TYPE.document) {
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document: document2
  } = window2;
  const originalDocument = document2;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node: Node2,
    Element,
    NodeFilter,
    NamedNodeMap = window2.NamedNodeMap || window2.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window2;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, "cloneNode");
  const remove = lookupGetter(ElementPrototype, "remove");
  const getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
  const getChildNodes = lookupGetter(ElementPrototype, "childNodes");
  const getParentNode = lookupGetter(ElementPrototype, "parentNode");
  if (typeof HTMLTemplateElement === "function") {
    const template = document2.createElement("template");
    if (template.content && template.content.ownerDocument) {
      document2 = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = "";
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document2;
  const {
    importNode
  } = originalDocument;
  let hooks = {};
  DOMPurify.isSupported = typeof entries === "function" && typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: MUSTACHE_EXPR2,
    ERB_EXPR: ERB_EXPR2,
    TMPLIT_EXPR: TMPLIT_EXPR2,
    DATA_ATTR: DATA_ATTR2,
    ARIA_ATTR: ARIA_ATTR2,
    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA2,
    ATTR_WHITESPACE: ATTR_WHITESPACE2,
    CUSTOM_ELEMENT: CUSTOM_ELEMENT2
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  let FORBID_TAGS = null;
  let FORBID_ATTR = null;
  let ALLOW_ARIA_ATTR = true;
  let ALLOW_DATA_ATTR = true;
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  let SAFE_FOR_TEMPLATES = false;
  let SAFE_FOR_XML = true;
  let WHOLE_DOCUMENT = false;
  let SET_CONFIG = false;
  let FORCE_BODY = false;
  let RETURN_DOM = false;
  let RETURN_DOM_FRAGMENT = false;
  let RETURN_TRUSTED_TYPE = false;
  let SANITIZE_DOM = true;
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
  let KEEP_CONTENT = true;
  let IN_PLACE = false;
  let USE_PROFILES = {};
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
  const MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
  const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
  const HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
  const DEFAULT_PARSER_MEDIA_TYPE = "text/html";
  let transformCaseFunc = null;
  let CONFIG = null;
  const formElement = document2.createElement("form");
  const isRegexOrFunction = function isRegexOrFunction2(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  const _parseConfig = function _parseConfig2() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    if (!cfg || typeof cfg !== "object") {
      cfg = {};
    }
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
    ALLOWED_TAGS = objectHasOwnProperty(cfg, "ALLOWED_TAGS") ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, "ALLOWED_ATTR") ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, "ALLOWED_NAMESPACES") ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, "ADD_URI_SAFE_ATTR") ? addToSet(
      clone(DEFAULT_URI_SAFE_ATTRIBUTES),
      // eslint-disable-line indent
      cfg.ADD_URI_SAFE_ATTR,
      // eslint-disable-line indent
      transformCaseFunc
      // eslint-disable-line indent
    ) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, "ADD_DATA_URI_TAGS") ? addToSet(
      clone(DEFAULT_DATA_URI_TAGS),
      // eslint-disable-line indent
      cfg.ADD_DATA_URI_TAGS,
      // eslint-disable-line indent
      transformCaseFunc
      // eslint-disable-line indent
    ) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, "FORBID_CONTENTS") ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, "FORBID_TAGS") ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = objectHasOwnProperty(cfg, "FORBID_ATTR") ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = objectHasOwnProperty(cfg, "USE_PROFILES") ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false;
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
    RETURN_DOM = cfg.RETURN_DOM || false;
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
    FORCE_BODY = cfg.FORCE_BODY || false;
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
    IN_PLACE = cfg.IN_PLACE || false;
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    if (KEEP_CONTENT) {
      ALLOWED_TAGS["#text"] = true;
    }
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
    }
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ["tbody"]);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      emptyHTML = trustedTypesPolicy.createHTML("");
    } else {
      if (trustedTypesPolicy === void 0) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      if (trustedTypesPolicy !== null && typeof emptyHTML === "string") {
        emptyHTML = trustedTypesPolicy.createHTML("");
      }
    }
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
  const HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "annotation-xml"]);
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  const _checkValidNamespace = function _checkValidNamespace2(element) {
    let parent = getParentNode(element);
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: "template"
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "svg";
      }
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "math";
      }
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
      }
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    return false;
  };
  const _forceRemove = function _forceRemove2(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  const _removeAttribute = function _removeAttribute2(name, node) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: node.getAttributeNode(name),
        from: node
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: node
      });
    }
    node.removeAttribute(name);
    if (name === "is" && !ALLOWED_ATTR[name]) {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(node);
        } catch (_) {
        }
      } else {
        try {
          node.setAttribute(name, "");
        } catch (_) {
        }
      }
    }
  };
  const _initDocument = function _initDocument2(dirty) {
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = "<remove></remove>" + dirty;
    } else {
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) {
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {
      }
    }
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, "template", null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  const _createNodeIterator = function _createNodeIterator2(root) {
    return createNodeIterator.call(
      root.ownerDocument || root,
      root,
      // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION,
      null
    );
  };
  const _isClobbered = function _isClobbered2(elm) {
    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function" || typeof elm.hasChildNodes !== "function");
  };
  const _isNode = function _isNode2(object) {
    return typeof Node2 === "function" && object instanceof Node2;
  };
  const _executeHook = function _executeHook2(entryPoint, currentNode, data) {
    if (!hooks[entryPoint]) {
      return;
    }
    arrayForEach(hooks[entryPoint], (hook) => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  };
  const _sanitizeElements = function _sanitizeElements2(currentNode) {
    let content = null;
    _executeHook("beforeSanitizeElements", currentNode, null);
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    const tagName = transformCaseFunc(currentNode.nodeName);
    _executeHook("uponSanitizeElement", currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        content = stringReplace(content, expr, " ");
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    _executeHook("afterSanitizeElements", currentNode, null);
    return false;
  };
  const _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
    if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
      return false;
    }
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR2, lcName)) ;
    else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR2, lcName)) ;
    else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
        // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
      ) ;
      else {
        return false;
      }
    } else if (URI_SAFE_ATTRIBUTES[lcName]) ;
    else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE2, ""))) ;
    else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag]) ;
    else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA2, stringReplace(value, ATTR_WHITESPACE2, ""))) ;
    else if (value) {
      return false;
    } else ;
    return true;
  };
  const _isBasicCustomElement = function _isBasicCustomElement2(tagName) {
    return tagName !== "annotation-xml" && stringMatch(tagName, CUSTOM_ELEMENT2);
  };
  const _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
    _executeHook("beforeSanitizeAttributes", currentNode, null);
    const {
      attributes
    } = currentNode;
    if (!attributes) {
      return;
    }
    const hookEvent = {
      attrName: "",
      attrValue: "",
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR
    };
    let l = attributes.length;
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === "value" ? attrValue : stringTrim(attrValue);
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = void 0;
      _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
      value = hookEvent.attrValue;
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      _removeAttribute(name, currentNode);
      if (!hookEvent.keepAttr) {
        continue;
      }
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
          value = stringReplace(value, expr, " ");
        });
      }
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
        _removeAttribute(name, currentNode);
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      if (trustedTypesPolicy && typeof trustedTypes === "object" && typeof trustedTypes.getAttributeType === "function") {
        if (namespaceURI) ;
        else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case "TrustedHTML": {
              value = trustedTypesPolicy.createHTML(value);
              break;
            }
            case "TrustedScriptURL": {
              value = trustedTypesPolicy.createScriptURL(value);
              break;
            }
          }
        }
      }
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          currentNode.setAttribute(name, value);
        }
        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);
        } else {
          arrayPop(DOMPurify.removed);
        }
      } catch (_) {
      }
    }
    _executeHook("afterSanitizeAttributes", currentNode, null);
  };
  const _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    _executeHook("beforeSanitizeShadowDOM", fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      _executeHook("uponSanitizeShadowNode", shadowNode, null);
      if (_sanitizeElements(shadowNode)) {
        continue;
      }
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM2(shadowNode.content);
      }
      _sanitizeAttributes(shadowNode);
    }
    _executeHook("afterSanitizeShadowDOM", fragment, null);
  };
  DOMPurify.sanitize = function(dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = "<!-->";
    }
    if (typeof dirty !== "string" && !_isNode(dirty)) {
      if (typeof dirty.toString === "function") {
        dirty = dirty.toString();
        if (typeof dirty !== "string") {
          throw typeErrorCreate("dirty is not a string, aborting");
        }
      } else {
        throw typeErrorCreate("toString is not a function");
      }
    }
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    DOMPurify.removed = [];
    if (typeof dirty === "string") {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
        }
      }
    } else if (dirty instanceof Node2) {
      body = _initDocument("<!---->");
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === "BODY") {
        body = importedNode;
      } else if (importedNode.nodeName === "HTML") {
        body = importedNode;
      } else {
        body.appendChild(importedNode);
      }
    } else {
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf("<") === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      body = _initDocument(dirty);
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
      }
    }
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    while (currentNode = nodeIterator.nextNode()) {
      if (_sanitizeElements(currentNode)) {
        continue;
      }
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
      _sanitizeAttributes(currentNode);
    }
    if (IN_PLACE) {
      return dirty;
    }
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
    }
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        serializedHTML = stringReplace(serializedHTML, expr, " ");
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function() {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function(tag, attr, value) {
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function(entryPoint, hookFunction) {
    if (typeof hookFunction !== "function") {
      return;
    }
    hooks[entryPoint] = hooks[entryPoint] || [];
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function(entryPoint) {
    if (hooks[entryPoint]) {
      return arrayPop(hooks[entryPoint]);
    }
  };
  DOMPurify.removeHooks = function(entryPoint) {
    if (hooks[entryPoint]) {
      hooks[entryPoint] = [];
    }
  };
  DOMPurify.removeAllHooks = function() {
    hooks = {};
  };
  return DOMPurify;
}
var purify = createDOMPurify();

// node_modules/@sendbird/uikit-react/chunks/bundle-BVBoUWl2.js
var TEXT_MESSAGE_BODY_CLASSNAME = "sendbird-text-message-item-body";

// node_modules/@sendbird/uikit-react/chunks/bundle-fSuFm2tD.js
var OG_MESSAGE_BODY_CLASSNAME = "sendbird-og-message-item-body__text-bubble";

// node_modules/@sendbird/uikit-react/chunks/bundle-BGQ77Eco.js
function renderToString(_a) {
  var userId = _a.userId, nickname = _a.nickname;
  var el = '<span data-userid="'.concat(userId, '" data-sb-mention="true" class="').concat(MENTION_USER_LABEL_CLASSNAME, '">').concat(nickname, "</span>");
  var purifier = purify(window);
  var sanitized_ = purifier.sanitize(el);
  var token = sanitized_.split(" ");
  var spanTag = token[0], rest = token.slice(1);
  var sanitized = __spreadArray([spanTag, 'contenteditable="false"'], rest, true).join(" ");
  return sanitized;
}
var sanitizeString = function(str) {
  return str === null || str === void 0 ? void 0 : str.replace(/[\u00A0-\u9999<>]/gim, function(i) {
    return "".concat("&#", String(i.charCodeAt(0)), ";");
  });
};
var nodeListToArray = function(childNodes) {
  return childNodes ? Array.from(childNodes) : [];
};
function isChannelTypeSupportsMultipleFilesMessage(channel) {
  var _a;
  return channel && ((_a = channel.isGroupChannel) === null || _a === void 0 ? void 0 : _a.call(channel)) && !channel.isBroadcast && !channel.isSuper;
}
function isHTMLElement(node) {
  return node.nodeType === NodeTypes.ElementNode;
}
function extractTextAndMentions(childNodes) {
  var messageText = "";
  var mentionTemplate = "";
  childNodes.forEach(function(node) {
    if (isHTMLElement(node) && node.nodeName === NodeNames.Span) {
      var innerText = node.innerText, _a = node.dataset, dataset = _a === void 0 ? {} : _a;
      var _b = dataset.userid, userid = _b === void 0 ? "" : _b;
      messageText += innerText;
      mentionTemplate += "".concat(USER_MENTION_TEMP_CHAR, "{").concat(userid, "}");
    } else if (isHTMLElement(node) && node.nodeName === NodeNames.Br) {
      messageText += "\n";
      mentionTemplate += "\n";
    } else if (isHTMLElement(node) && node.nodeName === NodeNames.Div) {
      var _c = node.textContent, textContent = _c === void 0 ? "" : _c;
      messageText += "\n".concat(textContent);
      mentionTemplate += "\n".concat(textContent);
    } else {
      var _d = node.textContent, textContent = _d === void 0 ? "" : _d;
      messageText += textContent;
      mentionTemplate += textContent;
    }
  });
  return { messageText, mentionTemplate };
}
function inserTemplateToDOM(templateList) {
  var nodes = templateList.map(function(template) {
    var text2 = template.text, userId = template.userId;
    if (userId) {
      return renderToString({ userId, nickname: text2 });
    }
    return sanitizeString(text2);
  }).join(" ").concat(" ");
  document.execCommand("insertHTML", false, nodes);
}
var PASTE_NODE = "sendbird-uikit__paste-node";
var TEXT_MESSAGE_CLASS = "sendbird-word";
var MENTION_CLASS = "sendbird-word__mention";
var MENTION_CLASS_IN_INPUT = "sendbird-mention-user-label";
var MENTION_CLASS_COMBINED_QUERY = ".".concat(MENTION_CLASS, ", .").concat(MENTION_CLASS_IN_INPUT);
function querySelectorIncludingSelf(master, selector) {
  var result = __spreadArray([
    master
  ], Array.from(master.querySelectorAll(selector)), true).find(function(el) {
    return el.matches(selector);
  });
  return result;
}
function getLeafNodes(master) {
  var ogMessage = querySelectorIncludingSelf(master, ".".concat(OG_MESSAGE_BODY_CLASSNAME));
  if (ogMessage) {
    return nodeListToArray(ogMessage.childNodes);
  }
  var textMessageBody = querySelectorIncludingSelf(master, ".".concat(TEXT_MESSAGE_BODY_CLASSNAME));
  if (textMessageBody) {
    return nodeListToArray(textMessageBody.childNodes);
  }
  return nodeListToArray(master.childNodes);
}
function createPasteNode() {
  var pasteNode = document.body.querySelector("#".concat(PASTE_NODE));
  if (pasteNode) {
    pasteNode === null || pasteNode === void 0 ? void 0 : pasteNode.remove();
  }
  var node = document.createElement("div");
  node.id = PASTE_NODE;
  node.style.display = "none";
  return node;
}
function hasMention(parent) {
  return (parent === null || parent === void 0 ? void 0 : parent.querySelector(MENTION_CLASS_COMBINED_QUERY)) ? true : false;
}
var extractTextFromNodes = function(nodes) {
  var text2 = "";
  nodes.forEach(function(node) {
    var textNodes = node.querySelectorAll(".".concat(TEXT_MESSAGE_CLASS));
    if (textNodes.length > 0) {
      text2 += extractTextFromNodes(Array.from(textNodes)) + " ";
    }
    text2 += node.innerText + " ";
  });
  return text2;
};
function domToMessageTemplate(nodeArray) {
  var templates = nodeArray === null || nodeArray === void 0 ? void 0 : nodeArray.reduce(function(accumulator, currentValue) {
    var _a, _b;
    var mentionNode;
    var text2 = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;
    if (currentValue instanceof Text) {
      mentionNode = false;
      text2 = (_a = currentValue.textContent) !== null && _a !== void 0 ? _a : "";
    }
    if (currentValue instanceof HTMLElement) {
      mentionNode = currentValue.classList.contains(MENTION_CLASS) || currentValue.classList.contains(MENTION_CLASS_IN_INPUT) ? currentValue : currentValue.querySelector(MENTION_CLASS_COMBINED_QUERY);
    }
    if (mentionNode) {
      var text_1 = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;
      var userId = (_b = mentionNode.dataset) === null || _b === void 0 ? void 0 : _b.userid;
      return __spreadArray(__spreadArray([], accumulator, true), [
        {
          text: text_1,
          userId
        }
      ], false);
    }
    return __spreadArray(__spreadArray([], accumulator, true), [
      {
        text: text2
      }
    ], false);
  }, []);
  return templates;
}
function getUsersFromWords(templates, channel) {
  var userMap = {};
  var users = channel.members;
  templates.forEach(function(template) {
    if (template.userId) {
      var mentionedMember = users.find(function(user) {
        return user.userId === template.userId;
      });
      if (mentionedMember) {
        userMap[template.userId] = mentionedMember;
      }
    }
  });
  return Object.values(userMap);
}
function usePaste(_a) {
  var ref = _a.ref, setIsInput = _a.setIsInput, setHeight = _a.setHeight, channel = _a.channel, setMentionedUsers = _a.setMentionedUsers;
  return (0, import_react10.useCallback)(function(e) {
    e.preventDefault();
    var html2 = e.clipboardData.getData("text/html");
    if (!html2) {
      var text2 = e.clipboardData.getData("text") || getURIListText(e);
      document.execCommand("insertHTML", false, sanitizeString(text2));
      setIsInput(true);
      setHeight();
      return;
    }
    var purifier = purify(window);
    var clean = purifier.sanitize(html2);
    var pasteNode = createPasteNode();
    if (pasteNode) {
      pasteNode.innerHTML = clean;
      if (!hasMention(pasteNode)) {
        var text2 = extractTextFromNodes(Array.from(pasteNode.children));
        document.execCommand("insertHTML", false, sanitizeString(text2));
        pasteNode.remove();
        setIsInput(true);
        setHeight();
        return;
      }
      var leafNodes = getLeafNodes(pasteNode);
      var words = domToMessageTemplate(leafNodes);
      var mentionedUsers = channel.isGroupChannel() ? getUsersFromWords(words, channel) : [];
      setMentionedUsers(mentionedUsers);
      inserTemplateToDOM(words);
      pasteNode.remove();
    }
    setIsInput(true);
    setHeight();
  }, [ref, setIsInput, setHeight, channel, setMentionedUsers]);
}
function getURIListText(e) {
  var pasteData = e.clipboardData.getData("text/uri-list");
  if (pasteData.length === 0)
    return "";
  return pasteData.split("\n").reduce(function(accumulator, line) {
    var txt = line.trim();
    if (txt !== "" && !txt.startsWith("#")) {
      accumulator += txt + "\n";
    }
    return accumulator;
  }, "");
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DtlqJEe7.js
var USER_MENTION_PREFIX = "@";
var TOKEN_TYPES = {
  string: "string",
  mention: "mention",
  url: "url",
  undetermined: "undetermined",
  markdown: "markdown"
};
var MarkdownRegex = /\[(.*?)\]\((.*?)\)|\*\*(.*?)\*\*/g;
function getUserMentionRegex(mentionedUsers, templatePrefix_) {
  var templatePrefix = templatePrefix_ || USER_MENTION_PREFIX;
  return RegExp("(".concat(mentionedUsers.map(function(u) {
    var userId = u.userId.replace(
      // If user.id includes these patterns, need to convert it into an escaped one
      /([.*+?^${}()|[\]\\])/g,
      "\\$1"
    );
    return "".concat(templatePrefix, "\\{").concat(userId, "\\}");
  }).join("|"), ")"), "g");
}
function identifyMentions(_a) {
  var tokens = _a.tokens, _b = _a.mentionedUsers, mentionedUsers = _b === void 0 ? [] : _b, _c = _a.templatePrefix, templatePrefix = _c === void 0 ? USER_MENTION_PREFIX : _c;
  if (!(mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length)) {
    return tokens;
  }
  var userMentionRegex = getUserMentionRegex(mentionedUsers, templatePrefix);
  var results = tokens.map(function(token) {
    if (token.type !== TOKEN_TYPES.undetermined) {
      return token;
    }
    var value = token.value;
    var parts = value.split(userMentionRegex);
    var tokens2 = parts.map(function(part) {
      if (part.match(userMentionRegex)) {
        var matchedUser = mentionedUsers.find(function(user) {
          return "@{".concat(user === null || user === void 0 ? void 0 : user.userId, "}") === part;
        });
        var nickname = (matchedUser === null || matchedUser === void 0 ? void 0 : matchedUser.nickname) || "(No name)";
        return { value: nickname, type: TOKEN_TYPES.mention, userId: matchedUser === null || matchedUser === void 0 ? void 0 : matchedUser.userId };
      } else {
        return { value: part, type: TOKEN_TYPES.undetermined };
      }
    });
    return tokens2;
  }).flat();
  return results;
}
function identifyUrlsAndStrings(token) {
  var URL_REG = /(?:https?:\/\/|www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.(xn--)?[a-z]{2,20}\b([-a-zA-Z0-9@:%_+[\],.~#?&/=]*[-a-zA-Z0-9@:%_+~#?&/=])*/g;
  var results = token.map(function(token2) {
    if (token2.type !== TOKEN_TYPES.undetermined) {
      return token2;
    }
    var _a = token2.value, value = _a === void 0 ? "" : _a;
    var matches = Array.from(value.matchAll(URL_REG));
    var founds = matches.map(function(value2) {
      var _a2;
      var text2 = value2[0];
      var start = (_a2 = value2.index) !== null && _a2 !== void 0 ? _a2 : 0;
      var end = start + text2.length;
      return { text: text2, start, end };
    });
    var items = [{ value, type: TOKEN_TYPES.string }];
    var cursor = 0;
    founds.forEach(function(_a2) {
      var text2 = _a2.text, start = _a2.start, end = _a2.end;
      var restText = items.pop().value;
      var head = restText.slice(0, start - cursor);
      var mid = text2;
      var tail = restText.slice(end - cursor);
      if (head.length > 0)
        items.push({ value: head, type: TOKEN_TYPES.string });
      items.push({ value: mid, type: TOKEN_TYPES.url });
      if (tail.length > 0)
        items.push({ value: tail, type: TOKEN_TYPES.string });
      cursor = end;
    });
    return items;
  }).flat();
  return results;
}
function splitTokensWithMarkdowns(tokens) {
  var prevTokens = tokens;
  var newTokens = [];
  prevTokens.forEach(function(token) {
    if (token.type === TOKEN_TYPES.mention || token.type === TOKEN_TYPES.markdown) {
      newTokens.push(token);
      return;
    }
    var rawStr = token.value;
    var matches = Array.from(rawStr.matchAll(MarkdownRegex));
    var allMatches = matches.map(function(value) {
      var _a;
      var text2 = value[0];
      var start = (_a = value.index) !== null && _a !== void 0 ? _a : 0;
      var end = start + text2.length;
      return { text: text2, start, end, groups: value.filter(function(val) {
        return typeof val === "string";
      }) };
    });
    var restText = rawStr;
    var cursor = 0;
    allMatches.forEach(function(_a) {
      var text2 = _a.text, start = _a.start, end = _a.end, groups = _a.groups;
      var left = {
        type: TOKEN_TYPES.undetermined,
        value: restText.slice(0, start - cursor)
      };
      newTokens.push(left);
      var markdownType;
      if (text2.startsWith("[")) {
        markdownType = "url";
      } else if (text2.startsWith("**")) {
        markdownType = "bold";
      }
      var mid = {
        type: TOKEN_TYPES.markdown,
        markdownType,
        value: text2,
        groups
      };
      newTokens.push(mid);
      restText = rawStr.slice(end);
      cursor = end;
    });
    if (restText) {
      var right = {
        type: TOKEN_TYPES.undetermined,
        value: restText
      };
      newTokens.push(right);
    }
  });
  return newTokens;
}
function combineNearbyStrings(tokens) {
  var results = tokens.reduce(function(acc, token) {
    var lastToken = acc[acc.length - 1];
    if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === TOKEN_TYPES.string && token.type === TOKEN_TYPES.string) {
      lastToken.value = "".concat(lastToken.value).concat(token.value);
      return acc;
    }
    return __spreadArray(__spreadArray([], acc, true), [token], false);
  }, []);
  return results;
}
function tokenizeMessage(_a) {
  var messageText = _a.messageText, _b = _a.mentionedUsers, mentionedUsers = _b === void 0 ? [] : _b, _c = _a.templatePrefix, templatePrefix = _c === void 0 ? USER_MENTION_PREFIX : _c, _d = _a.includeMarkdown, includeMarkdown = _d === void 0 ? false : _d;
  var partialResult = [{
    type: TOKEN_TYPES.undetermined,
    value: messageText
  }];
  var partialWithMentions = identifyMentions({
    tokens: partialResult,
    mentionedUsers,
    templatePrefix
  });
  var partialsWithUrlsAndMentions = identifyUrlsAndStrings(includeMarkdown ? splitTokensWithMarkdowns(partialWithMentions) : partialWithMentions);
  var result = combineNearbyStrings(partialsWithUrlsAndMentions);
  return result;
}
function tokenizeMarkdown(_a) {
  var messageText = _a.messageText;
  var partialResult = [{
    type: TOKEN_TYPES.undetermined,
    value: messageText
  }];
  var result = combineNearbyStrings(splitTokensWithMarkdowns(partialResult));
  return result;
}
function getWhiteSpacePreservedText(text2) {
  var NON_BREAKING_SPACE = " ";
  var lines = text2.split("\n");
  var processedLines = lines.map(function(line) {
    var _a, _b;
    var leadingWhitespace = ((_a = line.match(/^\s*/)) === null || _a === void 0 ? void 0 : _a[0]) || "";
    var trailingWhitespace = ((_b = line.match(/\s*$/)) === null || _b === void 0 ? void 0 : _b[0]) || "";
    var convertedLeadingWhitespace = leadingWhitespace.replace(/ /g, NON_BREAKING_SPACE);
    var convertedTrailingWhitespace = trailingWhitespace.replace(/ /g, NON_BREAKING_SPACE);
    return convertedLeadingWhitespace + line.trim() + convertedTrailingWhitespace;
  });
  var result = processedLines.join("\n");
  return result;
}

// node_modules/@sendbird/uikit-react/ui/MessageInput.js
var ChannelType;
(function(ChannelType2) {
  ChannelType2["BASE"] = "base";
  ChannelType2["GROUP"] = "group";
  ChannelType2["OPEN"] = "open";
})(ChannelType || (ChannelType = {}));
var checkIfFileUploadEnabled = function(_a) {
  var channel = _a.channel, config = _a.config;
  var isEnabled = K(channel === null || channel === void 0 ? void 0 : channel.channelType).with(ChannelType.GROUP, function() {
    var _a2;
    return (_a2 = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.enableDocument;
  }).with(ChannelType.OPEN, function() {
    var _a2;
    return (_a2 = config === null || config === void 0 ? void 0 : config.openChannel) === null || _a2 === void 0 ? void 0 : _a2.enableDocument;
  }).otherwise(function() {
    return true;
  });
  return isEnabled;
};
var TEXT_FIELD_ID = "sendbird-message-input-text-field";
var LINE_HEIGHT = 76;
var DEFAULT_CHAT_VIEW_HEIGHT = 600;
var noop2 = function() {
  return null;
};
var displayCaret = function(element, position) {
  var range = document.createRange();
  var sel = window.getSelection();
  range.setStart(element.childNodes[0], position);
  range.collapse(true);
  sel === null || sel === void 0 ? void 0 : sel.removeAllRanges();
  sel === null || sel === void 0 ? void 0 : sel.addRange(range);
  element.focus();
};
var resetInput = function(ref) {
  if (ref && ref.current) {
    ref.current.innerHTML = "";
  }
};
var initialTargetStringInfo = {
  targetString: "",
  startNodeIndex: null,
  startOffsetIndex: null,
  endNodeIndex: null,
  endOffsetIndex: null
};
var MessageInput = import_react11.default.forwardRef(function(props, externalRef) {
  var _a, _b, _c, _d, _e;
  var channel = props.channel, _f = props.className, className = _f === void 0 ? "" : _f, _g = props.messageFieldId, messageFieldId = _g === void 0 ? "" : _g, _h = props.isEdit, isEdit = _h === void 0 ? false : _h, _j = props.isMobile, isMobile = _j === void 0 ? false : _j, _k = props.isMentionEnabled, isMentionEnabled = _k === void 0 ? false : _k, _l = props.isVoiceMessageEnabled, isVoiceMessageEnabled = _l === void 0 ? true : _l, _m = props.isSelectingMultipleFilesEnabled, isSelectingMultipleFilesEnabled = _m === void 0 ? false : _m, _o = props.disabled, disabled = _o === void 0 ? false : _o, _p = props.message, message = _p === void 0 ? null : _p, _q = props.placeholder, placeholder = _q === void 0 ? "" : _q, _r = props.maxLength, maxLength = _r === void 0 ? 5e3 : _r, _s = props.onFileUpload, onFileUpload = _s === void 0 ? noop2 : _s, _t = props.onSendMessage, onSendMessage = _t === void 0 ? noop2 : _t, _u = props.onUpdateMessage, onUpdateMessage = _u === void 0 ? noop2 : _u, _v = props.onCancelEdit, onCancelEdit = _v === void 0 ? noop2 : _v, _w = props.onStartTyping, onStartTyping = _w === void 0 ? noop2 : _w, _x = props.channelUrl, channelUrl = _x === void 0 ? "" : _x, _y = props.mentionSelectedUser, mentionSelectedUser = _y === void 0 ? null : _y, _z = props.onUserMentioned, onUserMentioned = _z === void 0 ? noop2 : _z, _0 = props.onMentionStringChange, onMentionStringChange = _0 === void 0 ? noop2 : _0, _1 = props.onMentionedUserIdsUpdated, onMentionedUserIdsUpdated = _1 === void 0 ? noop2 : _1, _2 = props.onVoiceMessageIconClick, onVoiceMessageIconClick = _2 === void 0 ? noop2 : _2, _3 = props.onKeyUp, onKeyUp = _3 === void 0 ? noop2 : _3, _4 = props.onKeyDown, onKeyDown = _4 === void 0 ? noop2 : _4, _5 = props.renderFileUploadIcon, renderFileUploadIcon = _5 === void 0 ? noop2 : _5, _6 = props.renderVoiceMessageIcon, renderVoiceMessageIcon = _6 === void 0 ? noop2 : _6, _7 = props.renderSendMessageIcon, renderSendMessageIcon = _7 === void 0 ? noop2 : _7, _8 = props.setMentionedUsers, setMentionedUsers = _8 === void 0 ? noop2 : _8, acceptableMimeTypes = props.acceptableMimeTypes;
  var internalRef = externalRef && "current" in externalRef ? externalRef : null;
  var ghostInputRef = (0, import_react11.useRef)(null);
  var textFieldId = messageFieldId || TEXT_FIELD_ID;
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var isFileUploadEnabled = checkIfFileUploadEnabled({
    channel,
    config
  });
  var fileInputRef = (0, import_react11.useRef)();
  var _9 = (0, import_react11.useState)(false), isInput = _9[0], setIsInput = _9[1];
  var _10 = (0, import_react11.useState)([]), mentionedUserIds = _10[0], setMentionedUserIds = _10[1];
  var _11 = (0, import_react11.useState)(__assign({}, initialTargetStringInfo)), targetStringInfo = _11[0], setTargetStringInfo = _11[1];
  var setHeight = (0, import_react11.useCallback)(function() {
    var elem = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    if (!elem)
      return;
    try {
      var estimatedChatViewHeight = window.document.body.offsetHeight || DEFAULT_CHAT_VIEW_HEIGHT;
      var MAX_HEIGHT = estimatedChatViewHeight * 0.6;
      if (elem.scrollHeight >= LINE_HEIGHT) {
        if (MAX_HEIGHT < elem.scrollHeight) {
          elem.style.height = "auto";
          elem.style.height = "".concat(MAX_HEIGHT, "px");
        } else {
          elem.style.height = "";
        }
      }
    } catch (error) {
    }
  }, []);
  var initialValue = props === null || props === void 0 ? void 0 : props.value;
  (0, import_react11.useEffect)(function() {
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    try {
      if (textField && initialValue) {
        textField.innerHTML = initialValue;
        displayCaret(textField, initialValue === null || initialValue === void 0 ? void 0 : initialValue.length);
      }
    } catch (_a2) {
    }
    setMentionedUserIds([]);
    setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? textField.textContent.trim().length > 0 : false);
    setHeight();
  }, [initialValue]);
  (0, import_react11.useEffect)(function() {
    if (!isEdit) {
      setIsInput(false);
      resetInput(internalRef);
    }
  }, [channelUrl]);
  (0, import_react11.useEffect)(function() {
    var _a2, _b2;
    if (isEdit && (message === null || message === void 0 ? void 0 : message.messageId)) {
      var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
      if (isMentionEnabled && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0 && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) && message.mentionedMessageTemplate.length > 0) {
        var _c2 = message.mentionedUsers, mentionedUsers_1 = _c2 === void 0 ? [] : _c2;
        var tokens = tokenizeMessage({
          messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
          mentionedUsers: mentionedUsers_1,
          includeMarkdown: channel.isGroupChannel() && config.groupChannel.enableMarkdownForUserMessage
        });
        if (textField) {
          textField.innerHTML = tokens.map(function(token) {
            if (token.type === TOKEN_TYPES.mention) {
              var mentionedUser = mentionedUsers_1.find(function(user) {
                return user.userId === token.userId;
              });
              var nickname = "".concat(USER_MENTION_PREFIX).concat((mentionedUser === null || mentionedUser === void 0 ? void 0 : mentionedUser.nickname) || token.value || stringSet.MENTION_NAME__NO_NAME);
              return renderToString({
                userId: token.userId,
                nickname
              });
            }
            return sanitizeString(token.value);
          }).join("");
        }
      } else {
        try {
          if (textField) {
            textField.innerHTML = (_a2 = sanitizeString(message === null || message === void 0 ? void 0 : message.message)) !== null && _a2 !== void 0 ? _a2 : "";
          }
        } catch (_d2) {
        }
        setMentionedUserIds([]);
      }
      setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_b2 = textField === null || textField === void 0 ? void 0 : textField.textContent) === null || _b2 === void 0 ? void 0 : _b2.trim().length) > 0 : false);
      setHeight();
    }
  }, [isEdit, message]);
  var useMentionedLabelDetection = (0, import_react11.useCallback)(function() {
    var _a2;
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    if (isMentionEnabled && textField) {
      var newMentionedUserIds = Array.from(textField.getElementsByClassName("sendbird-mention-user-label")).map(
        // @ts-ignore
        function(node) {
          var _a3;
          return (_a3 = node === null || node === void 0 ? void 0 : node.dataset) === null || _a3 === void 0 ? void 0 : _a3.userid;
        }
      );
      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {
        onMentionedUserIdsUpdated(newMentionedUserIds);
        setMentionedUserIds(newMentionedUserIds);
      }
    }
    setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_a2 = textField.textContent) === null || _a2 === void 0 ? void 0 : _a2.trim().length) > 0 : false);
  }, [targetStringInfo, isMentionEnabled]);
  (0, import_react11.useEffect)(function() {
    var _a2, _b2, _c2, _d2;
    if (isMentionEnabled && mentionSelectedUser) {
      var targetString = targetStringInfo.targetString, startNodeIndex = targetStringInfo.startNodeIndex, startOffsetIndex = targetStringInfo.startOffsetIndex, endNodeIndex = targetStringInfo.endNodeIndex, endOffsetIndex = targetStringInfo.endOffsetIndex;
      var textField_1 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
      if (targetString && startNodeIndex !== null && startOffsetIndex !== null && endOffsetIndex !== null && endNodeIndex !== null && textField_1) {
        var childNodes = nodeListToArray(textField_1 === null || textField_1 === void 0 ? void 0 : textField_1.childNodes);
        var startNodeTextContent = (_b2 = (_a2 = childNodes[startNodeIndex]) === null || _a2 === void 0 ? void 0 : _a2.textContent) !== null && _b2 !== void 0 ? _b2 : "";
        var frontTextNode = document.createTextNode(startNodeTextContent.slice(0, startOffsetIndex));
        var endNodeTextContent = (_d2 = (_c2 = childNodes[endNodeIndex]) === null || _c2 === void 0 ? void 0 : _c2.textContent) !== null && _d2 !== void 0 ? _d2 : "";
        var backTextNode = endOffsetIndex && document.createTextNode(" ".concat(endNodeTextContent.slice(endOffsetIndex)));
        var mentionLabel = renderToString({
          userId: mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.userId,
          nickname: "".concat(USER_MENTION_TEMP_CHAR).concat((mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.nickname) || stringSet.MENTION_NAME__NO_NAME)
        });
        var div = document.createElement("div");
        div.innerHTML = mentionLabel;
        var newNodes = __spreadArray(__spreadArray(__spreadArray([], childNodes.slice(0, startNodeIndex), true), [
          frontTextNode,
          div.childNodes[0],
          backTextNode
        ], false), childNodes.slice(endNodeIndex + 1), true);
        if (textField_1) {
          textField_1.innerHTML = "";
          newNodes.forEach(function(newNode) {
            if (newNode) {
              textField_1.appendChild(newNode);
            }
          });
        }
        onUserMentioned(mentionSelectedUser);
        if (window.getSelection || document.getSelection) {
          var selection = window.getSelection() || document.getSelection();
          selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
          var range = new Range();
          range.selectNodeContents(textField_1);
          range.setStart(textField_1.childNodes[startNodeIndex + 2], 1);
          range.setEnd(textField_1.childNodes[startNodeIndex + 2], 1);
          range.collapse(false);
          selection === null || selection === void 0 ? void 0 : selection.addRange(range);
          textField_1.focus();
        }
        setTargetStringInfo(__assign({}, initialTargetStringInfo));
        setHeight();
        useMentionedLabelDetection();
      }
    }
  }, [mentionSelectedUser, isMentionEnabled]);
  var useMentionInputDetection = (0, import_react11.useCallback)(function() {
    var _a2, _b2;
    var selection = ((_a2 = window === null || window === void 0 ? void 0 : window.getSelection) === null || _a2 === void 0 ? void 0 : _a2.call(window)) || ((_b2 = document === null || document === void 0 ? void 0 : document.getSelection) === null || _b2 === void 0 ? void 0 : _b2.call(document));
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    if ((selection === null || selection === void 0 ? void 0 : selection.anchorNode) === textField) {
      onMentionStringChange("");
    }
    if (isMentionEnabled && textField && selection && selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset) {
      var textStack = "";
      var startNodeIndex = null;
      var startOffsetIndex = null;
      var _loop_1 = function(index2) {
        var currentNode = textField.childNodes[index2];
        if (currentNode.nodeType === NodeTypes.TextNode) {
          var textContent = function() {
            var _a3;
            if (currentNode === selection.anchorNode) {
              return (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) ? currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent.slice(0, selection.anchorOffset) : "";
            }
            return (_a3 = currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) !== null && _a3 !== void 0 ? _a3 : "";
          }();
          if (textStack.length > 0) {
            textStack += textContent;
          } else {
            var charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);
            for (var i = charLastIndex - 1; i > -1; i -= 1) {
              if (textContent[i] === USER_MENTION_TEMP_CHAR) {
                charLastIndex = i;
              } else {
                break;
              }
            }
            if (charLastIndex > -1) {
              textStack = textContent;
              startNodeIndex = index2;
              startOffsetIndex = charLastIndex;
            }
          }
        } else {
          textStack = "";
          startNodeIndex = null;
          startOffsetIndex = null;
        }
        if (currentNode === selection.anchorNode) {
          var targetString = textStack && startOffsetIndex !== null ? textStack.slice(startOffsetIndex) : "";
          setTargetStringInfo({
            targetString,
            startNodeIndex,
            startOffsetIndex,
            endNodeIndex: index2,
            endOffsetIndex: selection.anchorOffset
          });
          onMentionStringChange(targetString);
          return { value: void 0 };
        }
      };
      for (var index = 0; index < textField.childNodes.length; index += 1) {
        var state_1 = _loop_1(index);
        if (typeof state_1 === "object")
          return state_1.value;
      }
    }
  }, [isMentionEnabled]);
  var sendMessage = function() {
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    if (!isEdit && (textField === null || textField === void 0 ? void 0 : textField.textContent)) {
      var _a2 = extractTextAndMentions(textField.childNodes), messageText = _a2.messageText, mentionTemplate = _a2.mentionTemplate;
      var params = { message: messageText, mentionTemplate };
      onSendMessage(params);
      resetInput(internalRef);
      if (isMobileIOS(navigator.userAgent)) {
        if (ghostInputRef.current)
          ghostInputRef.current.focus();
        requestAnimationFrame(function() {
          return textField.focus();
        });
      } else {
        textField.focus();
      }
      setIsInput(false);
      setHeight();
    }
  };
  var isEditDisabled = !((_b = (_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim());
  var editMessage = function() {
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    var messageId = message === null || message === void 0 ? void 0 : message.messageId;
    if (isEdit && messageId && textField) {
      var _a2 = extractTextAndMentions(textField.childNodes), messageText = _a2.messageText, mentionTemplate = _a2.mentionTemplate;
      var params = { messageId, message: messageText, mentionTemplate };
      onUpdateMessage(params);
      resetInput(internalRef);
    }
  };
  var onPaste = usePaste({
    ref: internalRef,
    setMentionedUsers,
    channel,
    setIsInput,
    setHeight
  });
  return import_react11.default.createElement(
    "form",
    { className: classnames.apply(void 0, __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], false), [
      isEdit && "sendbird-message-input__edit",
      disabled && "sendbird-message-input-form__disabled"
    ], false)) },
    import_react11.default.createElement(
      "div",
      { className: classnames("sendbird-message-input", disabled && "sendbird-message-input__disabled"), "data-testid": "sendbird-message-input" },
      isMobileIOS(navigator.userAgent) && import_react11.default.createElement("input", { id: "ghost-input-reset-ime-cjk", ref: ghostInputRef, style: { opacity: 0, padding: 0, margin: 0, height: 0, border: "none", position: "absolute", top: -9999 }, defaultValue: "_" }),
      import_react11.default.createElement("div", {
        id: "".concat(textFieldId).concat(isEdit ? message === null || message === void 0 ? void 0 : message.messageId : ""),
        className: "sendbird-message-input--textarea ".concat(textFieldId),
        contentEditable: !disabled,
        role: "textbox",
        "aria-label": "Text Input",
        ref: externalRef,
        // @ts-ignore
        disabled,
        maxLength,
        onKeyDown: function(e) {
          var _a2, _b2, _c2, _d2;
          var preventEvent = onKeyDown(e);
          if (preventEvent) {
            e.preventDefault();
          } else {
            if (!e.shiftKey && e.key === MessageInputKeys.Enter && !isMobile && ((_a2 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a2 === void 0 ? void 0 : _a2.textContent) && internalRef.current.textContent.trim().length > 0 && ((_b2 = e === null || e === void 0 ? void 0 : e.nativeEvent) === null || _b2 === void 0 ? void 0 : _b2.isComposing) !== true) {
              e.preventDefault();
              sendMessage();
            }
            if (e.key === MessageInputKeys.Backspace && ((_d2 = (_c2 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c2 === void 0 ? void 0 : _c2.childNodes) === null || _d2 === void 0 ? void 0 : _d2.length) === 2 && !internalRef.current.childNodes[0].textContent && internalRef.current.childNodes[1].nodeType === NodeTypes.ElementNode) {
              internalRef.current.removeChild(internalRef.current.childNodes[1]);
            }
          }
        },
        onKeyUp: function(e) {
          var preventEvent = onKeyUp(e);
          if (preventEvent) {
            e.preventDefault();
          } else {
            useMentionInputDetection();
          }
        },
        onClick: function() {
          useMentionInputDetection();
        },
        onInput: function() {
          var _a2;
          setHeight();
          onStartTyping();
          setIsInput(((_a2 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a2 === void 0 ? void 0 : _a2.textContent) ? internalRef.current.textContent.trim().length > 0 : false);
          useMentionedLabelDetection();
        },
        onPaste
      }),
      ((_e = (_d = (_c = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) === 0 && import_react11.default.createElement(Label, { className: "sendbird-message-input--placeholder", type: LabelTypography.BODY_1, color: disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3 }, placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER),
      !isEdit && isInput && import_react11.default.createElement(IconButton, { className: "sendbird-message-input--send", height: "32px", width: "32px", onClick: function() {
        return sendMessage();
      }, testID: "sendbird-message-input-send-button" }, (renderSendMessageIcon === null || renderSendMessageIcon === void 0 ? void 0 : renderSendMessageIcon()) || import_react11.default.createElement(Icon, { type: IconTypes.SEND, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY, width: "20px", height: "20px" })),
      !isEdit && !isInput && ((renderFileUploadIcon === null || renderFileUploadIcon === void 0 ? void 0 : renderFileUploadIcon()) || isFileUploadEnabled && import_react11.default.createElement(
        IconButton,
        { className: classnames("sendbird-message-input--attach", isVoiceMessageEnabled && "is-voice-message-enabled"), height: "32px", width: "32px", onClick: function() {
          var _a2, _b2;
          (_b2 = (_a2 = fileInputRef === null || fileInputRef === void 0 ? void 0 : fileInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
        } },
        import_react11.default.createElement(Icon, { type: IconTypes.ATTACH, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE, width: "20px", height: "20px" }),
        import_react11.default.createElement("input", {
          className: "sendbird-message-input--attach-input",
          type: "file",
          ref: fileInputRef,
          // It will affect to <Channel /> and <Thread />
          onChange: function(event) {
            var files = event.currentTarget.files;
            if (files) {
              onFileUpload(files && files.length === 1 ? [files[0]] : Array.from(files));
            }
            event.target.value = "";
          },
          accept: getMimeTypesUIKitAccepts(acceptableMimeTypes),
          multiple: isSelectingMultipleFilesEnabled && isChannelTypeSupportsMultipleFilesMessage(channel)
        })
      )),
      isVoiceMessageEnabled && !isEdit && !isInput && import_react11.default.createElement(IconButton, { className: "sendbird-message-input--voice-message", width: "32px", height: "32px", onClick: onVoiceMessageIconClick }, (renderVoiceMessageIcon === null || renderVoiceMessageIcon === void 0 ? void 0 : renderVoiceMessageIcon()) || import_react11.default.createElement(Icon, { type: IconTypes.AUDIO_ON_LINED, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE, width: "20px", height: "20px" }))
    ),
    isEdit && import_react11.default.createElement(
      "div",
      { className: "sendbird-message-input--edit-action", "data-testid": "sendbird-message-input--edit-action" },
      import_react11.default.createElement(Button, { className: "sendbird-message-input--edit-action__cancel", type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: onCancelEdit }, stringSet.BUTTON__CANCEL),
      import_react11.default.createElement(Button, { className: "sendbird-message-input--edit-action__save", type: ButtonTypes.PRIMARY, size: ButtonSizes.SMALL, disabled: isEditDisabled, onClick: function() {
        return editMessage();
      } }, stringSet.BUTTON__SAVE)
    )
  );
});

// node_modules/@sendbird/uikit-react/ui/MessageContent.js
var import_react49 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-B6Uh5m2a.js
var import_react12 = __toESM(require_react(), 1);
var TriggerIcon = function(_a) {
  var ref = _a.ref, _b = _a.onClick, onClick = _b === void 0 ? noop : _b, _c = _a.onBlur, onBlur = _c === void 0 ? noop : _c, _d = _a.renderIcon, renderIcon = _d === void 0 ? function(props) {
    return import_react12.default.createElement(Icon, __assign({}, props));
  } : _d;
  return import_react12.default.createElement(IconButton, { ref, width: "32px", height: "32px", onClick, onBlur }, renderIcon({
    type: IconTypes.MORE,
    fillColor: IconColors.CONTENT_INVERSE,
    width: "24px",
    height: "24px"
  }));
};
var CopyMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isUserMessage(message))
      copyToClipboard(message.message);
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__COPY);
};
var ReplyMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, setQuoteMessage = _b.setQuoteMessage;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function(e) {
    var _a2;
    setQuoteMessage(message);
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__REPLY);
};
var ThreadMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, onReplyInThread = _b.onReplyInThread;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    onReplyInThread({ message });
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__THREAD);
};
var OpenInChannelMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, onMoveToParentMessage = _b.onMoveToParentMessage;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    onMoveToParentMessage();
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL);
};
var EditMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, showEdit = _b.showEdit, isOnline = _b.isOnline;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isOnline) {
      showEdit(true);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__EDIT);
};
var ResendMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, resendMessage = _b.resendMessage, isOnline = _b.isOnline;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isOnline) {
      resendMessage(message);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__RESEND);
};
var DeleteMenuItem = function(props) {
  var _a, _b, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;
  return import_react12.default.createElement(MenuItem$1, __assign({}, props, { disabled: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onClick: function(e) {
    var _a2;
    if (isFailedMessage(message)) {
      deleteMessage(message);
    } else if (isOnline) {
      showRemove(true);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_c = props.children) !== null && _c !== void 0 ? _c : stringSet.MESSAGE_MENU__DELETE);
};
var isReplyTypeMessageEnabled = function(_a) {
  var _b;
  var channel = _a.channel, message = _a.message;
  if (isFailedMessage(message) || isPendingMessage(message)) {
    return false;
  }
  if (!((_b = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b === void 0 ? void 0 : _b.call(channel)) || (channel === null || channel === void 0 ? void 0 : channel.isEphemeral)) {
    return false;
  }
  var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
  var isOperator = (channel === null || channel === void 0 ? void 0 : channel.myRole) === V.OPERATOR;
  if (isBroadcast)
    return isOperator;
  return true;
};
var showMenuItemCopy = function(_a) {
  var message = _a.message;
  return isUserMessage(message);
};
var showMenuItemEdit = function(_a) {
  var message = _a.message, channel = _a.channel, isByMe = _a.isByMe;
  return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isUserMessage(message) && isSentMessage(message) && isByMe;
};
var showMenuItemResend = function(_a) {
  var message = _a.message, isByMe = _a.isByMe;
  return isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
};
var showMenuItemDelete = function(_a) {
  var message = _a.message, channel = _a.channel, isByMe = _a.isByMe;
  return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isPendingMessage(message) && isByMe;
};
var showMenuItemOpenInChannel = function(_a) {
  var _b = _a.onMoveToParentMessage, onMoveToParentMessage = _b === void 0 ? void 0 : _b;
  return !!onMoveToParentMessage;
};
var showMenuItemReply = function(_a) {
  var channel = _a.channel, message = _a.message, replyType = _a.replyType;
  return isReplyTypeMessageEnabled({ channel, message }) && replyType === "QUOTE_REPLY";
};
var showMenuItemThread = function(_a) {
  var channel = _a.channel, message = _a.message, replyType = _a.replyType, onReplyInThread = _a.onReplyInThread;
  return isReplyTypeMessageEnabled({ channel, message }) && replyType === "THREAD" && !(message === null || message === void 0 ? void 0 : message.parentMessageId) && typeof onReplyInThread === "function";
};
var MessageMenu = function(_a) {
  var _b;
  var className = _a.className, message = _a.message, channel = _a.channel, isByMe = _a.isByMe, replyType = _a.replyType, _c = _a.renderTrigger, renderTrigger = _c === void 0 ? TriggerIcon : _c, renderMenuItems = _a.renderMenuItems, _d = _a.disableDeleteMessage, disableDeleteMessage = _d === void 0 ? null : _d, _e = _a.showEdit, showEdit = _e === void 0 ? noop : _e, _f = _a.showRemove, showRemove = _f === void 0 ? noop : _f, deleteMessage = _a.deleteMessage, resendMessage = _a.resendMessage, setQuoteMessage = _a.setQuoteMessage, onReplyInThread = _a.onReplyInThread, onMoveToParentMessage = _a.onMoveToParentMessage;
  var config = useSendbirdStateContext().config;
  var isOnline = config.isOnline;
  var triggerRef = (0, import_react12.useRef)(null);
  var containerRef = (0, import_react12.useRef)(null);
  var _g = (0, import_react12.useState)(false), isMenuVisible = _g[0], setMenuVisibility = _g[1];
  var hideMenu = function() {
    return setMenuVisibility(false);
  };
  var showMenu = function() {
    return setMenuVisibility(true);
  };
  var toggleMenu = function() {
    return setMenuVisibility(function(visible) {
      return !visible;
    });
  };
  var params = {
    message,
    channel,
    isByMe,
    replyType,
    onReplyInThread,
    onMoveToParentMessage
  };
  return import_react12.default.createElement(
    "div",
    { className: classnames("sendbird-message-menu", className), ref: containerRef },
    import_react12.default.createElement(
      MessageMenuProvider,
      { value: {
        message,
        hideMenu,
        showMenu,
        toggleMenu,
        setQuoteMessage,
        onReplyInThread,
        onMoveToParentMessage,
        showEdit,
        showRemove,
        deleteMessage,
        resendMessage,
        isOnline,
        disableDeleteMessage,
        triggerRef,
        containerRef
      } },
      renderTrigger({ ref: triggerRef, onClick: toggleMenu }),
      isMenuVisible && import_react12.default.createElement(MenuItems, { id: getObservingId(message.messageId), parentRef: triggerRef, parentContainRef: containerRef, closeDropdown: hideMenu, openLeft: isByMe }, (_b = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({
        items: {
          CopyMenuItem,
          ReplyMenuItem,
          ThreadMenuItem,
          OpenInChannelMenuItem,
          EditMenuItem,
          ResendMenuItem,
          DeleteMenuItem
        }
      })) !== null && _b !== void 0 ? _b : import_react12.default.createElement(
        import_react12.default.Fragment,
        null,
        showMenuItemCopy(params) && import_react12.default.createElement(CopyMenuItem, null),
        showMenuItemReply(params) && import_react12.default.createElement(ReplyMenuItem, null),
        showMenuItemThread(params) && import_react12.default.createElement(ThreadMenuItem, null),
        showMenuItemOpenInChannel(params) && import_react12.default.createElement(OpenInChannelMenuItem, null),
        showMenuItemEdit(params) && import_react12.default.createElement(EditMenuItem, null),
        showMenuItemResend(params) && import_react12.default.createElement(ResendMenuItem, null),
        showMenuItemDelete(params) && import_react12.default.createElement(DeleteMenuItem, null)
      ))
    )
  );
};

// node_modules/@sendbird/uikit-react/ui/MessageItemReactionMenu.js
var import_react14 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ReactionButton.js
var import_react13 = __toESM(require_react(), 1);
var ReactionButton = import_react13.default.forwardRef(function(props, ref) {
  var className = props.className, width = props.width, height = props.height, selected = props.selected, _a = props.dataSbId, dataSbId = _a === void 0 ? "" : _a, testID = props.testID, onClick = props.onClick, children = props.children;
  var onClickHandler = useLongPress({
    onLongPress: noop,
    onClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react13.default.createElement(
    "div",
    __assign({ className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-reaction-button".concat(selected ? "--selected" : "")
    ], false).join(" "), ref, role: "button", style: { width, height } }, onClickHandler, { tabIndex: 0, "data-sb-id": testID !== null && testID !== void 0 ? testID : dataSbId, "data-testid": testID !== null && testID !== void 0 ? testID : dataSbId }),
    import_react13.default.createElement("div", { className: "sendbird-reaction-button__inner" }, children)
  );
});

// node_modules/@sendbird/uikit-react/ui/MessageItemReactionMenu.js
var import_react_dom = __toESM(require_react_dom(), 1);
function MessageEmojiMenu(_a) {
  var className = _a.className, message = _a.message, userId = _a.userId, _b = _a.spaceFromTrigger, spaceFromTrigger = _b === void 0 ? { x: 0, y: 0 } : _b, emojiContainer = _a.emojiContainer, toggleReaction = _a.toggleReaction;
  var triggerRef = (0, import_react14.useRef)(null);
  var containerRef = (0, import_react14.useRef)(null);
  if (isPendingMessage(message) || isFailedMessage(message)) {
    return null;
  }
  return import_react14.default.createElement(
    "div",
    { className: getClassName([className !== null && className !== void 0 ? className : "", "sendbird-message-item-reaction-menu"]), ref: containerRef },
    import_react14.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
      return import_react14.default.createElement(
        IconButton,
        { className: "sendbird-message-item-reaction-menu__trigger", ref: triggerRef, width: "32px", height: "32px", onClick: function() {
          toggleDropdown();
        } },
        import_react14.default.createElement(Icon, { className: "sendbird-message-item-reaction-menu__trigger__icon", testID: "sendbird-message-item-reaction-menu__trigger__icon", type: IconTypes.EMOJI_MORE, fillColor: IconColors.CONTENT_INVERSE, width: "24px", height: "24px" })
      );
    }, menuItems: function(closeDropdown) {
      return import_react14.default.createElement(EmojiListItems, { id: getObservingId(message.messageId), parentRef: triggerRef, parentContainRef: containerRef, closeDropdown, spaceFromTrigger }, emojiContainer && getEmojiListAll(emojiContainer).map(function(emoji) {
        var _a2, _b2, _c;
        var isReacted = ((_c = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.find(function(reaction) {
          return reaction.key === emoji.key;
        })) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c === void 0 ? void 0 : _c.some(function(reactorId) {
          return reactorId === userId;
        })) || false;
        return import_react14.default.createElement(
          ReactionButton,
          { key: emoji.key, width: "36px", height: "36px", selected: isReacted, onClick: function() {
            closeDropdown();
            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
          }, testID: "ui_emoji_reactions_menu_".concat(emoji.key) },
          import_react14.default.createElement(ImageRenderer, { url: emoji.url, width: "28px", height: "28px", placeHolder: function(_a3) {
            var style = _a3.style;
            return import_react14.default.createElement(
              "div",
              { style },
              import_react14.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
            );
          } })
        );
      }));
    } })
  );
}

// node_modules/@sendbird/uikit-react/ui/EmojiReactions.js
var import_react20 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ReactionBadge.js
var import_react15 = __toESM(require_react(), 1);
var ReactionBadge = import_react15.default.forwardRef(function(props, ref) {
  var _a = props.className, className = _a === void 0 ? "" : _a, testID = props.testID, children = props.children, _b = props.count, count = _b === void 0 ? "" : _b, _c = props.isAdd, isAdd = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, _e = props.onClick, onClick = _e === void 0 ? function() {
  } : _e;
  var getClassNameTail = function() {
    if (selected && !isAdd) {
      return "--selected";
    }
    if (isAdd) {
      return "--is-add";
    }
    return "";
  };
  return import_react15.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-reaction-badge".concat(getClassNameTail())
    ], false).join(" "), "data-testid": testID, role: "button", ref, onClick, onKeyDown: onClick, onTouchEnd: onClick, tabIndex: 0 },
    import_react15.default.createElement(
      "div",
      { className: "sendbird-reaction-badge__inner" },
      import_react15.default.createElement("div", { className: "sendbird-reaction-badge__inner__icon" }, children),
      import_react15.default.createElement(Label, { className: children && count ? "sendbird-reaction-badge__inner__count" : "", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_1 }, count)
    )
  );
});

// node_modules/@sendbird/uikit-react/ui/BottomSheet.js
var import_react16 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var BottomSheet = function(props) {
  var _a, _b, _c;
  var _d = props.className, className = _d === void 0 ? "" : _d, children = props.children, onBackdropClick = props.onBackdropClick;
  var logger = (_b = (_a = useSendbirdStateContext()) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.logger;
  var portalRoot = (0, import_react16.useRef)();
  portalRoot.current = document.getElementById(MODAL_ROOT);
  if (!portalRoot.current) {
    portalRoot.current = document.createElement("div");
    portalRoot.current.setAttribute("id", MODAL_ROOT);
    document.body.appendChild(portalRoot.current);
    (_c = logger === null || logger === void 0 ? void 0 : logger.warning) === null || _c === void 0 ? void 0 : _c.call(logger, "@sendbird/uikit-react/ui/BottomSheet | Should put a ModalRoot to use the BottomSheet.");
  }
  return (0, import_react_dom2.createPortal)(import_react16.default.createElement(
    "div",
    { className: "".concat(className, " sendbird-bottomsheet") },
    import_react16.default.createElement("div", { className: "sendbird-bottomsheet__content", role: "dialog", "aria-modal": "true", "aria-expanded": "true" }, children),
    import_react16.default.createElement("div", { className: "sendbird-bottomsheet__backdrop", onClick: function(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      onBackdropClick === null || onBackdropClick === void 0 ? void 0 : onBackdropClick();
    } })
  ), portalRoot.current);
};

// node_modules/@sendbird/uikit-react/ui/Tooltip.js
var import_react17 = __toESM(require_react(), 1);
function Tooltip(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.children, children = _c === void 0 ? "" : _c;
  return import_react17.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-tooltip"
    ], false).join(" ") },
    import_react17.default.createElement(Label, { className: "sendbird-tooltip__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONCONTENT_1 }, children)
  );
}

// node_modules/@sendbird/uikit-react/ui/TooltipWrapper.js
var import_react18 = __toESM(require_react(), 1);
var SPACE_FROM_TRIGGER = 8;
function TooltipWrapper(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, children = _a.children, hoverTooltip = _a.hoverTooltip;
  var _c = (0, import_react18.useState)(false), showHoverTooltip = _c[0], setShowHoverTooltip = _c[1];
  var childrenRef = (0, import_react18.useRef)();
  return import_react18.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-tooltip-wrapper"
    ], false).join(" "), onMouseOver: function() {
      setShowHoverTooltip(true);
    }, onFocus: function() {
      setShowHoverTooltip(true);
    }, onMouseOut: function() {
      setShowHoverTooltip(false);
    }, onBlur: function() {
      setShowHoverTooltip(false);
    } },
    import_react18.default.createElement("div", { className: "sendbird-tooltip-wrapper__children", ref: childrenRef }, children),
    showHoverTooltip && import_react18.default.createElement(
      "div",
      { className: "sendbird-tooltip-wrapper__hover-tooltip", style: { bottom: "calc(100% + ".concat(SPACE_FROM_TRIGGER, "px)") } },
      import_react18.default.createElement(
        "div",
        { className: "sendbird-tooltip-wrapper__hover-tooltip__inner" },
        import_react18.default.createElement("div", { className: "sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container", style: { left: childrenRef.current ? "calc(".concat(childrenRef.current.offsetWidth / 2, "px - 50%)") : void 0 } }, hoverTooltip)
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/Message/context.js
var import_react19 = __toESM(require_react(), 1);
var defaultValue = {
  message: {},
  isByMe: false
};
var MessageContext = import_react19.default.createContext(defaultValue);
var MessageProvider = function(props) {
  var children = props.children, message = props.message, _a = props.isByMe, isByMe = _a === void 0 ? false : _a;
  return import_react19.default.createElement(MessageContext.Provider, { value: {
    message,
    isByMe
  } }, children);
};
var useMessageContext = function() {
  var value = import_react19.default.useContext(MessageContext);
  if (value === void 0) {
    throw new Error("useMessageContext must be used within a MessageProvider");
  }
  return value;
};

// node_modules/@sendbird/uikit-react/ui/EmojiReactions.js
var import_react_dom3 = __toESM(require_react_dom(), 1);
var ReactedMembersBottomSheet = function(_a) {
  var _b, _c, _d;
  var message = _a.message, channel = _a.channel, _e = _a.emojiKey, emojiKey = _e === void 0 ? "" : _e, hideMenu = _a.hideMenu, emojiContainer = _a.emojiContainer, onPressUserProfileHandler = _a.onPressUserProfileHandler;
  var _f = channel.members, members = _f === void 0 ? [] : _f;
  var _g = (0, import_react20.useState)(emojiKey), selectedEmoji = _g[0], setSelectedEmoji = _g[1];
  function onPressUserProfileCallBack() {
    if (onPressUserProfileHandler && message) {
      var sender = message === null || message === void 0 ? void 0 : message.sender;
      onPressUserProfileHandler(sender);
    }
  }
  return import_react20.default.createElement(
    BottomSheet,
    { onBackdropClick: hideMenu },
    import_react20.default.createElement(
      "div",
      { className: "sendbird-message__bottomsheet" },
      import_react20.default.createElement("div", { className: "sendbird-message__bottomsheet__reacted-members" }, (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.map(function(reaction) {
        var emojiUrl = getEmojiUrl(emojiContainer, reaction.key);
        return import_react20.default.createElement(
          "div",
          { key: reaction.key, className: classnames("sendbird-message__bottomsheet__reacted-members__item", selectedEmoji === reaction.key && "sendbird-message__bottomsheet__reacted-members__item__selected"), onClick: function() {
            setSelectedEmoji(reaction.key);
          } },
          import_react20.default.createElement(ImageRenderer, { url: emojiUrl, width: "28px", height: "28px", placeHolder: function(_a2) {
            var style = _a2.style;
            return import_react20.default.createElement(
              "div",
              { style },
              import_react20.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
            );
          } }),
          import_react20.default.createElement(Label, { type: LabelTypography.BUTTON_2, color: selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3 }, reaction.userIds.length)
        );
      })),
      import_react20.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet__reactor-list" },
        // making a member list who reacted to the message with the `selectedEmoji`
        ((_d = (_c = message.reactions) === null || _c === void 0 ? void 0 : _c.find(function(reaction) {
          return reaction.key === selectedEmoji;
        })) === null || _d === void 0 ? void 0 : _d.userIds.map(function(userId) {
          return members.find(function(member) {
            return member.userId === userId;
          });
        }).filter(function(member) {
          return member !== void 0;
        })).map(function(member) {
          return import_react20.default.createElement(UserListItem, { key: member.userId, className: "sendbird-message__bottomsheet__reactor-list__item", user: member, avatarSize: "36px", onUserAvatarClick: onPressUserProfileCallBack });
        })
      )
    )
  );
};
function ReactionItem(_a) {
  var _b;
  var reaction = _a.reaction, memberNicknamesMap = _a.memberNicknamesMap, setEmojiKey = _a.setEmojiKey, toggleReaction = _a.toggleReaction, emojisMap = _a.emojisMap, channel = _a.channel, message = _a.message;
  var store = useSendbirdStateContext();
  var isMobile = useMediaQueryContext().isMobile;
  var messageStore = useMessageContext();
  var stringSet = (0, import_react20.useContext)(LocalizationContext).stringSet;
  var userId = store.config.userId;
  var reactedByMe = isReactedBy(userId, reaction);
  var showHoverTooltip = reaction.userIds.length > 0 && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !channel.isSuper);
  var handleOnClick = function() {
    setEmojiKey("");
    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message !== null && message !== void 0 ? message : messageStore === null || messageStore === void 0 ? void 0 : messageStore.message, reaction.key, reactedByMe);
  };
  var longPress = useLongPress({
    onLongPress: function() {
      setEmojiKey(reaction.key);
    },
    onClick: handleOnClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react20.default.createElement(
    TooltipWrapper,
    { className: "sendbird-emoji-reactions__reaction-badge", hoverTooltip: showHoverTooltip ? import_react20.default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)) : import_react20.default.createElement(import_react20.default.Fragment, null) },
    import_react20.default.createElement(
      "div",
      __assign({}, isMobile ? longPress : { onClick: handleOnClick }),
      import_react20.default.createElement(
        ReactionBadge,
        { count: reaction.userIds.length, selected: reactedByMe },
        import_react20.default.createElement(ImageRenderer, { circle: true, url: ((_b = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b === void 0 ? void 0 : _b.url) || "", width: "20px", height: "20px", defaultComponent: import_react20.default.createElement(Icon, { width: "20px", height: "20px", type: IconTypes.QUESTION }) })
      )
    )
  );
}
var AddReactionBadgeItem = function(_a) {
  var onClick = _a.onClick;
  var onlyClick = useLongPress({
    onLongPress: function() {
    },
    onClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react20.default.createElement(
    "div",
    __assign({ className: "sendbird-emoji-reactions__add-reaction-badge", "data-testid": "sendbird-emoji-reactions__add-reaction-badge" }, onlyClick),
    import_react20.default.createElement(
      ReactionBadge,
      { isAdd: true },
      import_react20.default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: "20px", height: "20px" })
    )
  );
};
var MobileEmojisBottomSheet = function(_a) {
  var userId = _a.userId, message = _a.message, emojiContainer = _a.emojiContainer, hideMenu = _a.hideMenu, toggleReaction = _a.toggleReaction;
  var emojiAllList = (0, import_react20.useMemo)(function() {
    return getEmojiListAll(emojiContainer);
  }, [emojiContainer]);
  return import_react20.default.createElement(
    BottomSheet,
    { onBackdropClick: hideMenu },
    import_react20.default.createElement("div", { className: "sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet" }, emojiAllList.map(function(emoji) {
      var _a2, _b, _c, _d;
      var isReacted = (_d = (_c = (_b = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.find(function(reaction) {
        return reaction.key === emoji.key;
      })) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function(reactorId) {
        return reactorId === userId;
      })) !== null && _d !== void 0 ? _d : false;
      return import_react20.default.createElement(
        ReactionButton,
        { key: emoji.key, width: "44px", height: "44px", selected: isReacted, onClick: function(e) {
          e === null || e === void 0 ? void 0 : e.stopPropagation();
          toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
          hideMenu();
        }, testID: "ui_mobile_emoji_reactions_menu_".concat(emoji.key) },
        import_react20.default.createElement(ImageRenderer, { url: emoji.url, width: "38px", height: "38px", placeHolder: function(_a3) {
          var style = _a3.style;
          return import_react20.default.createElement(
            "div",
            { style },
            import_react20.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
          );
        } })
      );
    }))
  );
};
var EmojiReactions = function(_a) {
  var _b, _c, _d, _e, _f;
  var _g = _a.className, className = _g === void 0 ? "" : _g, userId = _a.userId, message = _a.message, channel = _a.channel, emojiContainer = _a.emojiContainer, memberNicknamesMap = _a.memberNicknamesMap, _h = _a.spaceFromTrigger, spaceFromTrigger = _h === void 0 ? { x: 0, y: 0 } : _h, _j = _a.isByMe, isByMe = _j === void 0 ? false : _j, toggleReaction = _a.toggleReaction, onPressUserProfile = _a.onPressUserProfile;
  var showTheReactedMembers = false;
  try {
    var config = useSendbirdStateContext().config;
    showTheReactedMembers = channel ? getIsReactionEnabled({
      channel,
      config
    }) : false;
  } catch (err) {
  }
  var isMobile = useMediaQueryContext().isMobile;
  var addReactionRef = (0, import_react20.useRef)(null);
  var _k = (0, import_react20.useState)(false), showEmojiList = _k[0], setShowEmojiList = _k[1];
  var _l = (0, import_react20.useState)(""), selectedEmojiKey = _l[0], setSelectedEmojiKey = _l[1];
  var emojisMap = getEmojiMapAll(emojiContainer);
  var showAddReactionBadge = ((_c = (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) < emojisMap.size;
  return import_react20.default.createElement(
    "div",
    { className: getClassName([
      className,
      "sendbird-emoji-reactions",
      isByMe ? "outgoing" : "incoming"
    ]) },
    ((_e = (_d = message.reactions) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) > 0 && ((_f = message.reactions) === null || _f === void 0 ? void 0 : _f.map(function(reaction) {
      return import_react20.default.createElement(ReactionItem, { key: reaction === null || reaction === void 0 ? void 0 : reaction.key, reaction, memberNicknamesMap, setEmojiKey: setSelectedEmojiKey, toggleReaction, emojisMap, channel, message });
    })),
    !isMobile && showAddReactionBadge && import_react20.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
      return import_react20.default.createElement(
        ReactionBadge,
        { className: "sendbird-emoji-reactions__add-reaction-badge", testID: "sendbird-emoji-reactions__add-reaction-badge", ref: addReactionRef, isAdd: true, onClick: function(e) {
          var _a2;
          toggleDropdown();
          (_a2 = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _a2 === void 0 ? void 0 : _a2.call(e);
        } },
        import_react20.default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: "20px", height: "20px" })
      );
    }, menuItems: function(closeDropdown) {
      return import_react20.default.createElement(EmojiListItems, { parentRef: addReactionRef, parentContainRef: addReactionRef, closeDropdown, spaceFromTrigger }, getEmojiListAll(emojiContainer).map(function(emoji) {
        var _a2, _b2, _c2;
        var isReacted = ((_c2 = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.find(function(reaction) {
          return reaction.key === emoji.key;
        })) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c2 === void 0 ? void 0 : _c2.some(function(reactorId) {
          return reactorId === userId;
        })) || false;
        return import_react20.default.createElement(
          ReactionButton,
          { key: emoji.key, width: "36px", height: "36px", selected: isReacted, onClick: function(e) {
            closeDropdown();
            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
            e === null || e === void 0 ? void 0 : e.stopPropagation();
          }, testID: "ui_emoji_reactions_menu_".concat(emoji.key) },
          import_react20.default.createElement(ImageRenderer, { url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || "", width: "28px", height: "28px", placeHolder: function(_a3) {
            var style = _a3.style;
            return import_react20.default.createElement(
              "div",
              { style },
              import_react20.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
            );
          } })
        );
      }));
    } }),
    isMobile && showAddReactionBadge && import_react20.default.createElement(AddReactionBadgeItem, { onClick: function() {
      setShowEmojiList(true);
    } }),
    isMobile && showEmojiList && import_react20.default.createElement(MobileEmojisBottomSheet, { userId, message, emojiContainer, hideMenu: function() {
      setShowEmojiList(false);
    }, toggleReaction }),
    isMobile && selectedEmojiKey && channel !== null && showTheReactedMembers && import_react20.default.createElement(ReactedMembersBottomSheet, { message, channel, emojiKey: selectedEmojiKey, hideMenu: function() {
      setSelectedEmojiKey("");
    }, emojiContainer, onPressUserProfileHandler: onPressUserProfile })
  );
};

// node_modules/@sendbird/uikit-react/ui/AdminMessage.js
var import_react21 = __toESM(require_react(), 1);
function AdminMessage(_a) {
  var _b;
  var _c = _a.className, className = _c === void 0 ? "" : _c, message = _a.message;
  if (!((message === null || message === void 0 ? void 0 : message.isAdminMessage) || (message === null || message === void 0 ? void 0 : message.messageType)) || !((_b = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _b === void 0 ? void 0 : _b.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) !== "admin") {
    return null;
  }
  return import_react21.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-admin-message"
    ], false).join(" ") },
    import_react21.default.createElement(Label, { className: "sendbird-admin-message__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, message === null || message === void 0 ? void 0 : message.message)
  );
}

// node_modules/@sendbird/uikit-react/ui/QuoteMessage.js
var import_react22 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CfsHVenu.js
function getMessageFirstFileType(message) {
  return K(message).when(isFileMessage, function() {
    var _a;
    return (_a = message === null || message === void 0 ? void 0 : message.type) !== null && _a !== void 0 ? _a : "";
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.mimeType) !== null && _b !== void 0 ? _b : "";
  }).otherwise(function() {
    return "";
  });
}
function getFirstFileInfo(message) {
  var fileInfoList = message.fileInfoList;
  return fileInfoList.length > 0 ? fileInfoList[0] : null;
}
function getMessageFirstFileName(message) {
  return K(message).when(isFileMessage, function() {
    var _a;
    return (_a = message === null || message === void 0 ? void 0 : message.name) !== null && _a !== void 0 ? _a : "";
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.fileName) !== null && _b !== void 0 ? _b : "";
  }).otherwise(function() {
    return "";
  });
}
function getMessageFirstFileUrl(message) {
  return K(message).when(isFileMessage, function() {
    var _a;
    return (_a = message === null || message === void 0 ? void 0 : message.url) !== null && _a !== void 0 ? _a : "";
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.url) !== null && _b !== void 0 ? _b : "";
  }).otherwise(function() {
    return "";
  });
}
function getMessageFirstFileThumbnails(message) {
  return K(message).when(isFileMessage, function() {
    return message.thumbnails;
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.thumbnails) !== null && _b !== void 0 ? _b : [];
  }).otherwise(function() {
    return [];
  });
}
function getMessageFirstFileThumbnailUrl(message) {
  var thumbnails = getMessageFirstFileThumbnails(message);
  return thumbnails && thumbnails.length > 0 ? thumbnails[0].url : "";
}

// node_modules/@sendbird/uikit-react/ui/QuoteMessage.js
function QuoteMessage(_a) {
  var _b;
  var _c, _d, _e, _f, _g, _h;
  var message = _a.message, _j = _a.userId, userId = _j === void 0 ? "" : _j, _k = _a.isByMe, isByMe = _k === void 0 ? false : _k, _l = _a.className, className = _l === void 0 ? "" : _l, _m = _a.isUnavailable, isUnavailable = _m === void 0 ? false : _m, onClick = _a.onClick;
  var stringSet = (0, import_react22.useContext)(LocalizationContext).stringSet;
  var parentMessage = message.parentMessage;
  var parentMessageSender = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender;
  var parentMessageSenderNickname = userId === (parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.nickname;
  var parentMessageUrl = getMessageFirstFileUrl(parentMessage);
  var parentMessageType = getMessageFirstFileType(parentMessage);
  var currentMessageSenderNickname = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : (_d = message === null || message === void 0 ? void 0 : message.sender) === null || _d === void 0 ? void 0 : _d.nickname;
  var _o = (0, import_react22.useState)(false), isThumbnailLoaded = _o[0], setThumbnailLoaded = _o[1];
  var uikitFileTypes = getUIKitFileTypes();
  var splitFileName = (_f = (_e = getMessageFirstFileName(parentMessage)) === null || _e === void 0 ? void 0 : _e.split("/")) !== null && _f !== void 0 ? _f : parentMessageUrl.split("/");
  return import_react22.default.createElement(
    "div",
    { className: getClassName([className, "sendbird-quote-message", isByMe ? "outgoing" : "incoming", isUnavailable ? "unavailable" : ""]), key: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId, onClick: function() {
      if (!isUnavailable && onClick) {
        onClick();
      }
    }, onTouchEnd: function() {
      if (!isUnavailable && onClick) {
        onClick();
      }
    } },
    import_react22.default.createElement(
      "div",
      { className: "sendbird-quote-message__replied-to" },
      import_react22.default.createElement(Icon, { className: "sendbird-quote-message__replied-to__icon", type: IconTypes.REPLY, fillColor: IconColors.ON_BACKGROUND_3, width: "12px", height: "12px" }),
      import_react22.default.createElement(
        Label,
        { className: "sendbird-quote-message__replied-to__text", testID: "sendbird-quote-message__replied-to__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_3 },
        import_react22.default.createElement("span", { className: "sendbird-quote-message__replied-to__text__nickname" }, currentMessageSenderNickname),
        import_react22.default.createElement("span", { className: "sendbird-quote-message__replied-to__text__text" }, stringSet.QUOTED_MESSAGE__REPLIED_TO),
        import_react22.default.createElement("span", { className: "sendbird-quote-message__replied-to__text__nickname" }, parentMessageSenderNickname)
      )
    ),
    import_react22.default.createElement(
      "div",
      { className: "sendbird-quote-message__replied-message" },
      isUnavailable && import_react22.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__text-message" },
        import_react22.default.createElement(Label, { className: "sendbird-quote-message__replied-message__text-message__word", testID: "sendbird-quote-message__replied-message__text-message__word", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.QUOTED_MESSAGE__UNAVAILABLE)
      ),
      isUserMessage(parentMessage) && ((_g = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.message) === null || _g === void 0 ? void 0 : _g.length) > 0 && !isUnavailable && import_react22.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__text-message" },
        import_react22.default.createElement(Label, { className: "sendbird-quote-message__replied-message__text-message__word", testID: "sendbird-quote-message__replied-message__text-message__word", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.message)
      ),
      isVoiceMessage(parentMessage) && parentMessageUrl && !isUnavailable && import_react22.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__text-message" },
        import_react22.default.createElement(Label, { className: "sendbird-quote-message__replied-message__text-message__word", testID: "sendbird-quote-message__replied-message__text-message__word", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.VOICE_MESSAGE)
      ),
      (isThumbnailMessage(parentMessage) || isMultipleFilesMessage(parentMessage)) && parentMessageUrl && !isUnavailable && import_react22.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__thumbnail-message" },
        import_react22.default.createElement(ImageRenderer, { className: "sendbird-quote-message__replied-message__thumbnail-message__image", url: parentMessageUrl, alt: parentMessageType, width: "144px", height: "108px", onLoad: function() {
          return setThumbnailLoaded(true);
        }, defaultComponent: import_react22.default.createElement(
          "div",
          { className: "sendbird-quote-message__replied-message__thumbnail-message__placeholder" },
          import_react22.default.createElement(
            "div",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon" },
            import_react22.default.createElement(Icon, { type: isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: "22px", height: "22px" })
          )
        ) }),
        isVideo(parentMessageType) && !(((_h = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.thumbnails) === null || _h === void 0 ? void 0 : _h.length) > 0) && import_react22.default.createElement(
          import_react22.default.Fragment,
          null,
          import_react22.default.createElement(
            "video",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__video" },
            import_react22.default.createElement("source", { src: parentMessageUrl, type: parentMessageType })
          ),
          import_react22.default.createElement(
            "div",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__cover" },
            import_react22.default.createElement(
              "div",
              { className: "sendbird-quote-message__replied-message__thumbnail-message__cover__icon" },
              import_react22.default.createElement(Icon, { type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_2, width: "14px", height: "14px" })
            )
          )
        ),
        isThumbnailLoaded && isGif(parentMessageType) && import_react22.default.createElement(
          "div",
          { className: "sendbird-quote-message__replied-message__thumbnail-message__cover" },
          import_react22.default.createElement(
            "div",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__cover__icon" },
            import_react22.default.createElement(Icon, { type: IconTypes.GIF, fillColor: IconColors.THUMBNAIL_ICON, width: "14px", height: "14px" })
          )
        )
      ),
      getUIKitMessageType(parentMessage) === UIKitMessageTypes.FILE && parentMessageUrl && !isUnavailable && import_react22.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__file-message" },
        import_react22.default.createElement(Icon, { className: "sendbird-quote-message__replied-message__file-message__type-icon", type: (_b = {}, _b[uikitFileTypes.IMAGE] = IconTypes.PHOTO, _b[uikitFileTypes.VIDEO] = IconTypes.PLAY, _b[uikitFileTypes.AUDIO] = IconTypes.FILE_AUDIO, _b[uikitFileTypes.GIF] = IconTypes.GIF, _b[uikitFileTypes.OTHERS] = IconTypes.FILE_DOCUMENT, _b)[getUIKitFileType(parentMessageType)], fillColor: IconColors.ON_BACKGROUND_3, width: "16px", height: "16px" }),
        import_react22.default.createElement(Label, { className: "sendbird-quote-message__replied-message__file-message__file-name", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 }, truncateString(splitFileName[splitFileName.length - 1]))
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/MobileMenu.js
var import_react23 = __toESM(require_react(), 1);
var import_react_dom4 = __toESM(require_react_dom(), 1);
var CopyMenuItem$1 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isUserMessage(message))
      copyToClipboard(message.message);
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__COPY),
    import_react23.default.createElement(Icon, { type: IconTypes.COPY, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var ReplyMenuItem$1 = function(props) {
  var _a, _b, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, setQuoteMessage = _d.setQuoteMessage;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function(e) {
    var _a2;
    setQuoteMessage(message);
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: ((_b = message.parentMessageId) !== null && _b !== void 0 ? _b : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__REPLY),
    import_react23.default.createElement(Icon, { type: IconTypes.REPLY, fillColor: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var ThreadMenuItem$1 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, onReplyInThread = _b.onReplyInThread;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    onReplyInThread({ message });
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__THREAD),
    import_react23.default.createElement(Icon, { type: IconTypes.THREAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var EditMenuItem$1 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, showEdit = _b.showEdit, isOnline = _b.isOnline;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isOnline) {
      showEdit(true);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__EDIT),
    import_react23.default.createElement(Icon, { type: IconTypes.EDIT, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var ResendMenuItem$1 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, resendMessage = _b.resendMessage, isOnline = _b.isOnline;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isOnline) {
      resendMessage(message);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__RESEND),
    import_react23.default.createElement(Icon, { type: IconTypes.REFRESH, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var DeleteMenuItem$1 = function(props) {
  var _a, _b, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { disabled: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onClick: function(e) {
    var _a2;
    if (isFailedMessage(message)) {
      deleteMessage(message);
    } else if (isOnline) {
      showRemove(true);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_c = props.children) !== null && _c !== void 0 ? _c : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__DELETE),
    import_react23.default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var DownloadMenuItem$1 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, message = _b.message, onDownloadClick = _b.onDownloadClick;
  var url = message.url;
  return import_react23.default.createElement(MenuItem$1, __assign({}, props, { onClick: function() {
    hideMenu();
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    "a",
    { className: "sendbird-message__contextmenu--hyperlink", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__SAVE),
    import_react23.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var MobileContextMenu = function(props) {
  var _a, _b, _c, _d;
  var channel = props.channel, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, deleteMessage = props.deleteMessage, setQuoteMessage = props.setQuoteMessage, parentRef = props.parentRef, onReplyInThread = props.onReplyInThread, _e = props.isOpenedFromThread, isOpenedFromThread = _e === void 0 ? false : _e, _f = props.onDownloadClick, onDownloadClick = _f === void 0 ? null : _f, renderMenuItems = props.renderMenuItems, hideMobileMenu = props.hideMenu;
  var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;
  var config = useSendbirdStateContext().config;
  var isOnline = config.isOnline;
  var showMenuItemCopy2 = isUserMessage(message);
  var showMenuItemEdit2 = isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend2 = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete2 = !isPendingMessage(message) && isByMe;
  var showMenuItemDeleteByState = isByMe && (deleteMenuState === void 0 || deleteMenuState !== "HIDE");
  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete2;
  var showMenuItemDownload = !isPendingMessage(message) && isFileMessage(message) && !(isVoiceMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var showMenuItemReply2 = replyType === "QUOTE_REPLY" && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());
  var showMenuItemThread2 = replyType === "THREAD" && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());
  var disableDeleteMessage = deleteMenuState !== void 0 && deleteMenuState === "DISABLE" || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;
  var contextValue = {
    message,
    hideMenu: hideMobileMenu,
    setQuoteMessage,
    onReplyInThread,
    onMoveToParentMessage: noop,
    showEdit,
    showRemove,
    deleteMessage,
    resendMessage,
    isOnline,
    disableDeleteMessage,
    triggerRef: parentRef,
    containerRef: parentRef,
    onDownloadClick
  };
  return import_react23.default.createElement(
    MessageMenuProvider,
    { value: contextValue },
    import_react23.default.createElement(MenuItems, { className: "sendbird-message__mobile-context-menu", parentRef, parentContainRef: parentRef, closeDropdown: hideMobileMenu }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({
      items: {
        CopyMenuItem: CopyMenuItem$1,
        ReplyMenuItem: ReplyMenuItem$1,
        ThreadMenuItem: ThreadMenuItem$1,
        EditMenuItem: EditMenuItem$1,
        ResendMenuItem: ResendMenuItem$1,
        DeleteMenuItem: DeleteMenuItem$1
      }
    })) !== null && _d !== void 0 ? _d : import_react23.default.createElement(
      import_react23.default.Fragment,
      null,
      showMenuItemCopy2 && import_react23.default.createElement(CopyMenuItem$1, null),
      showMenuItemReply2 && import_react23.default.createElement(ReplyMenuItem$1, null),
      showMenuItemThread2 && import_react23.default.createElement(ThreadMenuItem$1, null),
      showMenuItemEdit2 && import_react23.default.createElement(EditMenuItem$1, null),
      showMenuItemResend2 && import_react23.default.createElement(ResendMenuItem$1, null),
      showMenuItemDeleteFinal && import_react23.default.createElement(DeleteMenuItem$1, null),
      showMenuItemDownload && import_react23.default.createElement(DownloadMenuItem$1, null)
    ))
  );
};
var CopyMenuItem2 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu;
  return import_react23.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isUserMessage(message))
      copyToClipboard(message.message);
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Icon, { type: IconTypes.COPY, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__COPY)
  ));
};
var EditMenuItem2 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, showEdit = _b.showEdit, isOnline = _b.isOnline;
  return import_react23.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isOnline) {
      showEdit(true);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Icon, { type: IconTypes.EDIT, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__EDIT)
  ));
};
var ResendMenuItem2 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, resendMessage = _b.resendMessage, isOnline = _b.isOnline;
  return import_react23.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e) {
    var _a2;
    if (isOnline) {
      resendMessage(message);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Icon, { type: IconTypes.REFRESH, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__RESEND)
  ));
};
var ReplyMenuItem2 = function(props) {
  var _a, _b, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, setQuoteMessage = _d.setQuoteMessage;
  return import_react23.default.createElement(BottomSheetMenuItem, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function(e) {
    var _a2;
    setQuoteMessage(message);
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Icon, { type: IconTypes.REPLY, fillColor: ((_b = message.parentMessageId) !== null && _b !== void 0 ? _b : 0) > 0 ? IconColors.ON_BACKGROUND_3 : IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__REPLY)
  ));
};
var ThreadMenuItem2 = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, onReplyInThread = _b.onReplyInThread;
  return import_react23.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e) {
    var _a2;
    onReplyInThread({ message });
    hideMenu();
    (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
  } }), (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Icon, { type: IconTypes.THREAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__THREAD)
  ));
};
var DeleteMenuItem2 = function(props) {
  var _a, _b, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;
  return import_react23.default.createElement(BottomSheetMenuItem, __assign({}, props, { disabled: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onClick: function(e) {
    var _a2;
    if (isFailedMessage(message)) {
      deleteMessage(message);
    } else if (isOnline) {
      showRemove(true);
      hideMenu();
      (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    }
  } }), (_c = props.children) !== null && _c !== void 0 ? _c : import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__DELETE)
  ));
};
var DownloadMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, message = _b.message, onDownloadClick = _b.onDownloadClick;
  var url = message.url;
  return import_react23.default.createElement(BottomSheetMenuItem, { onClick: function() {
    return hideMenu();
  } }, (_a = props.children) !== null && _a !== void 0 ? _a : import_react23.default.createElement(
    "a",
    { className: "sendbird-message__bottomsheet--hyperlink", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
    import_react23.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__SAVE)
  ));
};
var EMOJI_SIZE = 38;
var MobileBottomSheet = function(props) {
  var _a, _b, _c, _d;
  var hideMenu = props.hideMenu, channel = props.channel, emojiContainer = props.emojiContainer, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, toggleReaction = props.toggleReaction, _e = props.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, setQuoteMessage = props.setQuoteMessage, onReplyInThread = props.onReplyInThread, _f = props.isOpenedFromThread, isOpenedFromThread = _f === void 0 ? false : _f, onDownloadClick = props.onDownloadClick, renderMenuItems = props.renderMenuItems;
  var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;
  var config = useSendbirdStateContext().config;
  var isOnline = config.isOnline;
  var showMenuItemCopy2 = isUserMessage(message);
  var showMenuItemEdit2 = isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend2 = isOnline && isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete2 = !isPendingMessage(message) && isByMe;
  var showMenuItemDeleteByState = isByMe && (deleteMenuState === void 0 || deleteMenuState !== "HIDE");
  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete2;
  var disableDelete = deleteMenuState !== void 0 && deleteMenuState === "DISABLE" || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;
  var showMenuItemDownload = isSentMessage(message) && isFileMessage(message) && !isVoiceMessage(message);
  var showReaction = !isFailedMessage(message) && !isPendingMessage(message) && isReactionEnabled;
  var showMenuItemReply2 = replyType === "QUOTE_REPLY" && !isFailedMessage(message) && !isPendingMessage(message) && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var showMenuItemThread2 = replyType === "THREAD" && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var maxEmojisPerRow = Math.floor(window.innerWidth / EMOJI_SIZE) - 1;
  var _g = (0, import_react23.useState)(false), showEmojisOnly = _g[0], setShowEmojisOnly = _g[1];
  var emojis = emojiContainer && getEmojiListAll(emojiContainer);
  var visibleEmojis = showEmojisOnly ? emojis : emojis === null || emojis === void 0 ? void 0 : emojis.slice(0, maxEmojisPerRow);
  var canShowMoreEmojis = emojis && emojis.length > maxEmojisPerRow;
  var contextValue = {
    message,
    hideMenu,
    setQuoteMessage,
    onReplyInThread,
    onMoveToParentMessage: function() {
    },
    showEdit,
    showRemove,
    deleteMessage,
    resendMessage,
    isOnline,
    disableDeleteMessage: disableDelete,
    triggerRef: null,
    containerRef: null,
    onDownloadClick
  };
  return import_react23.default.createElement(
    MessageMenuProvider,
    { value: contextValue },
    import_react23.default.createElement(
      BottomSheet,
      { onBackdropClick: hideMenu },
      import_react23.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet" },
        showReaction && import_react23.default.createElement(
          "div",
          { className: "sendbird-message__bottomsheet-reactions" },
          import_react23.default.createElement(
            "ul",
            { className: "sendbird-message__bottomsheet-reaction-bar" },
            import_react23.default.createElement(
              "div",
              { className: classnames("sendbird-message__bottomsheet-reaction-bar__row", showEmojisOnly && "sendbird-message__bottomsheet-reaction-bar__all") },
              visibleEmojis.map(function(emoji) {
                var _a2, _b2, _c2;
                var isReacted = (_c2 = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.filter(function(reaction) {
                  return reaction.key === emoji.key;
                })[0]) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c2 === void 0 ? void 0 : _c2.some(function(reactorId) {
                  return reactorId === userId;
                });
                return import_react23.default.createElement(
                  ReactionButton,
                  { key: emoji.key, width: "".concat(EMOJI_SIZE, "px"), height: "".concat(EMOJI_SIZE, "px"), selected: isReacted, onClick: function() {
                    hideMenu();
                    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
                  }, testID: "ui_mobile_emoji_reactions_menu_".concat(emoji.key) },
                  import_react23.default.createElement(ImageRenderer, { url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || "", width: "28px", height: "28px", placeHolder: function(_a3) {
                    var style = _a3.style;
                    return import_react23.default.createElement(
                      "div",
                      { style },
                      import_react23.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
                    );
                  } })
                );
              }),
              canShowMoreEmojis && !showEmojisOnly && import_react23.default.createElement(
                ReactionButton,
                { key: "emoji_more", width: "38px", height: "38px", onClick: function() {
                  return setShowEmojisOnly(true);
                }, testID: "ui_mobile_emoji_reactions_menu_emojiadd" },
                import_react23.default.createElement(ImageRenderer, { url: "", width: "28px", height: "28px", placeHolder: function(_a2) {
                  var style = _a2.style;
                  return import_react23.default.createElement(
                    "div",
                    { style },
                    import_react23.default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
                  );
                } })
              )
            )
          )
        ),
        !showEmojisOnly && import_react23.default.createElement("div", { className: "sendbird-message__bottomsheet--actions" }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({
          items: {
            CopyMenuItem: CopyMenuItem2,
            EditMenuItem: EditMenuItem2,
            ResendMenuItem: ResendMenuItem2,
            ReplyMenuItem: ReplyMenuItem2,
            ThreadMenuItem: ThreadMenuItem2,
            DeleteMenuItem: DeleteMenuItem2
          }
        })) !== null && _d !== void 0 ? _d : import_react23.default.createElement(
          import_react23.default.Fragment,
          null,
          showMenuItemCopy2 && import_react23.default.createElement(CopyMenuItem2, null),
          showMenuItemEdit2 && import_react23.default.createElement(EditMenuItem2, null),
          showMenuItemResend2 && import_react23.default.createElement(ResendMenuItem2, null),
          showMenuItemReply2 && import_react23.default.createElement(ReplyMenuItem2, null),
          showMenuItemThread2 && import_react23.default.createElement(ThreadMenuItem2, null),
          showMenuItemDeleteFinal && import_react23.default.createElement(DeleteMenuItem2, null),
          showMenuItemDownload && import_react23.default.createElement(DownloadMenuItem, null)
        ))
      )
    )
  );
};
var MobileMenu = function(props) {
  return import_react23.default.createElement(import_react23.default.Fragment, null, (props === null || props === void 0 ? void 0 : props.isReactionEnabled) ? import_react23.default.createElement(MobileBottomSheet, __assign({}, props)) : import_react23.default.createElement(MobileContextMenu, __assign({}, props)));
};

// node_modules/@sendbird/uikit-react/ui/ThreadReplies.js
var import_react24 = __toESM(require_react(), 1);
function ThreadReplies(_a, ref) {
  var _b;
  var className = _a.className, threadInfo = _a.threadInfo, onClick = _a.onClick;
  var _c = threadInfo.mostRepliedUsers, mostRepliedUsers = _c === void 0 ? [] : _c, replyCount = threadInfo.replyCount;
  var stringSet = useLocalization().stringSet;
  return import_react24.default.createElement(
    "div",
    { className: "sendbird-ui-thread-replies ".concat(className), role: "button", onClick: function(e) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
      e === null || e === void 0 ? void 0 : e.stopPropagation();
    }, onKeyDown: function(e) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
      e === null || e === void 0 ? void 0 : e.stopPropagation();
    }, ref },
    import_react24.default.createElement(
      "div",
      { className: "sendbird-ui-thread-replies__user-profiles" },
      mostRepliedUsers.slice(0, 4).map(function(user) {
        return import_react24.default.createElement(Avatar$1, { key: user.userId, className: "sendbird-ui-thread-replies__user-profiles__avatar", src: user === null || user === void 0 ? void 0 : user.profileUrl, alt: "user profile", width: "20px", height: "20px" });
      }),
      (mostRepliedUsers === null || mostRepliedUsers === void 0 ? void 0 : mostRepliedUsers.length) >= 5 && import_react24.default.createElement(
        "div",
        { className: "sendbird-ui-thread-replies__user-profiles__avatar" },
        import_react24.default.createElement(Avatar$1, { className: "sendbird-ui-thread-replies__user-profiles__avatar__image", src: (_b = mostRepliedUsers === null || mostRepliedUsers === void 0 ? void 0 : mostRepliedUsers[4]) === null || _b === void 0 ? void 0 : _b.profileUrl, alt: "user profile", width: "20px", height: "20px" }),
        import_react24.default.createElement("div", { className: "sendbird-ui-thread-replies__user-profiles__avatar__cover" }),
        import_react24.default.createElement(
          "div",
          { className: "sendbird-ui-thread-replies__user-profiles__avatar__plus" },
          import_react24.default.createElement(Icon, { type: IconTypes.PLUS, fillColor: IconColors.WHITE, width: "16px", height: "16px" })
        )
      )
    ),
    import_react24.default.createElement(Label, { className: "sendbird-ui-thread-replies__reply-counts", type: LabelTypography.CAPTION_2, color: LabelColors.PRIMARY }, replyCount === 1 ? "".concat(replyCount, " ").concat(stringSet.CHANNEL__THREAD_REPLY) : "".concat(replyCount > 99 ? stringSet.CHANNEL__THREAD_OVER_MAX : replyCount, " ").concat(stringSet.CHANNEL__THREAD_REPLIES)),
    import_react24.default.createElement(Icon, { className: "sendbird-ui-thread-replies__icon", type: IconTypes.CHEVRON_RIGHT, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
  );
}
var ThreadReplies$1 = import_react24.default.forwardRef(ThreadReplies);

// node_modules/@sendbird/uikit-react/ui/OGMessageItemBody.js
var import_react28 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-NWVriOUB.js
var import_react27 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/MentionLabel.js
var import_react25 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
function MentionLabel(props) {
  var _a, _b, _c;
  var mentionTemplate = props.mentionTemplate, mentionedUserId = props.mentionedUserId, mentionedUserNickname = props.mentionedUserNickname, isByMe = props.isByMe;
  var mentionRef = (0, import_react25.useRef)();
  var sendbirdState = useSendbirdStateContext();
  var userId = (_a = sendbirdState === null || sendbirdState === void 0 ? void 0 : sendbirdState.config) === null || _a === void 0 ? void 0 : _a.userId;
  var sdk = (_c = (_b = sendbirdState === null || sendbirdState === void 0 ? void 0 : sendbirdState.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var amIBeingMentioned = userId === mentionedUserId;
  var _d = (0, import_react25.useState)(), user = _d[0], setUser = _d[1];
  var fetchUser = (0, import_react25.useCallback)(function(toggleDropdown) {
    if (user || !(sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery)) {
      toggleDropdown();
      return;
    }
    var query = sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery({
      userIdsFilter: [mentionedUserId]
    });
    query.next().then(function(members) {
      if ((members === null || members === void 0 ? void 0 : members.length) > 0) {
        setUser(members[0]);
      }
      toggleDropdown();
    });
  }, [sdk, mentionedUserId]);
  return import_react25.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
    return import_react25.default.createElement(
      "a",
      { className: classnames("sendbird-word__mention", amIBeingMentioned && "sendbird-word__mention--me"), onClick: function() {
        return fetchUser(toggleDropdown);
      }, ref: mentionRef, "data-userid": mentionedUserId, "data-nickname": mentionedUserNickname, "data-sb-mention": true },
      import_react25.default.createElement(Label, { type: LabelTypography.CAPTION_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, "".concat(mentionTemplate).concat(mentionedUserNickname))
    );
  }, menuItems: function(closeDropdown) {
    return import_react25.default.createElement(
      MenuItems,
      {
        /**
        * parentRef: For catching location(x, y) of MenuItems
        * parentContainRef: For toggling more options(menus & reactions)
        */
        parentRef: mentionRef,
        parentContainRef: mentionRef,
        closeDropdown,
        style: { paddingTop: "0px", paddingBottom: "0px" }
      },
      import_react25.default.createElement(UserProfile, { user, onSuccess: closeDropdown, currentUserId: userId })
    );
  } });
}

// node_modules/@sendbird/uikit-react/ui/LinkLabel.js
var import_react26 = __toESM(require_react(), 1);
var http = /https?:\/\//;
function LinkLabel(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, src = _a.src, type = _a.type, color = _a.color, children = _a.children;
  var url = http.test(src) ? src : "http://".concat(src);
  return import_react26.default.createElement(
    "a",
    {
      className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
        "sendbird-link-label",
        changeColorToClassName(color)
      ], false).join(" "),
      href: url,
      target: "_blank",
      rel: "noopener noreferrer",
      // for mobile
      onTouchEnd: function(e) {
        e.preventDefault();
        e.nativeEvent.stopImmediatePropagation();
        openURL(url);
      }
    },
    import_react26.default.createElement(Label, { className: "sendbird-link-label__label", testID: "sendbird-link-label__label", type, color }, children)
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-NWVriOUB.js
function keyGenerator(createdAt, messageUpdatedAt, index) {
  return "sb-msg_".concat(createdAt, "_").concat(messageUpdatedAt, "_").concat(index);
}
function asSafeURL(url) {
  var safeURL = decodeURIComponent(url);
  try {
    var protocol_1 = new URL(safeURL).protocol;
    if (["https:", "http:"].some(function(it) {
      return it === protocol_1.toLowerCase();
    })) {
      return safeURL;
    } else {
      return "#";
    }
  } catch (error) {
    if (!safeURL.startsWith("http://") && !safeURL.startsWith("https://")) {
      safeURL = "https://" + safeURL;
    }
  }
  return safeURL;
}
function TextFragment(_a) {
  var tokens = _a.tokens;
  var messageStore = useMessageContext();
  var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;
  var isByMe = messageStore === null || messageStore === void 0 ? void 0 : messageStore.isByMe;
  var updatedAt = message.updatedAt, createdAt = message.createdAt;
  return import_react27.default.createElement(import_react27.default.Fragment, null, tokens === null || tokens === void 0 ? void 0 : tokens.map(function(token, idx) {
    var key = keyGenerator(createdAt, updatedAt, idx);
    return K(token.type).with(TOKEN_TYPES.markdown, function() {
      var markdownToken = token;
      var groups = markdownToken.groups;
      return import_react27.default.createElement("span", { className: "sendbird-word", key, "data-testid": "sendbird-ui-word" }, K(markdownToken.markdownType).with("bold", function() {
        return import_react27.default.createElement(
          "span",
          { style: { fontWeight: "bold" } },
          import_react27.default.createElement(TextFragment, { tokens: tokenizeMarkdown({ messageText: groups[1] }) })
        );
      }).with("url", function() {
        return import_react27.default.createElement(
          "a",
          { className: isByMe ? "sendbird-label--color-oncontent-1" : "sendbird-label--color-onbackground-1", href: asSafeURL(groups[2]) },
          import_react27.default.createElement(TextFragment, { tokens: tokenizeMarkdown({ messageText: groups[1] }) })
        );
      }).otherwise(function() {
        return import_react27.default.createElement(import_react27.default.Fragment, null);
      }));
    }).with(TOKEN_TYPES.mention, function() {
      return import_react27.default.createElement(
        "span",
        { className: "sendbird-word", key, "data-testid": "sendbird-ui-word" },
        import_react27.default.createElement(MentionLabel, {
          mentionTemplate: USER_MENTION_PREFIX,
          // @ts-ignore
          mentionedUserId: token.userId,
          mentionedUserNickname: token.value,
          isByMe
        })
      );
    }).with(TOKEN_TYPES.url, function() {
      return import_react27.default.createElement(
        "span",
        { className: "sendbird-word", key, "data-testid": "sendbird-ui-word" },
        import_react27.default.createElement(LinkLabel, { src: token.value, type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, token.value)
      );
    }).otherwise(function() {
      return import_react27.default.createElement(import_react27.default.Fragment, { key }, getWhiteSpacePreservedText(token.value));
    });
  }));
}

// node_modules/@sendbird/uikit-react/ui/OGMessageItemBody.js
var import_react_dom6 = __toESM(require_react_dom(), 1);
function OGMessageItemBody(_a) {
  var _b, _c, _d, _e;
  var className = _a.className, message = _a.message, _f = _a.isByMe, isByMe = _f === void 0 ? false : _f, _g = _a.mouseHover, mouseHover = _g === void 0 ? false : _g, _h = _a.isMentionEnabled, isMentionEnabled = _h === void 0 ? false : _h, _j = _a.isReactionEnabled, isReactionEnabled = _j === void 0 ? false : _j, _k = _a.isMarkdownEnabled, isMarkdownEnabled = _k === void 0 ? false : _k, _l = _a.onMessageHeightChange, onMessageHeightChange = _l === void 0 ? function() {
  } : _l;
  var stringSet = (0, import_react28.useContext)(LocalizationContext).stringSet;
  var isMessageMentioned = isMentionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _b === void 0 ? void 0 : _b.length) > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && ((_c = message === null || message === void 0 ? void 0 : message.mentionedUsers) === null || _c === void 0 ? void 0 : _c.length) > 0;
  var tokens = (0, import_react28.useMemo)(function() {
    var _a2;
    if (isMessageMentioned) {
      return tokenizeMessage({
        mentionedUsers: (_a2 = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a2 !== void 0 ? _a2 : void 0,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
        includeMarkdown: isMarkdownEnabled
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message,
      includeMarkdown: isMarkdownEnabled
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  var openOpenGraphURL = function() {
    var _a2;
    return openURL((_a2 = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _a2 === void 0 ? void 0 : _a2.url);
  };
  return import_react28.default.createElement(
    "div",
    { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-og-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length) > 0 ? "reactions" : ""
    ]) },
    import_react28.default.createElement(
      Label,
      { type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 },
      import_react28.default.createElement(
        "div",
        { className: OG_MESSAGE_BODY_CLASSNAME },
        import_react28.default.createElement(TextFragment, { tokens }),
        isEditedMessage(message) && import_react28.default.createElement(Label, { className: "sendbird-og-message-item-body__text-bubble__message", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, " ".concat(stringSet.MESSAGE_EDITED, " "))
      )
    ),
    ((_e = message.ogMetaData) === null || _e === void 0 ? void 0 : _e.defaultImage) && import_react28.default.createElement(OGImageSection, { onClick: openOpenGraphURL, ogImage: message.ogMetaData.defaultImage, onMessageHeightChange }),
    message.ogMetaData && import_react28.default.createElement(OGDescriptionSection, { onClick: openOpenGraphURL, ogMetaData: message.ogMetaData, onMessageHeightChange }),
    import_react28.default.createElement("div", { className: "sendbird-og-message-item-body__cover" })
  );
}
var OGImageSection = function(props) {
  var onClick = props.onClick, ogImage = props.ogImage, onMessageHeightChange = props.onMessageHeightChange;
  var imageRef = (0, import_react28.useRef)(null);
  var isMobile = useMediaQueryContext().isMobile;
  return import_react28.default.createElement(
    "div",
    { ref: imageRef, className: classnames("sendbird-og-message-item-body__og-thumbnail", !ogImage.url && "sendbird-og-message-item-body__og-thumbnail__empty"), onClick: function() {
      return onClick();
    } },
    import_react28.default.createElement(ImageRenderer, { className: "sendbird-og-message-item-body__og-thumbnail__image", url: ogImage.url || "", alt: ogImage.alt || "", width: "100%", height: isMobile ? "136px" : "240px", onLoad: onMessageHeightChange, onError: function() {
      var _a, _b;
      try {
        (_b = (_a = imageRef === null || imageRef === void 0 ? void 0 : imageRef.current) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.add("sendbird-og-message-item-body__og-thumbnail__empty");
      } catch (error) {
      }
    }, defaultComponent: import_react28.default.createElement(
      "div",
      { className: "sendbird-og-message-item-body__og-thumbnail__place-holder" },
      import_react28.default.createElement(Icon, { className: "sendbird-og-message-item-body__og-thumbnail__place-holder__icon", type: IconTypes.THUMBNAIL_NONE, width: "56px", height: "56px" })
    ) })
  );
};
var OGDescriptionSection = function(props) {
  var onClick = props.onClick, ogMetaData = props.ogMetaData, onMessageHeightChange = props.onMessageHeightChange;
  (0, import_react28.useEffect)(function() {
    onMessageHeightChange();
  }, [ogMetaData.title, ogMetaData.description, ogMetaData.url]);
  return import_react28.default.createElement(
    "div",
    { className: "sendbird-og-message-item-body__description", onClick: function() {
      return onClick();
    } },
    ogMetaData.title && import_react28.default.createElement(Label, { className: "sendbird-og-message-item-body__description__title", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, ogMetaData.title),
    ogMetaData.description && import_react28.default.createElement(Label, { className: "sendbird-og-message-item-body__description__description", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, ogMetaData.description),
    ogMetaData.url && import_react28.default.createElement(Label, { className: "sendbird-og-message-item-body__description__url", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, ogMetaData.url)
  );
};

// node_modules/@sendbird/uikit-react/ui/TextMessageItemBody.js
var import_react29 = __toESM(require_react(), 1);
var import_react_dom7 = __toESM(require_react_dom(), 1);
function TextMessageItemBody(_a) {
  var _b;
  var _c = _a.className, className = _c === void 0 ? "" : _c, message = _a.message, _d = _a.isByMe, isByMe = _d === void 0 ? false : _d, _e = _a.mouseHover, mouseHover = _e === void 0 ? false : _e, _f = _a.isMentionEnabled, isMentionEnabled = _f === void 0 ? false : _f, _g = _a.isReactionEnabled, isReactionEnabled = _g === void 0 ? false : _g, _h = _a.isMarkdownEnabled, isMarkdownEnabled = _h === void 0 ? false : _h;
  var stringSet = (0, import_react29.useContext)(LocalizationContext).stringSet;
  var isMessageMentioned = isMentionEnabled && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) && message.mentionedMessageTemplate.length > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0;
  var tokens = (0, import_react29.useMemo)(function() {
    var _a2;
    if (isMessageMentioned) {
      return tokenizeMessage({
        mentionedUsers: (_a2 = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a2 !== void 0 ? _a2 : void 0,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
        includeMarkdown: isMarkdownEnabled
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message,
      includeMarkdown: isMarkdownEnabled
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  return import_react29.default.createElement(
    Label,
    { type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 },
    import_react29.default.createElement(
      "div",
      { className: getClassName([
        className,
        TEXT_MESSAGE_BODY_CLASSNAME,
        isByMe ? "outgoing" : "incoming",
        mouseHover ? "mouse-hover" : "",
        isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? "reactions" : ""
      ]) },
      import_react29.default.createElement(TextFragment, { tokens }),
      isEditedMessage(message) && import_react29.default.createElement(Label, { className: "sendbird-text-message-item-body__message edited", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, " ".concat(stringSet.MESSAGE_EDITED, " "))
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/FileMessageItemBody.js
var import_react30 = __toESM(require_react(), 1);
function FileMessageItemBody(_a) {
  var _this = this;
  var _b, _c, _d;
  var _e = _a.className, className = _e === void 0 ? "" : _e, message = _a.message, _f = _a.isByMe, isByMe = _f === void 0 ? false : _f, _g = _a.mouseHover, mouseHover = _g === void 0 ? false : _g, _h = _a.isReactionEnabled, isReactionEnabled = _h === void 0 ? false : _h, truncateLimit = _a.truncateLimit, onBeforeDownloadFileMessage = _a.onBeforeDownloadFileMessage;
  var logger = null;
  try {
    logger = (_c = (_b = useSendbirdStateContext()) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.logger;
  } catch (err) {
  }
  var isMobile = useMediaQueryContext().isMobile;
  var truncateMaxNum = truncateLimit !== null && truncateLimit !== void 0 ? truncateLimit : isMobile ? 20 : void 0;
  var downloadFileWithUrl = function() {
    return openURL(message === null || message === void 0 ? void 0 : message.url);
  };
  var handleOnClickTextButton = onBeforeDownloadFileMessage ? function() {
    return __awaiter(_this, void 0, void 0, function() {
      var allowDownload, err_1;
      var _a2, _b2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            _c2.trys.push([0, 2, , 3]);
            return [4, onBeforeDownloadFileMessage({ message })];
          case 1:
            allowDownload = _c2.sent();
            if (allowDownload) {
              downloadFileWithUrl();
            } else {
              (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "FileMessageItemBody: Not allowed to download.");
            }
            return [3, 3];
          case 2:
            err_1 = _c2.sent();
            (_b2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "FileMessageItemBody: Error occurred while determining download continuation:", err_1);
            return [3, 3];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  } : downloadFileWithUrl;
  return import_react30.default.createElement(
    "div",
    { className: getClassName([
      className,
      "sendbird-file-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length) > 0 ? "reactions" : ""
    ]) },
    import_react30.default.createElement(
      "div",
      { className: "sendbird-file-message-item-body__file-icon" },
      import_react30.default.createElement(Icon, { className: "sendbird-file-message-item-body__file-icon__icon", type: {
        IMAGE: IconTypes.PHOTO,
        VIDEO: IconTypes.PLAY,
        AUDIO: IconTypes.FILE_AUDIO,
        GIF: IconTypes.GIF,
        OTHERS: IconTypes.FILE_DOCUMENT
      }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)], fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
    ),
    import_react30.default.createElement(
      TextButton,
      { className: "sendbird-file-message-item-body__file-name", onClick: handleOnClickTextButton, color: isByMe ? Colors.ONCONTENT_1 : Colors.ONBACKGROUND_1 },
      import_react30.default.createElement(Label, { className: "sendbird-file-message-item-body__file-name__text", testID: "sendbird-file-message-item-body__file-name__text", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url), truncateMaxNum))
    )
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-Bt68jirZ.js
var import_react33 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/FileViewer.js
var import_react32 = __toESM(require_react(), 1);
var import_react_dom8 = __toESM(require_react_dom(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DTOg7Xzt.js
var import_react31 = __toESM(require_react(), 1);
function useKeyDown(ref, keyDownCallbackMap) {
  (0, import_react31.useLayoutEffect)(function() {
    var _a;
    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
  }, [ref.current]);
  var onKeyDown = usePreservedCallback(function(event) {
    var callback = keyDownCallbackMap[event.key];
    callback === null || callback === void 0 ? void 0 : callback(event);
    event.stopPropagation();
  });
  return onKeyDown;
}

// node_modules/@sendbird/uikit-react/ui/FileViewer.js
var ViewerTypes = {
  SINGLE: "SINGLE",
  MULTI: "MULTI"
};
function mapFileViewerComponentProps(_a) {
  var props = _a.props;
  if (props.viewerType === ViewerTypes.MULTI) {
    var _b = props, fileInfoList = _b.fileInfoList, currentIndex = _b.currentIndex;
    return fileInfoList[currentIndex];
  }
  var fileInfo = props;
  return {
    name: fileInfo.name,
    type: fileInfo.type,
    url: fileInfo.url
  };
}
function DeleteButton(props) {
  if (props.viewerType !== ViewerTypes.MULTI) {
    var onDelete_1 = props.onDelete, isByMe = props.isByMe, disableDelete_1 = props.disableDelete, className = props.className;
    return isByMe ? import_react32.default.createElement(
      "div",
      { className: "sendbird-fileviewer__header__right__actions__delete ".concat(className) },
      import_react32.default.createElement(Icon, { className: disableDelete_1 ? "disabled" : "", type: IconTypes.DELETE, fillColor: disableDelete_1 ? IconColors.GRAY : IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: function(e) {
        if (!disableDelete_1) {
          onDelete_1 === null || onDelete_1 === void 0 ? void 0 : onDelete_1(e);
        }
      } })
    ) : import_react32.default.createElement(import_react32.default.Fragment, null);
  }
  return import_react32.default.createElement(import_react32.default.Fragment, null);
}
function Slider(props) {
  if (props.viewerType === ViewerTypes.MULTI) {
    var onClickLeft_1 = props.onClickLeft, onClickRight_1 = props.onClickRight;
    return import_react32.default.createElement(
      "div",
      { className: "sendbird-file-viewer-slider" },
      import_react32.default.createElement(
        "div",
        { className: "sendbird-file-viewer-arrow--left" },
        import_react32.default.createElement(Icon, { type: IconTypes.SLIDE_LEFT, fillColor: IconColors.ON_BACKGROUND_1, height: SLIDER_BUTTON_ICON_SIDE_LENGTH, width: SLIDER_BUTTON_ICON_SIDE_LENGTH, onClick: function(e) {
          onClickLeft_1 === null || onClickLeft_1 === void 0 ? void 0 : onClickLeft_1();
          e.stopPropagation();
        } })
      ),
      import_react32.default.createElement(
        "div",
        { className: "sendbird-file-viewer-arrow--right" },
        import_react32.default.createElement(Icon, { type: IconTypes.SLIDE_LEFT, fillColor: IconColors.ON_BACKGROUND_1, height: SLIDER_BUTTON_ICON_SIDE_LENGTH, width: SLIDER_BUTTON_ICON_SIDE_LENGTH, onClick: function(e) {
          e.stopPropagation();
          onClickRight_1 === null || onClickRight_1 === void 0 ? void 0 : onClickRight_1();
        } })
      )
    );
  }
  return import_react32.default.createElement(import_react32.default.Fragment, null);
}
var FileViewerComponent = function(props) {
  var profileUrl = props.profileUrl, nickname = props.nickname, onClose = props.onClose, onDownloadClick = props.onDownloadClick;
  var _a = props, onClickLeft = _a.onClickLeft, onClickRight = _a.onClickRight;
  var ref = (0, import_react32.useRef)(null);
  var onKeyDown = useKeyDown(ref, {
    Escape: function(e) {
      return onClose === null || onClose === void 0 ? void 0 : onClose(e);
    },
    ArrowLeft: function() {
      return onClickLeft === null || onClickLeft === void 0 ? void 0 : onClickLeft();
    },
    ArrowRight: function() {
      return onClickRight === null || onClickRight === void 0 ? void 0 : onClickRight();
    }
  });
  var _b = mapFileViewerComponentProps({ props }), name = _b.name, type = _b.type, url = _b.url;
  var stringSet = (0, import_react32.useContext)(LocalizationContext).stringSet;
  return import_react32.default.createElement(
    Modal,
    { onClose },
    import_react32.default.createElement(
      "div",
      {
        className: "sendbird-fileviewer",
        "data-testid": "sendbird-fileviewer",
        onKeyDown,
        // to focus
        tabIndex: 1,
        ref
      },
      import_react32.default.createElement(
        "div",
        { className: "sendbird-fileviewer__header" },
        import_react32.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__left" },
          import_react32.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__left__avatar" },
            import_react32.default.createElement(Avatar$1, { height: "32px", width: "32px", src: profileUrl })
          ),
          import_react32.default.createElement(Label, { className: "sendbird-fileviewer__header__left__filename", type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, name),
          import_react32.default.createElement(Label, { className: "sendbird-fileviewer__header__left__sender-name", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, nickname)
        ),
        import_react32.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__right" },
          isSupportedFileView(type) && import_react32.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions" },
            import_react32.default.createElement(
              "a",
              { className: "sendbird-fileviewer__header__right__actions__download", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
              import_react32.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px" })
            ),
            import_react32.default.createElement(DeleteButton, __assign({ className: "sendbird-fileviewer__header__right__actions__delete" }, props))
          ),
          import_react32.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions__close" },
            import_react32.default.createElement(Icon, { type: IconTypes.CLOSE, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: function(e) {
              return onClose === null || onClose === void 0 ? void 0 : onClose(e);
            } })
          )
        )
      ),
      import_react32.default.createElement(
        "div",
        { className: "sendbird-fileviewer__content" },
        isVideo(type) && import_react32.default.createElement(
          "video",
          { controls: true, className: "sendbird-fileviewer__content__video" },
          import_react32.default.createElement("source", { src: url, type })
        ),
        isImage(type) && import_react32.default.createElement("img", { src: url, alt: name, className: props.viewerType === ViewerTypes.MULTI ? "sendbird-fileviewer__content__img__multi" : "sendbird-fileviewer__content__img" }),
        !isSupportedFileView(type) && import_react32.default.createElement(
          "div",
          { className: "sendbird-fileviewer__content__unsupported" },
          import_react32.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1 }, (stringSet === null || stringSet === void 0 ? void 0 : stringSet.UI__FILE_VIEWER__UNSUPPORT) || "Unsupported message")
        ),
        import_react32.default.createElement(Slider, __assign({}, props))
      )
    )
  );
};
function FileViewer(_a) {
  var _b, _c, _d;
  var message = _a.message, _e = _a.statefulFileInfoList, statefulFileInfoList = _e === void 0 ? [] : _e, onClose = _a.onClose, _f = _a.isByMe, isByMe = _f === void 0 ? false : _f, onDelete = _a.onDelete, currentIndex = _a.currentIndex, onClickLeft = _a.onClickLeft, onClickRight = _a.onClickRight, onDownloadClick = _a.onDownloadClick;
  if (isMultipleFilesMessage(message)) {
    var castedMessage = message;
    return import_react32.default.createElement(FileViewerComponent, { profileUrl: castedMessage.sender.profileUrl, nickname: castedMessage.sender.nickname, viewerType: ViewerTypes.MULTI, fileInfoList: statefulFileInfoList.filter(function(fileInfo) {
      return fileInfo.url;
    }).map(function(fileInfo) {
      return {
        name: fileInfo.fileName || "",
        type: fileInfo.mimeType || "",
        url: fileInfo.url || ""
      };
    }), currentIndex: currentIndex || 0, onClickLeft: onClickLeft || noop, onClickRight: onClickRight || noop, onClose, onDownloadClick });
  } else if (isFileMessage(message)) {
    var castedMessage = message;
    return (0, import_react_dom8.createPortal)(import_react32.default.createElement(FileViewerComponent, { profileUrl: (_b = castedMessage.sender) === null || _b === void 0 ? void 0 : _b.profileUrl, nickname: (_c = castedMessage.sender) === null || _c === void 0 ? void 0 : _c.nickname, name: castedMessage.name, type: castedMessage.type, url: castedMessage === null || castedMessage === void 0 ? void 0 : castedMessage.url, isByMe, disableDelete: (((_d = castedMessage.threadInfo) === null || _d === void 0 ? void 0 : _d.replyCount) || 0) > 0, onClose, onDelete: onDelete || noop, onDownloadClick }), document.getElementById(MODAL_ROOT));
  }
  return import_react32.default.createElement(import_react32.default.Fragment, null);
}

// node_modules/@sendbird/uikit-react/chunks/bundle-Bt68jirZ.js
function ImageGrid(_a) {
  var _b;
  var children = _a.children, className = _a.className, message = _a.message, isReactionEnabled = _a.isReactionEnabled;
  return import_react33.default.createElement(
    "div",
    { className: "sendbird-image-grid-wrap" },
    import_react33.default.createElement("div", { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-image-grid",
      isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? "reactions" : ""
    ]) }, children)
  );
}
var GRID_WIDTH_CHAT_WEB = 400;
var GRID_SIDE_PADDING = 8;
var GRID_GAP = 4;
var TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 54;
var PROFILE_IMAGE_WIDTH = 40;
var CHAT_MOBILE_SIDE_PADDING = 48;
var THREAD_PARENT_WIDTH = 320;
var THREAD_PARENT_SIDE_PADDING = 28;
var THREAD_PARENT_GRID_MARGIN_LEFT = 12;
var THREAD_CHILD_WIDTH = 200;
var THREAD_CHILD_SIDE_PADDING = 8;
var THREAD_CHILD_MOBILE_SIDE_PADDING = 32;
var THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 60;
var MULTIPLE_FILES_IMAGE_SIDE_LENGTH = {
  CHAT_WEB: "calc(".concat(GRID_WIDTH_CHAT_WEB / 2, "px - ").concat((GRID_SIDE_PADDING + GRID_GAP) / 2, "px)"),
  CHAT_MOBILE: "calc(50vw - ".concat((CHAT_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2, "px)"),
  THREAD_PARENT_WEB: "calc(".concat((THREAD_PARENT_WIDTH - (THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP)) / 2, "px)"),
  THREAD_PARENT_MOBILE: "calc(50vw - ".concat((THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP) / 2, "px)"),
  THREAD_CHILD_WEB: "calc(".concat((THREAD_CHILD_WIDTH - THREAD_CHILD_SIDE_PADDING - GRID_GAP) / 2, "px)"),
  THREAD_CHILD_MOBILE: "calc(50vw - ".concat((THREAD_CHILD_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2, "px)")
};
var MULTIPLE_FILES_IMAGE_BORDER_RADIUS = {
  CHAT_WEB: "6px",
  CHAT_MOBILE: "6px",
  THREAD_PARENT_WEB: "6px",
  THREAD_PARENT_MOBILE: "6px",
  THREAD_CHILD_WEB: "6px",
  THREAD_CHILD_MOBILE: "6px"
};
var MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH = "34px";
var ThreadMessageKind = {
  PARENT: "parent",
  CHILD: "child"
};
function MultipleFilesMessageItemBody(_a) {
  var _this = this;
  var _b, _c;
  var className = _a.className, message = _a.message, _d = _a.isReactionEnabled, isReactionEnabled = _d === void 0 ? false : _d, threadMessageKindKey = _a.threadMessageKindKey, _e = _a.statefulFileInfoList, statefulFileInfoList = _e === void 0 ? [] : _e, _f = _a.onBeforeDownloadFileMessage, onBeforeDownloadFileMessage = _f === void 0 ? null : _f;
  var logger = (_c = (_b = useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.logger;
  var _g = (0, import_react33.useState)(-1), currentFileViewerIndex = _g[0], setCurrentFileViewerIndex = _g[1];
  function onClose() {
    setCurrentFileViewerIndex(-1);
  }
  function onClickLeft() {
    setCurrentFileViewerIndex(currentFileViewerIndex === 0 ? statefulFileInfoList.length - 1 : currentFileViewerIndex - 1);
  }
  function onClickRight() {
    setCurrentFileViewerIndex(currentFileViewerIndex === statefulFileInfoList.length - 1 ? 0 : currentFileViewerIndex + 1);
  }
  return threadMessageKindKey ? import_react33.default.createElement(
    import_react33.default.Fragment,
    null,
    currentFileViewerIndex > -1 && import_react33.default.createElement(FileViewer, { message, statefulFileInfoList, currentIndex: currentFileViewerIndex, onClickLeft, onClickRight, onClose, onDownloadClick: function(e) {
      return __awaiter(_this, void 0, void 0, function() {
        var allowDownload, err_1;
        var _a2, _b2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!onBeforeDownloadFileMessage)
                return [
                  2
                  /*return*/
                ];
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              return [4, onBeforeDownloadFileMessage({ message, index: currentFileViewerIndex })];
            case 2:
              allowDownload = _c2.sent();
              if (!allowDownload) {
                e.preventDefault();
                (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "MultipleFilesMessageItemBody: Not allowed to download.");
              }
              return [3, 4];
            case 3:
              err_1 = _c2.sent();
              (_b2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "MultipleFilesMessageItemBody: Error occurred while determining download continuation:", err_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } }),
    import_react33.default.createElement(ImageGrid, { className, message, isReactionEnabled }, statefulFileInfoList.map(function(fileInfo, index) {
      var _a2, _b2, _c2, _d2;
      return import_react33.default.createElement(
        "div",
        { className: "sendbird-multiple-files-image-renderer-wrapper", onClick: message.sendingStatus === W.SUCCEEDED ? function() {
          return setCurrentFileViewerIndex(index);
        } : void 0, key: "sendbird-multiple-files-image-renderer-".concat(index, "-").concat(fileInfo.url) },
        import_react33.default.createElement(ImageRenderer, { url: (_d2 = (_c2 = (_b2 = (_a2 = fileInfo.thumbnails) === null || _a2 === void 0 ? void 0 : _a2[0]) === null || _b2 === void 0 ? void 0 : _b2.url) !== null && _c2 !== void 0 ? _c2 : fileInfo.url) !== null && _d2 !== void 0 ? _d2 : "", fixedSize: false, width: MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey], maxSideLength: MULTIPLE_FILES_IMAGE_SIDE_LENGTH.CHAT_WEB, height: MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey], borderRadius: getBorderRadiusForMultipleImageRenderer(MULTIPLE_FILES_IMAGE_BORDER_RADIUS[threadMessageKindKey], index, statefulFileInfoList.length), shadeOnHover: true, isUploaded: !!fileInfo.isUploaded, placeHolder: function(_a3) {
          var style = _a3.style;
          if (fileInfo.mimeType && isGif(fileInfo.mimeType))
            return import_react33.default.createElement(ImagePlaceholder.GIF, { style });
          return import_react33.default.createElement(ImagePlaceholder.Default, { style });
        }, defaultComponent: import_react33.default.createElement(ImagePlaceholder.LoadError, null) })
      );
    }))
  ) : import_react33.default.createElement(import_react33.default.Fragment, null);
}
var ImagePlaceholder = {
  Default: function(_a) {
    var style = _a.style;
    return import_react33.default.createElement(
      "div",
      { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder", style },
      import_react33.default.createElement(Icon, { type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH, height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH })
    );
  },
  GIF: function(_a) {
    var style = _a.style;
    return import_react33.default.createElement(
      "div",
      { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder", style },
      import_react33.default.createElement(
        "div",
        { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder__icon" },
        import_react33.default.createElement(Icon, { type: IconTypes.GIF, fillColor: IconColors.THUMBNAIL_ICON, width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH, height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH })
      )
    );
  },
  LoadError: function() {
    return import_react33.default.createElement(
      "div",
      { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder" },
      import_react33.default.createElement(Icon, { type: IconTypes.THUMBNAIL_NONE, fillColor: IconColors.ON_BACKGROUND_2, width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH, height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH })
    );
  }
};
function useThreadMessageKindKeySelector(_a) {
  var threadMessageKind = _a.threadMessageKind, isMobile = _a.isMobile;
  var threadMessageKindKey = (0, import_react33.useMemo)(function() {
    return K(threadMessageKind).with(ThreadMessageKind.PARENT, function() {
      return isMobile ? "THREAD_PARENT_MOBILE" : "THREAD_PARENT_WEB";
    }).with(ThreadMessageKind.CHILD, function() {
      return isMobile ? "THREAD_CHILD_MOBILE" : "THREAD_CHILD_WEB";
    }).otherwise(function() {
      return isMobile ? "CHAT_MOBILE" : "CHAT_WEB";
    });
  }, [isMobile, threadMessageKind]);
  return threadMessageKindKey;
}
var useFileInfoListWithUploaded = function(message) {
  var _a, _b;
  var blobHandler = (0, import_react33.useRef)(/* @__PURE__ */ new Map());
  var getObjectURL = function(index, blob) {
    if (!blobHandler.current.has(index) && blob)
      blobHandler.current.set(index, URL.createObjectURL(blob));
    return blobHandler.current.get(index);
  };
  var revokeURLs = function() {
    if (blobHandler.current.size > 0) {
      blobHandler.current.forEach(function(url) {
        return URL.revokeObjectURL(url);
      });
      blobHandler.current.clear();
    }
  };
  (0, import_react33.useEffect)(function() {
    return function() {
      return revokeURLs();
    };
  }, []);
  if (!message || !message.isMultipleFilesMessage || !message.isMultipleFilesMessage()) {
    return [];
  } else if (message.sendingStatus === W.SUCCEEDED) {
    revokeURLs();
    return message.fileInfoList.map(function(it) {
      var _a2, _b2;
      return __assign(__assign({}, it), { url: it.url, isUploaded: true, mimeType: (_a2 = it.mimeType) !== null && _a2 !== void 0 ? _a2 : void 0, fileName: (_b2 = it.fileName) !== null && _b2 !== void 0 ? _b2 : void 0 });
    });
  } else {
    return (_b = (_a = message === null || message === void 0 ? void 0 : message.messageParams) === null || _a === void 0 ? void 0 : _a.fileInfoList.map(function(it, index) {
      var _a2, _b2;
      return __assign(__assign({}, it), { url: (_b2 = (_a2 = getObjectURL(index)) !== null && _a2 !== void 0 ? _a2 : it.fileUrl) !== null && _b2 !== void 0 ? _b2 : it.file instanceof Blob ? getObjectURL(index, it.file) : void 0, isUploaded: !it.file && typeof it.fileUrl === "string" && it.fileUrl.length > 0 });
    })) !== null && _b !== void 0 ? _b : [];
  }
};

// node_modules/@sendbird/uikit-react/ui/VoiceMessageItemBody.js
var import_react37 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ProgressBar.js
var import_react34 = __toESM(require_react(), 1);
var ProgressBarColorTypes = {
  PRIMARY: "progress-bar-color--primary",
  GRAY: "progress-bar-color--gray"
};
var ProgressBar = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, maxSize = _a.maxSize, _d = _a.currentSize, currentSize = _d === void 0 ? 0 : _d, _e = _a.colorType, colorType = _e === void 0 ? ProgressBarColorTypes.PRIMARY : _e;
  var width = (0, import_react34.useMemo)(function() {
    return "".concat(currentSize / maxSize * 100, "%");
  }, [currentSize, maxSize]);
  return import_react34.default.createElement(
    "div",
    { className: classnames("sendbird-progress-bar", className, colorType, disabled && "progress-bar--disabled") },
    import_react34.default.createElement("div", { className: "sendbird-progress-bar__fill", style: { width } })
  );
};

// node_modules/@sendbird/uikit-react/VoicePlayer/useVoicePlayer.js
var import_react35 = __toESM(require_react(), 1);
var import_react_dom9 = __toESM(require_react_dom(), 1);
var useVoicePlayer = function(_a) {
  var _b;
  var _c = _a.key, key = _c === void 0 ? "" : _c, _d = _a.channelUrl, channelUrl = _d === void 0 ? "" : _d, audioFile = _a.audioFile, _e = _a.audioFileUrl, audioFileUrl = _e === void 0 ? "" : _e, _f = _a.audioFileMimeType, audioFileMimeType = _f === void 0 ? VOICE_MESSAGE_MIME_TYPE : _f;
  var groupKey = generateGroupKey(channelUrl, key);
  var _g = useVoicePlayerContext(), play = _g.play, pause = _g.pause, stop = _g.stop, voicePlayerStore = _g.voicePlayerStore;
  var isRecordable = useVoiceRecorderContext().isRecordable;
  var currentAudioUnit = ((_b = voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : voicePlayerStore.audioStorage) === null || _b === void 0 ? void 0 : _b[groupKey]) || AudioUnitDefaultValue();
  var playVoicePlayer = function() {
    if (!isRecordable) {
      play === null || play === void 0 ? void 0 : play({
        groupKey,
        audioFile,
        audioFileUrl,
        audioFileMimeType
      });
    }
  };
  var pauseVoicePlayer = function() {
    pause === null || pause === void 0 ? void 0 : pause(groupKey);
  };
  var stopVoicePlayer = function(text2) {
    if (text2 === void 0) {
      text2 = "";
    }
    stop === null || stop === void 0 ? void 0 : stop(text2);
  };
  (0, import_react35.useEffect)(function() {
    return function() {
      var _a2;
      if (audioFile || audioFileUrl) {
        var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);
        (_a2 = voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : voiceAudioPlayerElement.pause) === null || _a2 === void 0 ? void 0 : _a2.call(voiceAudioPlayerElement);
      }
    };
  }, []);
  return {
    play: playVoicePlayer,
    pause: pauseVoicePlayer,
    stop: stopVoicePlayer,
    /**
     * The reason why we multiply this by *1000 is,
     * The unit of playbackTime and duration should be millisecond
     */
    playbackTime: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.playbackTime) || 0) * 1e3,
    duration: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.duration) || 0) * 1e3,
    playingStatus: currentAudioUnit.playingStatus
  };
};

// node_modules/@sendbird/uikit-react/ui/PlaybackTime.js
var import_react36 = __toESM(require_react(), 1);
var PlaybackTime = function(_a) {
  var className = _a.className, _b = _a.time, time = _b === void 0 ? 0 : _b, _c = _a.labelType, labelType = _c === void 0 ? LabelTypography.CAPTION_2 : _c, _d = _a.labelColor, labelColor = _d === void 0 ? LabelColors.ONCONTENT_1 : _d;
  var naturalTime = time < 0 ? 0 : time;
  var hour = Math.floor(naturalTime / 36e5);
  var min = Math.floor(naturalTime % 36e5 / 6e4);
  var sec = Math.floor(naturalTime % 36e5 % 6e4 / 1e3);
  return import_react36.default.createElement(
    "div",
    { className: "sendbird-ui-play-time ".concat(className) },
    import_react36.default.createElement(Label, { type: labelType, color: labelColor }, "".concat(hour ? hour + ":" : "").concat(min < 10 ? "0" : "").concat(min ? min : "0", ":").concat(sec < 10 ? "0" : "").concat(sec))
  );
};

// node_modules/@sendbird/uikit-react/ui/VoiceMessageItemBody.js
var import_react_dom10 = __toESM(require_react_dom(), 1);
var VoiceMessageItemBody = function(_a) {
  var _b;
  var className = _a.className, message = _a.message, channelUrl = _a.channelUrl, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.isReactionEnabled, isReactionEnabled = _d === void 0 ? false : _d;
  var _e = (0, import_react37.useState)(false), usingReaction = _e[0], setUsingReaction = _e[1];
  var _f = useVoicePlayer({
    channelUrl,
    key: "".concat(message === null || message === void 0 ? void 0 : message.messageId),
    audioFileUrl: message === null || message === void 0 ? void 0 : message.url,
    audioFileMimeType: message === null || message === void 0 ? void 0 : message.type
  }), play = _f.play, pause = _f.pause, _g = _f.playbackTime, playbackTime = _g === void 0 ? 0 : _g, duration = _f.duration, _h = _f.playingStatus, playingStatus = _h === void 0 ? VOICE_PLAYER_STATUS.IDLE : _h;
  (0, import_react37.useEffect)(function() {
    var _a2;
    if (isReactionEnabled && ((_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.length) > 0) {
      setUsingReaction(true);
    } else {
      setUsingReaction(false);
    }
  }, [isReactionEnabled, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);
  var progressBarMaxSize = (0, import_react37.useMemo)(function() {
    var _a2;
    var DEFAULT_MAX_SIZE = 1;
    if (message === null || message === void 0 ? void 0 : message.metaArrays) {
      var duration_1 = (_a2 = message === null || message === void 0 ? void 0 : message.metaArrays.find(function(metaArray) {
        return metaArray.key === "KEY_VOICE_MESSAGE_DURATION";
      })) === null || _a2 === void 0 ? void 0 : _a2.value[0];
      return duration_1 ? parseInt(duration_1) : DEFAULT_MAX_SIZE;
    }
    return DEFAULT_MAX_SIZE;
  }, [message === null || message === void 0 ? void 0 : message.metaArrays]);
  return import_react37.default.createElement(
    "div",
    { className: classnames("sendbird-voice-message-item-body", className, usingReaction && "is-reactions-contained") },
    import_react37.default.createElement(ProgressBar, { className: "sendbird-voice-message-item-body__progress-bar", maxSize: duration || progressBarMaxSize, currentSize: playbackTime, colorType: isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY }),
    import_react37.default.createElement(
      "div",
      { className: "sendbird-voice-message-item-body__status-button" },
      (playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && import_react37.default.createElement(
        "div",
        { className: "sendbird-voice-message-item-body__status-button__button", onClick: play },
        import_react37.default.createElement(Icon, { width: "18px", height: "18px", type: IconTypes.PLAY, fillColor: IconColors.PRIMARY })
      ),
      playingStatus === VOICE_PLAYER_STATUS.PREPARING && import_react37.default.createElement(
        Loader,
        { width: "22.2px", height: "22.2px" },
        import_react37.default.createElement(Icon, { width: "22.2px", height: "22.2px", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY_2 })
      ),
      playingStatus === VOICE_PLAYER_STATUS.PLAYING && import_react37.default.createElement(
        "div",
        { className: "sendbird-voice-message-item-body__status-button__button", onClick: function() {
          pause();
        } },
        import_react37.default.createElement(
          "div",
          { className: "sendbird-voice-message-item-body__status-button__button__pause" },
          import_react37.default.createElement("div", { className: "sendbird-voice-message-item-body__status-button__button__pause__inner" }),
          import_react37.default.createElement("div", { className: "sendbird-voice-message-item-body__status-button__button__pause__inner" })
        )
      )
    ),
    import_react37.default.createElement(PlaybackTime, { className: "sendbird-voice-message-item-body__playback-time", time: progressBarMaxSize - playbackTime, labelType: LabelTypography.BODY_1, labelColor: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 })
  );
};

// node_modules/@sendbird/uikit-react/ui/ThumbnailMessageItemBody.js
var import_react38 = __toESM(require_react(), 1);
function ThumbnailMessageItemBody(_a) {
  var _b, _c;
  var _d = _a.className, className = _d === void 0 ? "" : _d, message = _a.message, _e = _a.isByMe, isByMe = _e === void 0 ? false : _e, _f = _a.mouseHover, mouseHover = _f === void 0 ? false : _f, _g = _a.isReactionEnabled, isReactionEnabled = _g === void 0 ? false : _g, _h = _a.showFileViewer, showFileViewer = _h === void 0 ? noop : _h, _j = _a.style, style = _j === void 0 ? {} : _j;
  var thumbnailUrl = getMessageFirstFileThumbnailUrl(message);
  var _k = (0, import_react38.useState)(false), imageRendered = _k[0], setImageRendered = _k[1];
  var onClickHandler = useLongPress({
    onLongPress: noop,
    onClick: function() {
      if (isSentMessage(message)) {
        showFileViewer === null || showFileViewer === void 0 ? void 0 : showFileViewer(true);
      }
    }
  });
  return import_react38.default.createElement(
    "div",
    __assign({ className: getClassName([
      className,
      "sendbird-thumbnail-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_c = (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) > 0 ? "reactions" : ""
    ]) }, onClickHandler),
    import_react38.default.createElement(ImageRenderer, { className: "sendbird-thumbnail-message-item-body__thumbnail", url: thumbnailUrl || getMessageFirstFileUrl(message), alt: getMessageFirstFileType(message), width: (style === null || style === void 0 ? void 0 : style.width) || "360px", height: (style === null || style === void 0 ? void 0 : style.height) || "270px", onLoad: function() {
      setImageRendered(true);
    }, placeHolder: function(_a2) {
      var style2 = _a2.style;
      return import_react38.default.createElement("div", { className: "sendbird-thumbnail-message-item-body__placeholder", style: style2 });
    } }),
    isVideoMessage(message) && !thumbnailUrl && !imageRendered && import_react38.default.createElement(
      "video",
      { className: "sendbird-thumbnail-message-item-body__video" },
      import_react38.default.createElement("source", { src: getMessageFirstFileUrl(message), type: getMessageFirstFileType(message) })
    ),
    import_react38.default.createElement("div", { className: "sendbird-thumbnail-message-item-body__image-cover" }),
    (isVideoMessage(message) || isGifMessage(message)) && import_react38.default.createElement(
      "div",
      { className: "sendbird-thumbnail-message-item-body__icon-wrapper" },
      import_react38.default.createElement(
        "div",
        { className: "sendbird-thumbnail-message-item-body__icon-wrapper__icon" },
        import_react38.default.createElement(Icon, { type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF, fillColor: IconColors.THUMBNAIL_ICON, width: "34px", height: "34px" })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/UnknownMessageItemBody.js
var import_react39 = __toESM(require_react(), 1);
function UnknownMessageItemBody(_a) {
  var _b;
  var className = _a.className, message = _a.message, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.mouseHover, mouseHover = _d === void 0 ? false : _d, _e = _a.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e;
  var stringSet = (0, import_react39.useContext)(LocalizationContext).stringSet;
  return import_react39.default.createElement(
    "div",
    { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-unknown-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? "reactions" : ""
    ]) },
    import_react39.default.createElement(Label, { className: "sendbird-unknown-message-item-body__header", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE),
    import_react39.default.createElement(Label, { className: "sendbird-unknown-message-item-body__description", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE)
  );
}

// node_modules/@sendbird/uikit-react/ui/TemplateMessageItemBody.js
var import_react43 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CbTjJHLv.js
var import_react40 = __toESM(require_react(), 1);
var ComponentType;
(function(ComponentType2) {
  ComponentType2["Box"] = "box";
  ComponentType2["Text"] = "text";
  ComponentType2["Image"] = "image";
  ComponentType2["TextButton"] = "textButton";
  ComponentType2["ImageButton"] = "imageButton";
})(ComponentType || (ComponentType = {}));
var CompositeComponentType;
(function(CompositeComponentType2) {
  CompositeComponentType2["Carousel"] = "carouselView";
})(CompositeComponentType || (CompositeComponentType = {}));
var MAPPER = () => void 0;
var createParser = (params) => {
  const defaultMapper = (params === null || params === void 0 ? void 0 : params.defaultMapper) || MAPPER;
  const mapper = {
    defaultMapper,
    mapBoxProps: (params === null || params === void 0 ? void 0 : params.mapBoxProps) || defaultMapper,
    mapTextProps: (params === null || params === void 0 ? void 0 : params.mapTextProps) || defaultMapper,
    mapImageProps: (params === null || params === void 0 ? void 0 : params.mapImageProps) || defaultMapper,
    mapTextButtonProps: (params === null || params === void 0 ? void 0 : params.mapTextButtonProps) || defaultMapper,
    mapImageButtonProps: (params === null || params === void 0 ? void 0 : params.mapImageButtonProps) || defaultMapper,
    mapCarouselProps: (params === null || params === void 0 ? void 0 : params.mapCarouselProps) || defaultMapper
  };
  return {
    parse(item, options) {
      switch (item.type) {
        case ComponentType.Box: {
          return { properties: mapper.mapBoxProps(item, options) };
        }
        case ComponentType.Text: {
          return { properties: mapper.mapTextProps(item, options) };
        }
        case ComponentType.Image: {
          return { properties: mapper.mapImageProps(item, options) };
        }
        case ComponentType.TextButton: {
          return { properties: mapper.mapTextButtonProps(item, options) };
        }
        case ComponentType.ImageButton: {
          return { properties: mapper.mapImageButtonProps(item, options) };
        }
        case CompositeComponentType.Carousel: {
          return { properties: mapper.mapCarouselProps(item, options) };
        }
        default:
          return { properties: void 0 };
      }
    }
  };
};
var FRAGMENT = ({ children }) => import_react40.default.createElement(import_react40.default.Fragment, null, children);
function createRenderer(params) {
  var _a, _b, _c, _d, _e, _f;
  return {
    box: ((_a = params === null || params === void 0 ? void 0 : params.views) === null || _a === void 0 ? void 0 : _a.box) || FRAGMENT,
    text: ((_b = params === null || params === void 0 ? void 0 : params.views) === null || _b === void 0 ? void 0 : _b.text) || FRAGMENT,
    image: ((_c = params === null || params === void 0 ? void 0 : params.views) === null || _c === void 0 ? void 0 : _c.image) || FRAGMENT,
    imageButton: ((_d = params === null || params === void 0 ? void 0 : params.views) === null || _d === void 0 ? void 0 : _d.imageButton) || FRAGMENT,
    textButton: ((_e = params === null || params === void 0 ? void 0 : params.views) === null || _e === void 0 ? void 0 : _e.textButton) || FRAGMENT,
    carouselView: ((_f = params === null || params === void 0 ? void 0 : params.views) === null || _f === void 0 ? void 0 : _f.carouselView) || FRAGMENT
  };
}
var __rest$4 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var SizeContext = (0, import_react40.createContext)({
  sizes: {},
  updateSize: () => {
  }
});
var SizeContextProvider = ({ children }) => {
  const [sizes, setSizes] = (0, import_react40.useState)({});
  const updateSize = (0, import_react40.useCallback)((_a) => {
    var { id } = _a, rest = __rest$4(_a, ["id"]);
    if (id) {
      setSizes((prevSizes) => Object.assign(Object.assign({}, prevSizes), { [id]: rest }));
    }
  }, []);
  return import_react40.default.createElement(SizeContext.Provider, { value: { sizes, updateSize } }, children);
};
var useSizeContext = () => (0, import_react40.useContext)(SizeContext);
var Layout;
(function(Layout2) {
  Layout2["Row"] = "row";
  Layout2["Column"] = "column";
})(Layout || (Layout = {}));
var AlignValue;
(function(AlignValue2) {
  AlignValue2["Center"] = "center";
  AlignValue2["Left"] = "left";
  AlignValue2["Right"] = "right";
  AlignValue2["Top"] = "top";
  AlignValue2["Bottom"] = "bottom";
})(AlignValue || (AlignValue = {}));
var FlexSizeSpecValue;
(function(FlexSizeSpecValue2) {
  FlexSizeSpecValue2[FlexSizeSpecValue2["FillParent"] = 0] = "FillParent";
  FlexSizeSpecValue2[FlexSizeSpecValue2["WrapContent"] = 1] = "WrapContent";
})(FlexSizeSpecValue || (FlexSizeSpecValue = {}));
var FontWeight;
(function(FontWeight2) {
  FontWeight2["Normal"] = "normal";
  FontWeight2["Bold"] = "bold";
})(FontWeight || (FontWeight = {}));
var MediaContentMode;
(function(MediaContentMode2) {
  MediaContentMode2["AspectFit"] = "aspectFit";
  MediaContentMode2["AspectFill"] = "aspectFill";
  MediaContentMode2["ScalesToFill"] = "scalesToFill";
})(MediaContentMode || (MediaContentMode = {}));
var SUPPORTED_TEMPLATE_VERSIONS = [
  1,
  2
  // Composite templates: Carousel
];
var alignInFlex = (align) => {
  switch (align) {
    case AlignValue.Right:
    case AlignValue.Bottom:
      return "flex-end";
    case AlignValue.Center:
      return "center";
    case AlignValue.Left:
    case AlignValue.Top:
    default:
      return "flex-start";
  }
};
var isTemplateVersionSupported = (templateVersion) => {
  if (!templateVersion)
    return true;
  return SUPPORTED_TEMPLATE_VERSIONS.includes(templateVersion);
};
var memoize = (fn) => {
  const cache = /* @__PURE__ */ new Map();
  const cached = function(val) {
    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);
  };
  cached.cache = cache;
  return cached;
};
var setTemplateItemId = memoize((data) => {
  const addIdRecursively = (item, id) => {
    if ("items" in item && (item === null || item === void 0 ? void 0 : item.items) != null) {
      item.items.forEach((subItem, subIdx) => {
        const subId = `${id}-${subIdx}`;
        subItem.id = subId;
        addIdRecursively(subItem, subId);
      });
    }
  };
  data.forEach((item, idx) => {
    const id = `${idx}`;
    item.id = id;
    addIdRecursively(item, id);
  });
  return data;
});
var defaultProperties = {
  rootLayout: Layout.Column,
  view: {
    size: {
      width: { type: "flex", value: FlexSizeSpecValue.FillParent },
      height: { type: "flex", value: FlexSizeSpecValue.WrapContent }
    }
  },
  box: {
    layout: Layout.Row,
    align: { vertical: AlignValue.Top, horizontal: AlignValue.Left }
  }
};
var createMessageTemplate = (opts) => {
  const Container = opts.Container || import_react40.default.Fragment;
  const UnknownMessage = opts.UnknownMessage || (() => null);
  const parser2 = opts.parser || createParser();
  const renderer2 = opts.renderer || createRenderer();
  const MessageTemplateBase = ({ templateItems, parentLayout = defaultProperties.box.layout, isRoot = false }) => {
    const renderItems = templateItems;
    return import_react40.default.createElement(import_react40.default.Fragment, null, renderItems.map((item, index, siblings) => {
      const { properties } = parser2.parse(item, { parentLayout, elemIdx: index, siblings });
      const props = {
        key: index,
        parentLayout,
        parsedProperties: properties,
        siblings
      };
      switch (item.type) {
        case CompositeComponentType.Carousel: {
          if (!isRoot) {
            throw new Error("Cannot parse template item as Carousel if the template item is not the root.");
          }
          if (!item.items || !Array.isArray(item.items) || item.items.length === 0) {
            throw new Error("Cannot parse template item as Carousel if carousel has no items.");
          }
          return import_react40.default.createElement(renderer2.carouselView, Object.assign({}, item, props), item.items.map((items, index2) => import_react40.default.createElement(MessageTemplateBase, { key: index2, templateItems: items || [], parentLayout })));
        }
        case ComponentType.Box: {
          return import_react40.default.createElement(
            renderer2.box,
            Object.assign({}, item, props),
            import_react40.default.createElement(MessageTemplateBase, { templateItems: item.items || [], parentLayout: item.layout })
          );
        }
        case ComponentType.Text: {
          return import_react40.default.createElement(renderer2.text, Object.assign({}, item, props));
        }
        case ComponentType.Image: {
          return import_react40.default.createElement(renderer2.image, Object.assign({}, item, props));
        }
        case ComponentType.TextButton: {
          return import_react40.default.createElement(renderer2.textButton, Object.assign({}, item, props));
        }
        case ComponentType.ImageButton: {
          return import_react40.default.createElement(renderer2.imageButton, Object.assign({}, item, props));
        }
        default: {
          return import_react40.default.createElement(UnknownMessage, { item });
        }
      }
    }));
  };
  return {
    MessageTemplate: ({ parentLayout = defaultProperties.rootLayout, templateVersion, templateItems }) => {
      const items = setTemplateItemId(templateItems);
      if (!isTemplateVersionSupported(templateVersion)) {
        throw new Error(`Cannot parse template item due to unsupported template version: ${templateVersion}, ${SUPPORTED_TEMPLATE_VERSIONS}`);
      }
      let isCarousel = false;
      if (Array.isArray(items) && items.length > 0) {
        isCarousel = items[0].type === CompositeComponentType.Carousel;
      }
      return import_react40.default.createElement(
        SizeContextProvider,
        null,
        import_react40.default.createElement(
          Container,
          { className: isCarousel ? "sb-message-template__parent_for_carousel" : "" },
          import_react40.default.createElement(MessageTemplateBase, { parentLayout, templateItems: items, isRoot: true })
        )
      );
    },
    MessageTemplateBase
  };
};
var ActionType;
(function(ActionType2) {
  ActionType2["Web"] = "web";
  ActionType2["Custom"] = "custom";
  ActionType2["UIKit"] = "uikit";
})(ActionType || (ActionType = {}));
({
  version: 1,
  body: {
    items: [
      {
        type: ComponentType.Image,
        action: { type: ActionType.Web, data: "https://docs.sendbird.com" },
        height: { type: "fixed", value: 236 },
        viewStyle: {
          padding: {
            left: 4,
            right: 4,
            top: 4,
            bottom: 4
          }
        },
        imageUrl: "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
        imageStyle: { contentMode: MediaContentMode.AspectFill }
      },
      {
        type: ComponentType.Box,
        layout: Layout.Column,
        width: { type: "flex", value: FlexSizeSpecValue.FillParent },
        height: { type: "fixed", value: 200 },
        items: [
          {
            type: ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "flex", value: FlexSizeSpecValue.FillParent },
            viewStyle: { backgroundColor: "#fa6464" }
          },
          {
            type: ComponentType.Box,
            layout: Layout.Column,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "flex", value: FlexSizeSpecValue.WrapContent },
            viewStyle: { backgroundColor: "#ffaf5c" },
            items: [
              {
                type: ComponentType.Text,
                text: "Message",
                align: { horizontal: AlignValue.Center, vertical: AlignValue.Center },
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                height: { type: "fixed", value: 50 }
              },
              {
                type: ComponentType.Image,
                action: { type: ActionType.Web, data: "https://docs.sendbird.com" },
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                height: { type: "fixed", value: 50 },
                imageUrl: "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
                imageStyle: { contentMode: MediaContentMode.AspectFill }
              }
            ]
          },
          {
            type: ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "fixed", value: 20 },
            viewStyle: { backgroundColor: "#ffe450" }
          },
          {
            type: ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "flex", value: FlexSizeSpecValue.FillParent },
            viewStyle: { backgroundColor: "#329a1b" }
          }
        ]
      },
      {
        type: ComponentType.Box,
        viewStyle: { padding: { top: 12, bottom: 12, left: 12, right: 12 } },
        layout: Layout.Column,
        items: [
          {
            type: ComponentType.Box,
            align: { horizontal: AlignValue.Left, vertical: AlignValue.Center },
            layout: Layout.Row,
            viewStyle: {
              borderWidth: 1,
              borderColor: "#72723f"
            },
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "fixed", value: 150 },
            items: [
              {
                type: ComponentType.Text,
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                height: { type: "fixed", value: 50 },
                text: "Sample1 text",
                maxTextLines: 1,
                align: { vertical: AlignValue.Center, horizontal: AlignValue.Left },
                viewStyle: {
                  backgroundColor: "#cc4400"
                },
                textStyle: {
                  size: 16,
                  color: "#f8f8f8",
                  weight: FontWeight.Bold
                }
              },
              {
                type: ComponentType.ImageButton,
                action: { type: ActionType.UIKit, data: "uikit://delete" },
                width: { type: "fixed", value: 20 },
                height: { type: "fixed", value: 20 },
                imageUrl: "https://file-ap-1.sendbird.com/5b5379aa73fd460da22ffaf9a61d0d7f.png",
                imageStyle: { contentMode: MediaContentMode.AspectFit }
              }
            ]
          },
          {
            type: ComponentType.Text,
            viewStyle: { padding: { top: 6, bottom: 12, left: 0, right: 0 } },
            text: "Esse eu esse duis ipsum et dolor eu ut sit amet consectetur cillum velit officia. Ex adipisicing elit quis ea sit. Occaecat in eu aliqua nulla magna id ut excepteur minim.",
            maxTextLines: 2,
            textStyle: { size: 14, color: "#e10000" },
            width: { type: "fixed", value: 200 },
            height: { type: "fixed", value: 50 }
          },
          {
            type: ComponentType.TextButton,
            action: { type: ActionType.Web, data: "https://www.daum.net" },
            text: "Button 3",
            textStyle: { size: 14, color: "#742ddd", weight: FontWeight.Bold }
          }
        ]
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "type": ComponentType.Image,
        "action": { "type": ActionType.Web, "data": "https://www.naver.com/" },
        "height": { "type": "fixed", "value": 136 },
        "imageUrl": "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
        "imageStyle": { "contentMode": MediaContentMode.AspectFill }
      },
      {
        "type": ComponentType.Box,
        "viewStyle": { "padding": { "top": 12, "bottom": 12, "left": 12, "right": 12 }, backgroundColor: "#cccccc" },
        "layout": Layout.Column,
        width: { type: "flex", value: FlexSizeSpecValue.FillParent },
        "items": [
          {
            "type": ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            "layout": Layout.Row,
            "items": [
              {
                "type": ComponentType.TextButton,
                "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                width: { type: "fixed", value: 150 },
                "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 0, "right": 4 } },
                "text": "Button 2",
                "textStyle": { "size": 14, "weight": FontWeight.Bold }
              },
              {
                "type": ComponentType.TextButton,
                "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 4, "right": 0 } },
                "text": "Button 3",
                "textStyle": { "size": 14, "weight": FontWeight.Bold }
              }
            ]
          },
          {
            "type": ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            "layout": Layout.Row,
            "items": [
              {
                "type": ComponentType.Text,
                "text": "Sample2 text",
                "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
                "maxTextLines": 1,
                "textStyle": { "size": 16, "weight": FontWeight.Bold }
              },
              {
                "type": ComponentType.ImageButton,
                "action": { "type": ActionType.UIKit, "data": "uikit://delete" },
                "width": { "type": "fixed", "value": 20 },
                "height": { "type": "fixed", "value": 20 },
                "imageUrl": "https://file-ap-1.sendbird.com/5b5379aa73fd460da22ffaf9a61d0d7f.png",
                "imageStyle": { "contentMode": MediaContentMode.AspectFit }
              }
            ]
          },
          {
            "type": ComponentType.Text,
            "viewStyle": { "padding": { "top": 6, "bottom": 12, "left": 0, "right": 0 } },
            "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aui",
            "textStyle": { "size": 14 }
          }
        ]
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "type": ComponentType.Box,
        "viewStyle": { "backgroundColor": "#ffffff", "borderWidth": 1, "borderColor": "#eeeeee", "radius": 16 },
        "layout": Layout.Column,
        "items": [
          {
            "type": ComponentType.Image,
            "height": { "type": "fixed", "value": 200 },
            "imageUrl": "https://img.freepik.com/free-vector/cartoon-happy-hours-background_52683-81243.jpg?w=2000&t=st=1666689198~exp=1666689798~hmac=23109d44ba03deee7aee069cbeebfcb48fa27f85e53c1cafc5d5d7345f1a2041",
            "imageStyle": { "contentMode": MediaContentMode.AspectFill }
          },
          {
            "type": ComponentType.Box,
            "viewStyle": { "padding": { "top": 15, "bottom": 15, "left": 15, "right": 15 } },
            "layout": Layout.Column,
            "items": [
              {
                "type": ComponentType.Text,
                "text": "Don't miss these deals today",
                "maxTextLines": 1,
                "textStyle": { "size": 20, "color": "#e10000", "weight": FontWeight.Bold }
              },
              {
                "type": ComponentType.Text,
                "viewStyle": { "margin": { "top": 5, "bottom": 0, "left": 0, "right": 0 } },
                "text": "Pay with Maya and get cashback!",
                "maxTextLines": 1,
                "textStyle": { "size": 14, "color": "#e10000" }
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Image,
                    "width": { "type": "fixed", "value": 50 },
                    "height": { "type": "fixed", "value": 50 },
                    "viewStyle": {
                      "backgroundColor": "#ffffff",
                      "borderWidth": 1,
                      "borderColor": "#eeeeee",
                      "radius": 25
                    },
                    "imageUrl": "https://yt3.ggpht.com/ytc/AMLnZu8Kg89ymE7qt5bsS9vMqi9h2aHiN6m9ID-IgxR6-Q=s900-c-k-c0x00ffffff-no-rj",
                    "imageStyle": { "contentMode": MediaContentMode.AspectFill }
                  },
                  {
                    "type": ComponentType.Box,
                    "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                    "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 15, "right": 0 } },
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "Meralco",
                        "maxTextLines": 1,
                        "textStyle": { "size": 16, "color": "#e10000", "weight": FontWeight.Bold }
                      },
                      {
                        "type": ComponentType.Text,
                        "viewStyle": { "margin": { "top": 3, "bottom": 0, "left": 0, "right": 0 } },
                        "text": "30% cashback, P300 min spend",
                        "maxTextLines": 1,
                        "textStyle": { "size": 12, "color": "#610000", "weight": FontWeight.Bold }
                      }
                    ]
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Image,
                    "width": { "type": "fixed", "value": 50 },
                    "height": { "type": "fixed", "value": 50 },
                    "viewStyle": {
                      "backgroundColor": "#ffffff",
                      "borderWidth": 1,
                      "borderColor": "#eeeeee",
                      "radius": 25
                    },
                    "imageUrl": "https://1000logos.net/wp-content/uploads/2021/12/Globe-Telecom-logo.png",
                    "imageStyle": { "contentMode": MediaContentMode.AspectFill, tintColor: "#a49a9a" }
                  },
                  {
                    "type": ComponentType.Box,
                    "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                    "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 15, "right": 0 } },
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "Globe",
                        "maxTextLines": 1,
                        "textStyle": { "size": 16, "color": "#e10000", "weight": FontWeight.Bold }
                      },
                      {
                        "type": ComponentType.Text,
                        "viewStyle": { "margin": { "top": 3, "bottom": 0, "left": 0, "right": 0 } },
                        "text": "30% cashback, P300 min spend",
                        "maxTextLines": 1,
                        "textStyle": { "size": 12, "color": "#610000", "weight": FontWeight.Bold }
                      }
                    ]
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Image,
                    "width": { "type": "fixed", "value": 50 },
                    "height": { "type": "fixed", "value": 50 },
                    "viewStyle": {
                      "backgroundColor": "#ffffff",
                      "borderWidth": 1,
                      "borderColor": "#eeeeee",
                      "radius": 25
                    },
                    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Cignal.svg/640px-Cignal.svg.png",
                    "imageStyle": { "contentMode": MediaContentMode.AspectFill }
                  },
                  {
                    "type": ComponentType.Box,
                    "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                    "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 15, "right": 0 } },
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "Cignal",
                        "maxTextLines": 1,
                        "textStyle": { "size": 16, "color": "#e10000", "weight": FontWeight.Bold }
                      },
                      {
                        "type": ComponentType.Text,
                        "viewStyle": { "margin": { "top": 3, "bottom": 0, "left": 0, "right": 0 } },
                        "text": "30% cashback, P300 min spend",
                        "maxTextLines": 1,
                        "textStyle": { "size": 12, "color": "#610000", "weight": FontWeight.Bold }
                      }
                    ]
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.TextButton,
                    "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                    "viewStyle": {
                      "backgroundColor": "#e0e0e0",
                      "radius": 16,
                      "margin": { "top": 0, "bottom": 0, "left": 0, "right": 4 },
                      "padding": { "top": 12, "bottom": 12, "left": 12, "right": 12 }
                    },
                    "text": "Learn more",
                    "textStyle": { "size": 15, "color": "#e10000", "weight": FontWeight.Bold }
                  },
                  {
                    "type": ComponentType.TextButton,
                    "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                    "viewStyle": {
                      "backgroundColor": "#e10000",
                      "radius": 16,
                      "margin": { "top": 0, "bottom": 0, "left": 4, "right": 0 },
                      "padding": { "top": 12, "bottom": 12, "left": 12, "right": 12 }
                    },
                    "text": "Pay now",
                    "textStyle": { "size": 15, "color": "#ffffff", "weight": FontWeight.Bold }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "type": ComponentType.Box,
        "layout": Layout.Column,
        "items": [
          {
            "type": ComponentType.Image,
            "imageUrl": "https://static.sendbird.com/sample/profiles/profile_40_512px.png",
            "metaData": {
              "pixelWidth": 512,
              "pixelHeight": 512
            },
            "imageStyle": {
              "tintColor": "#44ff1188"
            },
            viewStyle: {
              "padding": {
                "top": 12,
                "right": 12,
                "bottom": 12,
                "left": 12
              }
            }
          },
          {
            "type": ComponentType.Box,
            "viewStyle": {
              "padding": {
                "top": 12,
                "right": 12,
                "bottom": 12,
                "left": 12
              }
            },
            "layout": Layout.Column,
            "items": [
              {
                "type": ComponentType.Box,
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Box,
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "hi",
                        "maxTextLines": 3,
                        "viewStyle": {
                          "padding": {
                            "top": 0,
                            "bottom": 6,
                            "left": 0,
                            "right": 0
                          }
                        },
                        "textStyle": {
                          "size": 16,
                          "weight": FontWeight.Bold
                        }
                      },
                      {
                        "type": ComponentType.Text,
                        "text": "bye",
                        "maxTextLines": 10,
                        "textStyle": {
                          "size": 14
                        }
                      }
                    ]
                  },
                  {
                    "type": ComponentType.ImageButton,
                    "action": {
                      "type": ActionType.UIKit,
                      "data": "sendbirduikit://delete"
                    },
                    "width": {
                      "type": "fixed",
                      "value": 20
                    },
                    "height": {
                      "type": "fixed",
                      "value": 20
                    },
                    "metaData": {
                      "pixelWidth": 60,
                      "pixelHeight": 60
                    },
                    "imageUrl": "https://dxstmhyqfqr1o.cloudfront.net/sendbird-message-builder/icon-more.png",
                    "imageStyle": {
                      "tintColor": "#ff8d5a"
                    }
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "layout": Layout.Column,
                "items": [
                  {
                    "type": ComponentType.Box,
                    "viewStyle": {
                      "margin": {
                        "top": 16,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                      }
                    },
                    "align": {
                      "horizontal": AlignValue.Left,
                      "vertical": AlignValue.Center
                    },
                    "layout": Layout.Row,
                    "items": [
                      {
                        "type": ComponentType.Image,
                        "imageUrl": "https://ca.slack-edge.com/T0ADCTNEL-ULE240VNV-83fd5776e78e-512",
                        "width": {
                          "type": "fixed",
                          "value": 40
                        },
                        "height": {
                          "type": "fixed",
                          "value": 40
                        },
                        "metaData": {
                          "pixelWidth": 512,
                          "pixelHeight": 512
                        },
                        "viewStyle": {
                          "backgroundColor": "#BDBDBD",
                          "radius": 20
                        },
                        "imageStyle": {
                          "contentMode": MediaContentMode.AspectFill
                        }
                      },
                      {
                        "type": ComponentType.Box,
                        "viewStyle": {
                          "margin": {
                            "top": 0,
                            "bottom": 0,
                            "left": 12,
                            "right": 0
                          }
                        },
                        "layout": Layout.Column,
                        "items": [
                          {
                            "type": ComponentType.Text,
                            "text": "Chongbu",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 16,
                              "weight": FontWeight.Bold
                            }
                          },
                          {
                            "type": ComponentType.Text,
                            "viewStyle": {
                              "margin": {
                                "top": 4,
                                "bottom": 0,
                                "left": 0,
                                "right": 0
                              }
                            },
                            "text": " ",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 14
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": ComponentType.Box,
                    "viewStyle": {
                      "margin": {
                        "top": 16,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                      }
                    },
                    "align": {
                      "horizontal": AlignValue.Left,
                      "vertical": AlignValue.Center
                    },
                    "layout": Layout.Row,
                    "items": [
                      {
                        "type": ComponentType.Image,
                        "imageUrl": "https://ca.slack-edge.com/T0ADCTNEL-U02LA25KY8J-d41a3e8c7554-512",
                        "width": {
                          "type": "fixed",
                          "value": 40
                        },
                        "height": {
                          "type": "fixed",
                          "value": 40
                        },
                        "metaData": {
                          "pixelWidth": 512,
                          "pixelHeight": 512
                        },
                        "viewStyle": {
                          "backgroundColor": "#BDBDBD",
                          "radius": 20
                        },
                        "imageStyle": {
                          "contentMode": MediaContentMode.AspectFill
                        }
                      },
                      {
                        "type": ComponentType.Box,
                        "viewStyle": {
                          "margin": {
                            "top": 0,
                            "bottom": 0,
                            "left": 12,
                            "right": 0
                          }
                        },
                        "layout": Layout.Column,
                        "items": [
                          {
                            "type": ComponentType.Text,
                            "text": "Amanda",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 16,
                              "weight": FontWeight.Bold
                            }
                          },
                          {
                            "type": ComponentType.Text,
                            "viewStyle": {
                              "margin": {
                                "top": 4,
                                "bottom": 0,
                                "left": 0,
                                "right": 0
                              }
                            },
                            "text": "This is title message",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 14
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
});
({
  "version": "1",
  "body": {
    "items": [
      {
        "type": "box",
        "layout": "column",
        height: { type: "fixed", value: 600 },
        "items": [
          {
            "type": "box",
            "layout": "column",
            "viewStyle": { "radius": "8", "padding": { "top": "12", "bottom": "12", "left": "12", "right": "12" } },
            "items": [
              {
                "type": "text",
                "text": "Title text",
                "textStyle": { "color": "#E0000000", "size": "16", "weight": "bold" },
                "maxTextLines": "5",
                "viewStyle": {},
                "action": { "data": "www.naver.com" }
              },
              {
                "type": "text",
                "viewStyle": { "margin": { "top": "8", "right": "0", "bottom": "0", "left": "0" } },
                "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aui",
                "textStyle": { "color": "#E0000000", "size": "14", "weight": "normal" },
                "maxTextLines": "5",
                "action": { "data": "https://www.naver.com" }
              },
              {
                "type": "box",
                "layout": "row",
                "viewStyle": { "margin": { "top": "12", "right": "0", "bottom": "0", "left": "0" } },
                "items": [
                  {
                    "type": "textButton",
                    "viewStyle": {
                      "backgroundColor": "#E0E0E0",
                      "padding": { "top": "10", "bottom": "10", "left": "20", "right": "20" }
                    },
                    "text": "Button 1",
                    "textStyle": { "color": "#742DDD", "size": "14", "weight": "bold" },
                    "maxTextLines": "5",
                    "action": { "data": "www.naver.com" }
                  },
                  {
                    "type": "textButton",
                    "viewStyle": {
                      "backgroundColor": "#E0E0E0",
                      "padding": { "top": "10", "bottom": "10", "left": "20", "right": "20" },
                      "margin": { "left": "8", "right": "0", "top": "0", "bottom": "0" }
                    },
                    "text": "Button 2",
                    "textStyle": { "color": "#742DDD", "size": "14", "weight": "bold" },
                    "maxTextLines": "5",
                    "action": { "data": "https://www.naver.com" }
                  }
                ]
              }
            ],
            "action": { "data": "https://www.naver.com" }
          },
          {
            "type": "image",
            "viewStyle": {},
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "imageStyle": { "contentMode": "aspectFill" },
            "imageUrl": "https://file-preprod.sendbird.com/d03c08bb3f9041a88c1207b6bbf15ab8.png",
            "metaData": { "pixelWidth": "1062", "pixelHeight": "1070" }
          },
          {
            "type": "textButton",
            "viewStyle": {
              "backgroundColor": "#E0E0E0",
              "padding": { "top": "10", "bottom": "10", "left": "20", "right": "20" }
            },
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "text": "Button",
            "textStyle": { "color": "#742DDD", "size": "16", "weight": "normal" },
            "maxTextLines": "5",
            "action": { "data": "www.naver.com" }
          },
          {
            "type": "imageButton",
            "viewStyle": {},
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "imageUrl": "https://file-preprod.sendbird.com/38fdf5c1056f42b89a44b38155cc4b49.jpg",
            "imageStyle": { "contentMode": "aspectFill" },
            "metaData": { "pixelWidth": "1080", "pixelHeight": "2640" },
            "action": { "data": "www.naver.com" }
          }
        ],
        "viewStyle": {}
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "elementId": "root",
        "type": "box",
        "layout": "column",
        "width": {
          "type": "flex",
          "value": FlexSizeSpecValue.FillParent
        },
        "height": {
          "type": "flex",
          "value": FlexSizeSpecValue.WrapContent
        },
        "items": [
          {
            "type": "text",
            "viewStyle": {
              "backgroundColor": "#a0c0ffff",
              "margin": {
                "top": 16,
                "bottom": 16,
                "left": 16,
                "right": 16
              },
              "padding": {
                "top": 16,
                "bottom": 16,
                "left": 16,
                "right": 16
              }
            },
            "text": "Wrap Wrap Wrap Wrap Wrap Wrap Wrap Wrap Wrap Wrap ",
            "textStyle": {
              "size": 14,
              "color": "#222121e0",
              "weight": "normal"
            },
            "maxTextLines": 5,
            "width": {
              "type": "flex",
              "value": FlexSizeSpecValue.FillParent
            },
            "height": {
              "type": "flex",
              "value": 1
            },
            "align": {
              "horizontal": "left",
              "vertical": "top"
            },
            "elementId": "c0e15878-4984-408d-abaa-4b495c2e3872"
          },
          {
            "type": "imageButton",
            "viewStyle": {
              margin: {
                left: 24,
                right: 12
              }
            },
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "fixed", "value": 250 },
            "imageUrl": "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
            "imageStyle": { "contentMode": "aspectFill" },
            "metaData": { "pixelWidth": "1080", "pixelHeight": "2640" },
            "action": { "data": "www.naver.com" }
          }
        ]
      }
    ]
  }
});
var PADDING_WIDTH = 24;
var CONTENT_LEFT_WIDTH = 40;
var SWIPE_THRESHOLD = 15;
var GAP_DEFAULT = 8;
function shouldRenderAsFixed(item) {
  var _a;
  return ((_a = item.props.templateItems[0].width) === null || _a === void 0 ? void 0 : _a.type) === "fixed";
}
function CarouselItem({ item, defaultWidth, marginRight }) {
  const style = shouldRenderAsFixed(item) ? { width: "fit-content" } : { minWidth: defaultWidth, width: "100%" };
  if (marginRight) {
    style["marginRight"] = marginRight;
  }
  return import_react40.default.createElement("div", { style }, item);
}
var Carousel = import_react40.default.memo(({ children, gap = GAP_DEFAULT }) => {
  var _a, _b;
  const carouselRef = (0, import_react40.useRef)(null);
  const screenWidth = window.innerWidth;
  const defaultItemWidth = (_b = (_a = carouselRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : 0;
  const itemWidths = children.map((item) => {
    var _a2;
    if (shouldRenderAsFixed(item)) {
      return Number((_a2 = item.props.templateItems[0].width) === null || _a2 === void 0 ? void 0 : _a2.value);
    }
    return defaultItemWidth;
  });
  const itemPositions = getEachItemPositions();
  const [draggingInfo, setDraggingInfo] = (0, import_react40.useState)({
    scrolling: false,
    dragging: false,
    startPos: null,
    offset: 0,
    translateX: 0,
    currentIndex: 0
  });
  const handleMouseDown = (event) => {
    setDraggingInfo((props) => Object.assign(Object.assign({}, props), { scrolling: false, dragging: true, startPos: {
      x: event.clientX,
      y: event.clientY
    }, offset: 0 }));
  };
  const handleMouseMove = (event) => {
    if (!draggingInfo.dragging || !draggingInfo.startPos)
      return;
    const currentX = event.clientX;
    const newOffset = currentX - draggingInfo.startPos.x;
    setDraggingInfo(Object.assign(Object.assign({}, draggingInfo), { offset: newOffset }));
  };
  const handleMouseUp = () => {
    if (!draggingInfo.dragging)
      return;
    handleDragEnd();
    unblockScroll();
  };
  const blockScroll = () => {
    if (carouselRef.current) {
      carouselRef.current.style.touchAction = "pan-x";
    }
  };
  const unblockScroll = () => {
    if (carouselRef.current) {
      carouselRef.current.style.touchAction = "pan-y";
    }
  };
  const handleTouchStart = (event) => {
    setDraggingInfo((props) => Object.assign(Object.assign({}, props), { scrolling: false, dragging: false, startPos: {
      x: event.touches[0].clientX,
      y: event.touches[0].clientY
    }, offset: 0 }));
  };
  const handleTouchMove = (event) => {
    if (!draggingInfo.startPos || draggingInfo.scrolling)
      return;
    const startPos = draggingInfo.startPos;
    const [touchMoveX, touchMoveY] = [event.touches[0].clientX, event.touches[0].clientY];
    const [deltaX, deltaY] = [Math.abs(touchMoveX - startPos.x), Math.abs(touchMoveY - startPos.y)];
    const newOffset = touchMoveX - startPos.x;
    if (draggingInfo.dragging) {
      if (newOffset === draggingInfo.offset)
        return;
      setDraggingInfo((props) => Object.assign(Object.assign({}, props), { offset: newOffset }));
      return;
    }
    if (deltaY > deltaX) {
      setDraggingInfo((props) => Object.assign(Object.assign({}, props), { scrolling: true }));
    } else {
      blockScroll();
      setDraggingInfo((props) => Object.assign(Object.assign({}, props), { dragging: true, offset: newOffset }));
    }
  };
  const handleTouchEnd = () => {
    if (!draggingInfo.dragging)
      return;
    handleDragEnd();
    unblockScroll();
  };
  const getNewDraggingInfo = ({ translateX, currentIndex, newTranslateX, nextIndex }) => {
    return {
      scrolling: false,
      dragging: false,
      startPos: null,
      offset: 0,
      translateX: newTranslateX !== null && newTranslateX !== void 0 ? newTranslateX : translateX,
      currentIndex: nextIndex !== null && nextIndex !== void 0 ? nextIndex : currentIndex
    };
  };
  const handleDragEnd = () => {
    const { offset, currentIndex } = draggingInfo;
    const absOffset = Math.abs(offset);
    if (absOffset < SWIPE_THRESHOLD) {
      setDraggingInfo((props) => getNewDraggingInfo(props));
      return;
    }
    if (offset < 0 && currentIndex < children.length - 1) {
      if (isLastItemFitsScreen(currentIndex)) {
        setDraggingInfo((props) => getNewDraggingInfo(props));
        return;
      }
      const nextIndex = currentIndex + 1;
      if (nextIndex === children.length - 1 || isLastItemFitsScreen(nextIndex)) {
        setDraggingInfo((props) => getNewDraggingInfo(Object.assign(Object.assign({}, props), { newTranslateX: itemPositions[children.length - 1].end - PADDING_WIDTH - CONTENT_LEFT_WIDTH + screenWidth, nextIndex: children.length - 1 })));
      } else {
        setDraggingInfo((props) => getNewDraggingInfo(Object.assign(Object.assign({}, props), { newTranslateX: itemPositions[nextIndex].start, nextIndex })));
      }
    } else if (offset > 0 && currentIndex > 0) {
      let nextIndex = currentIndex - 1;
      while (draggingInfo.translateX >= itemPositions[nextIndex].start) {
        nextIndex--;
      }
      setDraggingInfo((props) => getNewDraggingInfo(Object.assign(Object.assign({}, props), { newTranslateX: itemPositions[nextIndex].start, nextIndex })));
    } else {
      setDraggingInfo((props) => getNewDraggingInfo(props));
    }
  };
  function getCurrentTranslateX() {
    return draggingInfo.translateX + draggingInfo.offset;
  }
  function isLastItemFitsScreen(nextIndex) {
    const restItemsWidth = itemWidths.slice(nextIndex).reduce((prev, curr) => prev + gap + curr);
    const restTotalWidth = PADDING_WIDTH + CONTENT_LEFT_WIDTH + restItemsWidth;
    return restTotalWidth <= screenWidth;
  }
  function getEachItemPositions() {
    let accumulator = 0;
    return itemWidths.map((itemWidth, i) => {
      if (i > 0) {
        accumulator -= gap;
      }
      const itemPosition = {
        start: accumulator,
        end: accumulator - itemWidth
      };
      accumulator -= itemWidth;
      return itemPosition;
    });
  }
  return import_react40.default.createElement("div", { ref: carouselRef, onMouseDown: handleMouseDown, onMouseMove: handleMouseMove, onMouseUp: handleMouseUp, onMouseLeave: handleMouseUp, onTouchStart: handleTouchStart, onTouchMove: handleTouchMove, onTouchEnd: handleTouchEnd, className: "sb-message-template__carousel", style: {
    cursor: draggingInfo.dragging ? "grabbing" : "grab",
    transition: draggingInfo.dragging ? "none" : "transform 0.5s ease",
    transform: `translateX(${getCurrentTranslateX()}px)`
  } }, children.map((item, index) => import_react40.default.createElement(CarouselItem, { key: index + "", item, defaultWidth: defaultItemWidth + "px", marginRight: index < children.length - 1 ? gap : void 0 })));
});
function isWrappedText(view) {
  var _a;
  return view.type === ComponentType.Text && ((_a = view.width) === null || _a === void 0 ? void 0 : _a.value) == FlexSizeSpecValue.WrapContent;
}
var isSizeCompatibleWithOption = ({ size, option }) => {
  if (option === "wrap") {
    return size.type === "flex" && size.value == FlexSizeSpecValue.WrapContent;
  }
  if (option === "fill") {
    return size.type === "flex" && size.value == FlexSizeSpecValue.FillParent;
  }
  return size.type === "fixed";
};
var isGif2 = (url) => {
  var _a;
  if (typeof url !== "string")
    return false;
  const extension = (_a = url.split(".").pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();
  return extension === "gif";
};
var isNumber = (val) => {
  if (typeof val === "string") {
    return !Number.isNaN(Number(val));
  }
  return typeof val === "number" && !Number.isNaN(val);
};
var __rest$3 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var CanvasReactMessageTemplateImage = (props) => {
  const { imageSize, canvasRef, canvasProps } = useCanvasMessageTemplateImage(props);
  return import_react40.default.createElement("canvas", Object.assign({}, canvasProps, { ref: canvasRef, width: imageSize === null || imageSize === void 0 ? void 0 : imageSize.width, height: imageSize === null || imageSize === void 0 ? void 0 : imageSize.height, onError: props.onError }));
};
var useCanvasMessageTemplateImage = (_a) => {
  var { metaData, tintColor } = _a, props = __rest$3(_a, ["metaData", "tintColor"]);
  const canvasRef = (0, import_react40.useRef)(null);
  const [fallbackImageSize, setFallbackImageSize] = (0, import_react40.useState)();
  const imageSize = (0, import_react40.useMemo)(() => {
    if ((metaData === null || metaData === void 0 ? void 0 : metaData.pixelHeight) && (metaData === null || metaData === void 0 ? void 0 : metaData.pixelWidth)) {
      return { width: metaData.pixelWidth, height: metaData.pixelHeight };
    }
    return fallbackImageSize;
  }, [fallbackImageSize, metaData === null || metaData === void 0 ? void 0 : metaData.pixelHeight, metaData === null || metaData === void 0 ? void 0 : metaData.pixelWidth]);
  (0, import_react40.useEffect)(() => {
    if (imageSize == null) {
      console.log("Canvas_ReactMessageTemplateImage: no metaData, render fit to container");
      if (canvasRef.current) {
        canvasRef.current.style.width = "100%";
        canvasRef.current.style.height = "100%";
        const containerSize = canvasRef.current.getBoundingClientRect();
        setFallbackImageSize(containerSize);
      }
    }
  }, [imageSize]);
  (0, import_react40.useEffect)(() => {
    if (props.src) {
      const img = new Image();
      const onImageLoad = () => {
        if (canvasRef.current && tintColor && imageSize) {
          const ctx = canvasRef.current.getContext("2d");
          if (ctx) {
            const { width: imageWidth, height: imageHeight } = imageSize;
            ctx.clearRect(0, 0, imageWidth, imageHeight);
            ctx.beginPath();
            ctx.globalCompositeOperation = "source-over";
            ctx.fillStyle = "#000";
            ctx.drawImage(img, 0, 0, imageWidth, imageHeight);
            ctx.globalCompositeOperation = "source-atop";
            ctx.fillStyle = tintColor;
            ctx.fillRect(0, 0, imageWidth, imageHeight);
          }
        }
      };
      const onImageError = (event) => {
        var _a2;
        (_a2 = props.onError) === null || _a2 === void 0 ? void 0 : _a2.call(props, event);
      };
      img.addEventListener("load", onImageLoad);
      img.addEventListener("error", onImageError);
      img.src = props.src;
      return () => {
        img.removeEventListener("load", onImageLoad);
        img.removeEventListener("error", onImageError);
      };
    }
    return;
  }, [props.src, imageSize, tintColor]);
  return {
    canvasRef,
    canvasProps: props,
    imageSize
  };
};
var ImgReactMessageTemplateImage = (props) => {
  return import_react40.default.createElement("img", Object.assign({}, props, { onError: props.onError, referrerPolicy: "no-referrer" }));
};
var PlaceholderReactMessageTemplateImage = (props) => {
  return import_react40.default.createElement("div", { style: Object.assign(Object.assign({}, props.style), { backgroundColor: "transparent" }) });
};
var __rest$2 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var ReactMessageTemplateImage = (_a) => {
  var { tintColor, metaData } = _a, props = __rest$2(_a, ["tintColor", "metaData"]);
  const { hasError, onError } = useImageLoadError(props.src);
  if (props.onError)
    console.warn("`onError` is intercepted and not executed in the ReactMessageTemplateImage.");
  if (hasError) {
    return import_react40.default.createElement(PlaceholderReactMessageTemplateImage, Object.assign({}, props));
  } else if (tintColor && !isGif2(props.src)) {
    return import_react40.default.createElement(CanvasReactMessageTemplateImage, Object.assign({}, props, { onError, tintColor, metaData }));
  } else {
    return import_react40.default.createElement(ImgReactMessageTemplateImage, Object.assign({}, props, { onError }));
  }
};
var useImageLoadError = (source) => {
  const [hasError, setHasError] = (0, import_react40.useState)(false);
  (0, import_react40.useEffect)(() => setHasError(false), [source]);
  return {
    hasError,
    onError: (0, import_react40.useCallback)(() => setHasError(true), [])
  };
};
var MessageContext2 = import_react40.default.createContext(null);
var MessageProvider2 = (props) => {
  const { message, handleWebAction, handleCustomAction, handlePredefinedAction, children } = props;
  const value = import_react40.default.useMemo(() => ({
    message,
    handleWebAction,
    handleCustomAction,
    handlePredefinedAction
  }), [message === null || message === void 0 ? void 0 : message.updatedAt]);
  return import_react40.default.createElement(MessageContext2.Provider, { value }, children);
};
var useMessageContext2 = () => import_react40.default.useContext(MessageContext2);
function usePreservedCallback2(callback) {
  const callbackRef = (0, import_react40.useRef)(callback);
  (0, import_react40.useEffect)(() => {
    callbackRef.current = callback;
  }, [callback]);
  return (0, import_react40.useCallback)((...args) => {
    return callbackRef.current(...args);
  }, [callbackRef]);
}
function useRefEffect(callback, deps) {
  const preservedCallback = usePreservedCallback2(callback);
  const disposeRef = (0, import_react40.useRef)(noop3);
  const effect = (0, import_react40.useCallback)((element) => {
    disposeRef.current();
    disposeRef.current = noop3;
    if (element != null) {
      const cleanup = callback(element);
      if (typeof cleanup === "function") {
        disposeRef.current = cleanup;
      }
    }
  }, [preservedCallback, ...deps]);
  return effect;
}
function noop3() {
}
function useResizeObserver(onResize) {
  const resizeCallback = usePreservedCallback2(onResize);
  const ref = useRefEffect((elem) => {
    const observer = new ResizeObserver((entries2) => {
      if (entries2[0] != null) {
        resizeCallback(entries2[0]);
      }
    });
    observer.observe(elem);
    return () => {
      observer.unobserve(elem);
    };
  }, [resizeCallback]);
  return ref;
}
function useElementSize() {
  const [width, setWidth] = (0, import_react40.useState)(-1);
  const [height, setHeight] = (0, import_react40.useState)(-1);
  const [contentWidth, setContentWidth] = (0, import_react40.useState)(-1);
  const [contentHeight, setContentHeight] = (0, import_react40.useState)(-1);
  const [paddingWidth, setPaddingWidth] = (0, import_react40.useState)(-1);
  const [paddingHeight, setPaddingHeight] = (0, import_react40.useState)(-1);
  const ref = useResizeObserver((entry) => {
    const { width: contentWidth2, height: contentHeight2 } = entry.contentRect;
    const target = entry.target;
    const { width: width2, height: height2 } = target.getBoundingClientRect();
    setWidth(width2);
    setHeight(height2);
    setContentWidth(contentWidth2);
    setContentHeight(contentHeight2);
    setPaddingWidth(width2 - contentWidth2);
    setPaddingHeight(height2 - contentHeight2);
  });
  return { ref, width, height, contentWidth, contentHeight, paddingWidth, paddingHeight };
}
var __rest$1 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function isViewCompatibleWithSizeOption({ width = defaultProperties.view.size.width, height = defaultProperties.view.size.height, parentLayout = defaultProperties.box.layout, option }) {
  if (parentLayout === Layout.Row) {
    return isSizeCompatibleWithOption({
      size: width,
      option
    });
  }
  return isSizeCompatibleWithOption({
    size: height,
    option
  });
}
function useRecalculateWidth(params) {
  const { style, props } = params;
  const _a = useElementSize(), { ref: elemRef } = _a, size = __rest$1(_a, ["ref"]);
  const { updateSize, sizes } = useSizeContext();
  const { id, siblings, parentLayout } = props;
  const { width, height, paddingWidth, paddingHeight, contentWidth, contentHeight } = size;
  (0, import_react40.useEffect)(() => {
    updateSize({
      id: props.id,
      width,
      height,
      paddingWidth,
      paddingHeight,
      contentWidth,
      contentHeight
    });
  }, [props.id, width, height, paddingWidth, paddingHeight, contentWidth, contentHeight, updateSize]);
  const currentStyle = (0, import_react40.useMemo)(() => {
    const sumViewSize = (acc = 0, view) => {
      var _a2, _b, _c, _d;
      if (parentLayout === Layout.Row) {
        return acc + ((_b = (_a2 = sizes[view.id]) === null || _a2 === void 0 ? void 0 : _a2.contentWidth) !== null && _b !== void 0 ? _b : 0);
      }
      return acc + ((_d = (_c = sizes[view.id]) === null || _c === void 0 ? void 0 : _c.contentHeight) !== null && _d !== void 0 ? _d : 0);
    };
    const hasFillOption = isViewCompatibleWithSizeOption({
      width: props.width,
      height: props.height,
      parentLayout,
      option: "fill"
    });
    if (hasFillOption) {
      const wrapSiblingsSize = siblings.filter(({ width: width2, height: height2 }) => !isViewCompatibleWithSizeOption({
        width: width2,
        height: height2,
        parentLayout,
        option: "fill"
      })).reduce(sumViewSize, 0);
      const fillSiblingCount = siblings.filter(({ width: width2, height: height2 }) => isViewCompatibleWithSizeOption({
        width: width2,
        height: height2,
        parentLayout,
        option: "fill"
      })).length;
      const maxSizeOption = (() => {
        if (parentLayout === Layout.Row) {
          return {
            maxWidth: `calc((100% - ${wrapSiblingsSize}px) / ${fillSiblingCount})`
          };
        }
        return {
          maxHeight: `calc((100% - ${wrapSiblingsSize}px) / ${fillSiblingCount})`
        };
      })();
      return Object.assign(Object.assign(Object.assign({}, style), maxSizeOption), width == 0 && { height: 0 });
    } else {
      const currentElemIdx = siblings.findIndex((sibling) => sibling.id === id);
      const forwardSiblingsSize = siblings.slice(0, currentElemIdx).filter(({ width: width2, height: height2 }) => isViewCompatibleWithSizeOption({
        width: width2,
        height: height2,
        parentLayout,
        option: "wrap"
      })).reduce(sumViewSize, 0);
      return Object.assign(Object.assign(Object.assign({}, style), width === 0 && { height: 0 }), parentLayout === Layout.Row ? {
        maxWidth: `calc(100% - ${forwardSiblingsSize}px)`
      } : {
        maxHeight: `calc(100% - ${forwardSiblingsSize}px)`
      });
    }
  }, [props.width, props.height, parentLayout, sizes, siblings, style, width, id]);
  return { recalculatedStyle: currentStyle, elemRef };
}
function getDefaultStyles(overrides) {
  return Object.assign({ display: "flex", overflow: "hidden", boxSizing: "border-box" }, overrides);
}
function setViewProps(styles, props, options) {
  var _a;
  setViewSize(styles, props, options);
  setViewStyle(styles, props);
  if ((_a = props.viewStyle) === null || _a === void 0 ? void 0 : _a.padding) {
    const padding = props.viewStyle.padding;
    if (isNumber(padding.top))
      padding.top = Number(padding.top);
    if (isNumber(padding.bottom))
      padding.bottom = Number(padding.bottom);
    if (isNumber(padding.left))
      padding.left = Number(padding.left);
    if (isNumber(padding.right))
      padding.right = Number(padding.right);
  }
}
function setBorderStyle(styles, borderWidth, borderColor, radius) {
  if (borderWidth) {
    styles["--border-width"] = `${borderWidth}px`;
    styles["--border-color"] = borderColor || "transparent";
  }
  if (radius) {
    styles["borderRadius"] = Number(radius);
    styles["--border-radius"] = `${radius}px`;
  }
}
function setViewStyle(styles, props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
  const { viewStyle } = props;
  if (isNumber((_a = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _a === void 0 ? void 0 : _a.top))
    styles["marginTop"] = Number((_b = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _b === void 0 ? void 0 : _b.top);
  if (isNumber((_c = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _c === void 0 ? void 0 : _c.bottom))
    styles["marginBottom"] = Number((_d = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _d === void 0 ? void 0 : _d.bottom);
  if (isNumber((_e = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _e === void 0 ? void 0 : _e.left))
    styles["marginLeft"] = Number((_f = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _f === void 0 ? void 0 : _f.left);
  if (isNumber((_g = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _g === void 0 ? void 0 : _g.right))
    styles["marginRight"] = Number((_h = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _h === void 0 ? void 0 : _h.right);
  const marginHorizontal = Number((_j = styles.marginLeft) !== null && _j !== void 0 ? _j : "0") + Number((_k = styles.marginRight) !== null && _k !== void 0 ? _k : "0");
  if (marginHorizontal > 0 && styles.width === "100%")
    styles.width = `calc(100% - ${marginHorizontal}px)`;
  if (viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.backgroundColor)
    styles["backgroundColor"] = viewStyle.backgroundColor;
  if (viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.backgroundImageUrl) {
    styles["backgroundImage"] = `url(${JSON.stringify(viewStyle.backgroundImageUrl)})`;
    styles["backgroundSize"] = "100%";
    styles["backgroundPosition"] = "center";
  }
  setBorderStyle(styles, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.borderWidth, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.borderColor, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.radius);
}
function getViewSizeStyle(width, height, parentLayout) {
  const style = {};
  if (width.type === "flex" && width.value == FlexSizeSpecValue.FillParent) {
    style["width"] = "100%";
    if (parentLayout === Layout.Row) {
      style["flex"] = 1;
    }
  } else if (width.type === "fixed" && width.value >= 0) {
    style["width"] = Number(width.value);
  }
  if (height.type === "flex" && height.value == FlexSizeSpecValue.FillParent) {
    style["height"] = "100%";
    if (parentLayout === Layout.Column) {
      style["flex"] = 1;
    }
  } else if (height.type === "fixed" && height.value >= 0) {
    style["height"] = Number(height.value);
  }
  return style;
}
function setViewSize(styles, props, options) {
  var _a, _b;
  const { width: defaultWidth, height: defaultHeight } = defaultProperties.view.size;
  const { parentLayout } = options;
  const sizeStyle = getViewSizeStyle((_a = props.width) !== null && _a !== void 0 ? _a : defaultWidth, (_b = props.height) !== null && _b !== void 0 ? _b : defaultHeight, parentLayout);
  Object.assign(styles, sizeStyle);
}
function setAlign(styles, layout = defaultProperties.box.layout, align = defaultProperties.box.align) {
  if (layout === Layout.Row) {
    styles["flexDirection"] = "row";
    styles["alignItems"] = alignInFlex(align.vertical);
    styles["justifyContent"] = alignInFlex(align.horizontal);
  }
  if (layout === Layout.Column) {
    styles["flexDirection"] = "column";
    styles["alignItems"] = alignInFlex(align.horizontal);
    styles["justifyContent"] = alignInFlex(align.vertical);
  }
}
function setTextAlign(styles, align = defaultProperties.box.align.horizontal) {
  styles.textAlign = align;
}
function setImageStyle(styles, imageStyle) {
  const { contentMode = MediaContentMode.AspectFit } = imageStyle || {};
  if (contentMode) {
    switch (contentMode) {
      case MediaContentMode.AspectFill:
        styles["objectFit"] = "cover";
        break;
      case MediaContentMode.AspectFit:
        styles["objectFit"] = "contain";
        break;
      case MediaContentMode.ScalesToFill:
        styles["objectFit"] = "fill";
        break;
    }
  }
}
function setImageAspectRatio(styles, props) {
  var _a, _b, _c, _d;
  const imageMetaData = props === null || props === void 0 ? void 0 : props.metaData;
  if (!(imageMetaData === null || imageMetaData === void 0 ? void 0 : imageMetaData.pixelHeight) || !(imageMetaData === null || imageMetaData === void 0 ? void 0 : imageMetaData.pixelWidth)) {
    return;
  }
  if (((_a = props === null || props === void 0 ? void 0 : props.width) === null || _a === void 0 ? void 0 : _a.type) === "fixed" || ((_b = props === null || props === void 0 ? void 0 : props.height) === null || _b === void 0 ? void 0 : _b.type) === "fixed") {
    return;
  }
  styles["aspectRatio"] = `${(_c = props === null || props === void 0 ? void 0 : props.metaData) === null || _c === void 0 ? void 0 : _c.pixelWidth} / ${(_d = props === null || props === void 0 ? void 0 : props.metaData) === null || _d === void 0 ? void 0 : _d.pixelHeight}`;
}
function webkitLineClampStyles(numberOfLines) {
  return {
    WebkitLineClamp: numberOfLines,
    WebkitBoxOrient: "vertical",
    display: "-webkit-box",
    overflow: "hidden",
    overflowWrap: "anywhere",
    flex: 1
  };
}
function setTextStyle(styles, props, options) {
  const { textStyle, width } = props;
  const { size, color, weight = "normal" } = textStyle || {};
  if (size)
    styles["fontSize"] = Number(size);
  if (color)
    styles["color"] = color;
  if (weight)
    styles["fontWeight"] = weight;
  if ((width === null || width === void 0 ? void 0 : width.value) == FlexSizeSpecValue.WrapContent) {
    styles["maxWidth"] = "100%";
  }
  if (props.type === ComponentType.Text) {
    const { siblings, elemIdx } = options;
    if (siblings != null && siblings.length >= 2 && siblings.every(isWrappedText)) {
      styles.flexShrink = siblings.length - 1 === elemIdx ? 1 : 0;
    }
  }
}
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var hasValidUrlProtocol = (url = "") => ["http://", "https://", "ftp://"].some((protocol) => url.startsWith(protocol));
var returnUrl = (url = "") => {
  if (hasValidUrlProtocol(url)) {
    return url;
  }
  return `https://${url}`;
};
var ActionHandler = ({ className = "", style, children, props }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
  const { recalculatedStyle, elemRef } = useRecalculateWidth({ style, props });
  const { message, handleWebAction, handleCustomAction, handlePredefinedAction } = useMessageContext2();
  const onClick = (e) => {
    var _a2, _b2, _c2, _d2, _e2, _f2, _g2;
    if (((_a2 = props === null || props === void 0 ? void 0 : props.action) === null || _a2 === void 0 ? void 0 : _a2.type) === "web") {
      if (handleWebAction) {
        handleWebAction(e, props.action, message);
      } else {
        (_c2 = window === null || window === void 0 ? void 0 : window.open(returnUrl((_b2 = props === null || props === void 0 ? void 0 : props.action) === null || _b2 === void 0 ? void 0 : _b2.data), "_blank", "noopener noreferrer")) === null || _c2 === void 0 ? void 0 : _c2.focus();
      }
    }
    if (((_d2 = props === null || props === void 0 ? void 0 : props.action) === null || _d2 === void 0 ? void 0 : _d2.type) === "custom") {
      if (handleCustomAction) {
        handleCustomAction(e, props.action, message);
      } else {
        (_f2 = window === null || window === void 0 ? void 0 : window.open(returnUrl((_e2 = props === null || props === void 0 ? void 0 : props.action) === null || _e2 === void 0 ? void 0 : _e2.data), "_blank", "noopener noreferrer")) === null || _f2 === void 0 ? void 0 : _f2.focus();
      }
    }
    if (((_g2 = props === null || props === void 0 ? void 0 : props.action) === null || _g2 === void 0 ? void 0 : _g2.type) === "uikit") {
      handlePredefinedAction === null || handlePredefinedAction === void 0 ? void 0 : handlePredefinedAction(e, props.action, message);
    }
  };
  const borderClass = ((_a = props.viewStyle) === null || _a === void 0 ? void 0 : _a.borderWidth) ? " sb-message-template__border" : "";
  if (className === "sb-message-template__text-button") {
    return import_react40.default.createElement("button", { className: `${className}${borderClass}`, "data-sb-template-id": props.elementId, style: Object.assign(Object.assign({}, style), { paddingTop: (_c = (_b = props.viewStyle) === null || _b === void 0 ? void 0 : _b.padding) === null || _c === void 0 ? void 0 : _c.top, paddingRight: (_e = (_d = props.viewStyle) === null || _d === void 0 ? void 0 : _d.padding) === null || _e === void 0 ? void 0 : _e.right, paddingBottom: (_g = (_f = props.viewStyle) === null || _f === void 0 ? void 0 : _f.padding) === null || _g === void 0 ? void 0 : _g.bottom, paddingLeft: (_j = (_h = props.viewStyle) === null || _h === void 0 ? void 0 : _h.padding) === null || _j === void 0 ? void 0 : _j.left }), onClick }, children);
  }
  const { display, flexDirection, justifyContent, alignItems, objectFit } = recalculatedStyle, wrapperStyles = __rest(recalculatedStyle, ["display", "flexDirection", "justifyContent", "alignItems", "objectFit"]);
  return import_react40.default.createElement(
    "div",
    { ref: elemRef, className: `${className}${borderClass} ${(props === null || props === void 0 ? void 0 : props.action) ? "sb-message-template__action" : ""}`, "data-sb-template-id": props.elementId, style: wrapperStyles, onClick },
    import_react40.default.createElement("div", { style: {
      display,
      flexDirection,
      justifyContent,
      alignItems,
      objectFit,
      width: "100%",
      height: "100%",
      paddingTop: (_l = (_k = props.viewStyle) === null || _k === void 0 ? void 0 : _k.padding) === null || _l === void 0 ? void 0 : _l.top,
      paddingRight: (_o = (_m = props.viewStyle) === null || _m === void 0 ? void 0 : _m.padding) === null || _o === void 0 ? void 0 : _o.right,
      paddingBottom: (_q = (_p = props.viewStyle) === null || _p === void 0 ? void 0 : _p.padding) === null || _q === void 0 ? void 0 : _q.bottom,
      paddingLeft: (_s = (_r = props.viewStyle) === null || _r === void 0 ? void 0 : _r.padding) === null || _s === void 0 ? void 0 : _s.left
    } }, children)
  );
};
function isFixedOrFill(view) {
  var _a, _b, _c, _d;
  const heightType = (_a = view === null || view === void 0 ? void 0 : view.height) === null || _a === void 0 ? void 0 : _a.type;
  const widthType = (_b = view === null || view === void 0 ? void 0 : view.width) === null || _b === void 0 ? void 0 : _b.type;
  const isFixedDiamension = heightType === "fixed" || widthType === "fixed";
  const isFill = heightType === "flex" && ((_c = view === null || view === void 0 ? void 0 : view.height) === null || _c === void 0 ? void 0 : _c.value) === FlexSizeSpecValue.FillParent || widthType === "flex" && ((_d = view === null || view === void 0 ? void 0 : view.width) === null || _d === void 0 ? void 0 : _d.value) === FlexSizeSpecValue.FillParent;
  return isFixedDiamension || isFill;
}
function convertNewlinesToBr(text2) {
  return text2.split("\n").map((line, index) => import_react40.default.createElement(
    import_react40.default.Fragment,
    { key: index },
    line,
    import_react40.default.createElement("br", null)
  ));
}
function renderText(view) {
  const { text: text2, maxTextLines } = view;
  const isToBeWrapped = isFixedOrFill(view);
  const isMultiLine = maxTextLines != null && maxTextLines > 0;
  const convertedText = convertNewlinesToBr(text2);
  if (isMultiLine || isToBeWrapped) {
    const wrapperStyling = Object.assign(Object.assign({}, (isMultiLine || isToBeWrapped) && { maxWidth: "100%" }), isToBeWrapped && { maxHeight: "100%", overflow: "hidden" });
    return import_react40.default.createElement("div", { style: wrapperStyling }, isMultiLine ? import_react40.default.createElement("div", { style: webkitLineClampStyles(maxTextLines) }, convertedText) : convertedText);
  }
  return isMultiLine ? import_react40.default.createElement("div", { style: webkitLineClampStyles(maxTextLines) }, convertedText) : convertedText;
}
var renderer = createRenderer({
  views: {
    box(props) {
      return import_react40.default.createElement(ActionHandler, { className: "sb-message-template__box", elementId: props.elementId, style: props.parsedProperties, props }, props.children);
    },
    text(props) {
      return import_react40.default.createElement(ActionHandler, { className: "sb-message-template__text", elementId: props.elementId, style: props.parsedProperties, props }, renderText(props));
    },
    image(props) {
      var _a;
      return import_react40.default.createElement(
        ActionHandler,
        { className: "sb-message-template__image-container", elementId: props.elementId, style: props.parsedProperties, props },
        import_react40.default.createElement(ReactMessageTemplateImage, { className: "sb-message-template__image", alt: "image", src: props.imageUrl, style: { width: "100%", height: "100%", aspectRatio: "inherit", objectFit: "inherit" }, tintColor: (_a = props.imageStyle) === null || _a === void 0 ? void 0 : _a.tintColor, metaData: props.metaData })
      );
    },
    textButton(props) {
      return import_react40.default.createElement(ActionHandler, { className: "sb-message-template__text-button", elementId: props.elementId, style: props.parsedProperties, props }, renderText(Object.assign({ maxTextLines: 1 }, props)));
    },
    imageButton(props) {
      var _a;
      return import_react40.default.createElement(
        ActionHandler,
        { className: "sb-message-template__image-container sb-message-template__image-button", elementId: props.elementId, style: props.parsedProperties, props },
        import_react40.default.createElement(ReactMessageTemplateImage, { className: "sb-message-template__image", alt: "image-button", src: props.imageUrl, style: { width: "100%", height: "100%", aspectRatio: "inherit", objectFit: "inherit" }, tintColor: (_a = props.imageStyle) === null || _a === void 0 ? void 0 : _a.tintColor, metaData: props.metaData })
      );
    },
    carouselView(props) {
      return import_react40.default.createElement(Carousel, { gap: props.spacing }, props.children);
    }
  }
});
var parser = createParser({
  mapBoxProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    setAlign(styles, props.layout, props.align);
    return styles;
  },
  mapTextProps(props, options) {
    var _a;
    const styles = getDefaultStyles({ whiteSpace: "pre-line" });
    setViewProps(styles, props, options);
    setTextStyle(styles, props, options);
    setAlign(styles, Layout.Row, props.align);
    setTextAlign(styles, (_a = props.align) === null || _a === void 0 ? void 0 : _a.horizontal);
    return styles;
  },
  mapImageProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    setImageStyle(styles, props.imageStyle);
    setImageAspectRatio(styles, props);
    return styles;
  },
  mapTextButtonProps(props, options) {
    const styles = getDefaultStyles({ whiteSpace: "pre-line", alignItems: "center", justifyContent: "center" });
    setViewProps(styles, props, options);
    setTextStyle(styles, Object.assign(Object.assign({}, props), { textStyle: Object.assign({ weight: 500 }, props.textStyle) }), options);
    return styles;
  },
  mapImageButtonProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    setImageStyle(styles, props.imageStyle);
    setImageAspectRatio(styles, props);
    return styles;
  },
  mapCarouselProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    return styles;
  }
});
createMessageTemplate({
  renderer,
  parser,
  Container: ({ children, className }) => {
    return import_react40.default.createElement("div", { className: `sb-message-template__parent ${className}`, style: {
      display: "flex",
      flexDirection: "column",
      maxWidth: 400,
      marginBottom: 24
    } }, children);
  }
});
var CustomTemplate = createMessageTemplate({
  parser,
  renderer,
  Container: function(_a) {
    var children = _a.children, className = _a.className;
    return import_react40.default.createElement("div", { className: [
      "sb-message-template__parent ".concat(className),
      "sendbird-message-template__root"
    ].join(" ") }, children);
  }
}).MessageTemplate;
function MessageTemplate(_a) {
  var templateItems = _a.templateItems, templateVersion = _a.templateVersion;
  return import_react40.default.createElement(CustomTemplate, { templateItems, templateVersion });
}

// node_modules/@sendbird/uikit-react/ui/FallbackTemplateMessageItemBody.tsx.js
var import_react41 = __toESM(require_react(), 1);
function FallbackTemplateMessageItemBody(_a) {
  var className = _a.className, message = _a.message, isByMe = _a.isByMe;
  var stringSet = (0, import_react41.useContext)(LocalizationContext).stringSet;
  var text2 = message["message"];
  return import_react41.default.createElement("div", { className: getClassName([
    className !== null && className !== void 0 ? className : "",
    isByMe ? "outgoing" : "incoming",
    "sendbird-template-message-item-body__fallback_message"
  ]) }, text2 ? import_react41.default.createElement(
    import_react41.default.Fragment,
    null,
    import_react41.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONCONTENT_INVERSE_1 }, text2)
  ) : import_react41.default.createElement(
    import_react41.default.Fragment,
    null,
    import_react41.default.createElement(Label, { className: "sendbird-template-message-item-body__fallback_message__header", type: LabelTypography.BODY_1, color: LabelColors.ONCONTENT_INVERSE_1 }, stringSet.UNKNOWN__TEMPLATE_ERROR),
    import_react41.default.createElement(Label, { className: "sendbird-template-message-item-body__fallback_message__description", type: LabelTypography.BODY_1, color: LabelColors.ONCONTENT_INVERSE_3 }, stringSet.UNKNOWN__CANNOT_READ_TEMPLATE)
  ));
}

// node_modules/@sendbird/uikit-react/ui/LoadingTemplateMessageItemBody.tsx.js
var import_react42 = __toESM(require_react(), 1);
var TEMPLATE_LOADING_SPINNER_SIZE = "40px";
function LoadingTemplateMessageItemBody(_a) {
  var className = _a.className, isByMe = _a.isByMe;
  return import_react42.default.createElement(
    "div",
    { className: classnames(className, isByMe ? "outgoing" : "incoming", "sendbird-template-loading-message-item-body") },
    import_react42.default.createElement(
      Loader,
      { className: "sendbird-message-status__icon", testID: "sendbird-message-status-icon", width: TEMPLATE_LOADING_SPINNER_SIZE, height: TEMPLATE_LOADING_SPINNER_SIZE },
      import_react42.default.createElement(Icon, { type: IconTypes.SPINNER, fillColor: IconColors.CONTENT_INVERSE_3, width: TEMPLATE_LOADING_SPINNER_SIZE, height: TEMPLATE_LOADING_SPINNER_SIZE })
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/TemplateMessageItemBody.js
var MessageTemplateWrapper = function(_a) {
  var message = _a.message, templateVersion = _a.templateVersion, templateItems = _a.templateItems;
  return import_react43.default.createElement(
    MessageProvider2,
    { message },
    import_react43.default.createElement(MessageTemplate, { templateVersion, templateItems })
  );
};
var NumberValueKeys = [
  "version",
  "size",
  "top",
  "left",
  "right",
  "bottom",
  "maxTextLines",
  "value",
  "pixelWidth",
  "pixelHeight",
  "radius"
];
function restoreNumbersFromMessageTemplateObject(value, key) {
  if (Array.isArray(value)) {
    return value.map(function(item) {
      return restoreNumbersFromMessageTemplateObject(item);
    });
  }
  if (value && typeof value === "object") {
    return Object.keys(value).reduce(function(acc, key2) {
      acc[key2] = restoreNumbersFromMessageTemplateObject(value[key2], key2);
      return acc;
    }, {});
  }
  if (key != null && NumberValueKeys.includes(key)) {
    var numberValue = Number(value);
    return Number.isNaN(numberValue) ? value : numberValue;
  }
  return value;
}
var flattenObjectHelper = function(currentObject, flattenObject2, parentKeyPath) {
  if (parentKeyPath === void 0) {
    parentKeyPath = "";
  }
  for (var _i = 0, _a = Object.entries(currentObject); _i < _a.length; _i++) {
    var _b = _a[_i], key = _b[0], value = _b[1];
    var currentKeyPath = parentKeyPath ? "".concat(parentKeyPath, ".").concat(key) : key;
    if (value && typeof value === "object") {
      flattenObjectHelper(value, flattenObject2, currentKeyPath);
    } else {
      flattenObject2[currentKeyPath] = value;
    }
  }
};
function flattenObject(object) {
  var result = {};
  flattenObjectHelper(object, result);
  return result;
}
function convertArgbToRgba(string) {
  if (!string.startsWith("#")) {
    return string;
  }
  if (string.length === 9) {
    return "#".concat(string.slice(3)).concat(string[1]).concat(string[2]);
  }
  if (string.length === 5) {
    return "#".concat(string.slice(2)).concat(string[1]);
  }
  return string;
}
var splitColorVariables = function(colorVariables) {
  var light = {};
  var dark = {};
  for (var key in colorVariables) {
    if (Object.prototype.hasOwnProperty.call(colorVariables, key)) {
      var value = colorVariables[key];
      if (typeof value === "object" && value !== null) {
        var _a = splitColorVariables(value), nestedLight = _a[0], nestedDark = _a[1];
        light[key] = nestedLight;
        dark[key] = nestedDark;
      } else if (typeof value === "string") {
        var _b = value.split(","), lightColor = _b[0], darkColor = _b[1];
        light[key] = lightColor;
        dark[key] = darkColor || lightColor;
      } else {
        light[key] = value;
        dark[key] = value;
      }
    }
  }
  return [light, dark];
};
function selectColorVariablesByTheme(_a) {
  var colorVariables = _a.colorVariables, theme = _a.theme;
  var _b = splitColorVariables(colorVariables), light = _b[0], dark = _b[1];
  return theme === "light" ? light : dark;
}
var COLOR_KEYS = {
  color: true,
  tintColor: true,
  backgroundColor: true,
  borderColor: true
};
function mapData(_a) {
  var template = _a.template, source = _a.source;
  if (!["object", "string"].includes(typeof template) || !template)
    return template;
  var regex = /\{([^}]+)\}/g;
  var flattenedSource = flattenObject(source);
  function replaceVariablePlaceholder(value2) {
    return typeof value2 === "string" ? value2.replace(regex, function(_, placeholder) {
      var value3 = flattenedSource[placeholder];
      return value3 || "{".concat(placeholder, "}");
    }) : mapData({ template: value2, source });
  }
  if (typeof template === "string") {
    return replaceVariablePlaceholder(template);
  }
  if (Array.isArray(template)) {
    return template.map(replaceVariablePlaceholder);
  }
  var result = {};
  for (var key in template) {
    if (Object.prototype.hasOwnProperty.call(template, key)) {
      var value = template[key];
      var replacedVal = replaceVariablePlaceholder(value);
      if (COLOR_KEYS[key] && typeof replacedVal === "string") {
        replacedVal = convertArgbToRgba(replacedVal);
      }
      result[key] = replacedVal;
    }
  }
  return result;
}
var MessageTemplateErrorBoundary = (
  /** @class */
  function(_super) {
    __extends(MessageTemplateErrorBoundary2, _super);
    function MessageTemplateErrorBoundary2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = { hasError: false };
      return _this;
    }
    MessageTemplateErrorBoundary2.getDerivedStateFromError = function() {
      return { hasError: true };
    };
    MessageTemplateErrorBoundary2.prototype.componentDidCatch = function(error, errorInfo) {
      var _a;
      (_a = this.props.logger) === null || _a === void 0 ? void 0 : _a.error("Error caught by ErrorBoundary:", error, errorInfo);
    };
    MessageTemplateErrorBoundary2.prototype.render = function() {
      if (this.state.hasError) {
        this.props.onTemplateMessageRenderedCallback("failed");
        return this.props.fallbackMessage;
      }
      this.props.onTemplateMessageRenderedCallback(this.props.isComposite ? "composite" : "simple");
      return this.props.children;
    };
    return MessageTemplateErrorBoundary2;
  }(import_react43.Component)
);
var TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES = 500;
var getFilledMessageTemplateWithData = function(_a) {
  var template = _a.template, _b = _a.templateData, templateData = _b === void 0 ? {} : _b, colorVariables = _a.colorVariables, theme = _a.theme;
  var selectedThemeColorVariables = {};
  if (colorVariables && theme) {
    selectedThemeColorVariables = selectColorVariablesByTheme({
      colorVariables,
      theme
    });
  }
  var source = __assign(__assign({}, templateData), selectedThemeColorVariables);
  var parsedTemplate = mapData({
    template: restoreNumbersFromMessageTemplateObject(template),
    source
  });
  return parsedTemplate;
};
function TemplateMessageItemBody(_a) {
  var _b, _c;
  var _d = _a.className, className = _d === void 0 ? "" : _d, message = _a.message, _e = _a.isByMe, isByMe = _e === void 0 ? false : _e, _f = _a.theme, theme = _f === void 0 ? "light" : _f, _g = _a.onTemplateMessageRenderedCallback, onTemplateMessageRenderedCallback = _g === void 0 ? function() {
  } : _g;
  var templateData = (_b = message.extendedMessagePayload) === null || _b === void 0 ? void 0 : _b["template"];
  var getFailedBody = function() {
    onTemplateMessageRenderedCallback("failed");
    return import_react43.default.createElement(FallbackTemplateMessageItemBody, { className, message, isByMe });
  };
  if (!(templateData === null || templateData === void 0 ? void 0 : templateData.key)) {
    return getFailedBody();
  }
  var templateKey = templateData.key;
  var globalState = useSendbirdStateContext();
  if (!globalState) {
    return getFailedBody();
  }
  var _h = globalState.utils, getCachedTemplate = _h.getCachedTemplate, updateMessageTemplatesInfo = _h.updateMessageTemplatesInfo;
  var logger = globalState.config.logger;
  var waitingTemplateKeysMap = globalState.stores.appInfoStore.waitingTemplateKeysMap;
  var waitingTemplateKeysMapString = Object.entries(waitingTemplateKeysMap).map(function(_a2) {
    var key = _a2[0], value = _a2[1];
    return [key, value.requestedAt, value.erroredMessageIds.join(",")].join("-");
  }).join("_");
  var _j = (0, import_react43.useState)(getFilledMessageTemplateItems()), renderData = _j[0], setRenderData = _j[1];
  function getFilledMessageTemplateItemsForCarouselTemplateByMessagePayload(simpleTemplateDataList) {
    var cachedSimpleTemplates = [];
    var simpleTemplatesVariables = [];
    var maxVersion = 0;
    simpleTemplateDataList.forEach(function(simpleTemplateData) {
      var simpleTemplateKey = simpleTemplateData.key;
      if (!simpleTemplateKey) {
        logger.error("TemplateMessageItemBody | simple template keys are not found in view_variables: ", simpleTemplateDataList);
        throw new Error("TemplateMessageItemBody | simple template keys are not found in view_variables.");
      }
      var simpleCachedTemplate = getCachedTemplate(simpleTemplateKey);
      if (simpleCachedTemplate) {
        cachedSimpleTemplates.push(simpleCachedTemplate);
        simpleTemplatesVariables.push(simpleTemplateData.variables);
        maxVersion = Math.max(maxVersion, simpleCachedTemplate.version);
      }
    });
    var filledMessageTemplateItemsList = cachedSimpleTemplates.map(function(cachedSimpleTemplate, index) {
      var templateItems = JSON.parse(cachedSimpleTemplate.uiTemplate);
      var filledMessageTemplateItems = getFilledMessageTemplateWithData({
        template: templateItems,
        templateData: simpleTemplatesVariables[index],
        colorVariables: cachedSimpleTemplate.colorVariables,
        theme
      });
      return filledMessageTemplateItems;
    });
    return {
      maxVersion,
      filledTemplates: filledMessageTemplateItemsList
    };
  }
  function getFilledMessageTemplateItemsForCarouselTemplate(uiTemplates) {
    var maxVersion = 0;
    var filledTemplates = [];
    uiTemplates.forEach(function(uiTemplate) {
      maxVersion = Math.max(maxVersion, uiTemplate.version);
      var filledMessageTemplateItems = getFilledMessageTemplateWithData({
        template: uiTemplate.body.items
      });
      filledTemplates.push(filledMessageTemplateItems);
    });
    return {
      maxVersion,
      filledTemplates
    };
  }
  function getFilledMessageTemplateItemsForSimpleTemplate(templateItems, colorVariables) {
    var _a2;
    var filledMessageTemplateItems = getFilledMessageTemplateWithData({
      template: templateItems,
      templateData: (_a2 = templateData === null || templateData === void 0 ? void 0 : templateData.variables) !== null && _a2 !== void 0 ? _a2 : {},
      colorVariables,
      theme
    });
    return filledMessageTemplateItems;
  }
  function getFilledMessageTemplateItems() {
    var result = {
      filledMessageTemplateItemsList: [],
      isErrored: false
    };
    var nonCachedTemplateKeys = [];
    var cachedTemplate = getCachedTemplate(templateKey);
    if (!cachedTemplate) {
      nonCachedTemplateKeys.push(templateKey);
    }
    if (templateData === null || templateData === void 0 ? void 0 : templateData.view_variables) {
      try {
        Object.entries(templateData.view_variables).forEach(function(_a3) {
          var _ = _a3[0], simpleTemplateDataList2 = _a3[1];
          simpleTemplateDataList2.forEach(function(simpleTemplateData) {
            var simpleTemplateKey = simpleTemplateData === null || simpleTemplateData === void 0 ? void 0 : simpleTemplateData.key;
            if (simpleTemplateKey && !getCachedTemplate(simpleTemplateKey) && !nonCachedTemplateKeys.includes(simpleTemplateKey)) {
              nonCachedTemplateKeys.push(simpleTemplateKey);
            }
          });
        });
      } catch (e) {
        logger.error("TemplateMessageItemBody | received view_variables is malformed: ", templateData);
        result.isErrored = true;
        return result;
      }
    }
    try {
      if (nonCachedTemplateKeys.length > 0) {
        tryFetchTemplateByKey(nonCachedTemplateKeys);
      } else if (cachedTemplate) {
        var parsedUiTemplate = JSON.parse(cachedTemplate.uiTemplate);
        if (!Array.isArray(parsedUiTemplate) || parsedUiTemplate.length === 0) {
          logger.error("TemplateMessageItemBody | parsed template is missing ui_template: ", parsedUiTemplate);
          throw new Error("TemplateMessageItemBody | parsed template is missing ui_template. See error log in console for details");
        }
        if (parsedUiTemplate[0].type === CompositeComponentType.Carousel) {
          var carouselItem = parsedUiTemplate[0];
          if (parsedUiTemplate.length > 1) {
            logger.error("TemplateMessageItemBody | composite template currently does not support multiple items: ", parsedUiTemplate);
            throw new Error("TemplateMessageItemBody | composite template currently does not support multiple items. See error log in console for details");
          }
          if (typeof carouselItem.items === "string") {
            if (!startsWithAtAndEndsWithBraces(carouselItem.items)) {
              logger.error('TemplateMessageItemBody | composite template with reservation key must follow the following string format "{@your-reservation-key}": ', templateKey, carouselItem);
              throw new Error('TemplateMessageItemBody | composite template with reservation key must follow the following string format "{@your-reservation-key}". See error log in console for details');
            }
            if (!(templateData === null || templateData === void 0 ? void 0 : templateData.view_variables)) {
              logger.error("TemplateMessageItemBody | template key suggests composite template but template data is missing view_variables: ", templateKey, templateData);
              throw new Error("TemplateMessageItemBody | template key suggests composite template but template data is missing view_variables. See error log in console for details");
            }
            var reservationKey = removeAtAndBraces(carouselItem.items);
            var simpleTemplateDataList = templateData.view_variables[reservationKey];
            if (!simpleTemplateDataList) {
              logger.error("TemplateMessageItemBody | no reservation key found in view_variables: ", reservationKey, templateData.view_variables);
              throw new Error("TemplateMessageItemBody | no reservation key found in view_variables. See error log in console for details");
            }
            if (simpleTemplateDataList.length > 10) {
              logger.warning("TemplateMessageItemBody | composite template with more than 10 simple templates will only render the first 10 items: ", reservationKey, templateData.view_variables);
              simpleTemplateDataList = simpleTemplateDataList.slice(0, 10);
            }
            var _a2 = getFilledMessageTemplateItemsForCarouselTemplateByMessagePayload(simpleTemplateDataList), maxVersion = _a2.maxVersion, filledTemplates = _a2.filledTemplates;
            result.isComposite = true;
            result.templateVersion = Math.max(cachedTemplate.version, maxVersion);
            result.filledMessageTemplateItemsList = [{
              type: carouselItem.type,
              spacing: carouselItem.spacing,
              items: filledTemplates
            }];
          } else if (Array.isArray(carouselItem.items)) {
            var simpleTemplates = carouselItem.items;
            if (carouselItem.items.length > 10) {
              logger.warning("TemplateMessageItemBody | composite template with more than 10 simple templates will only render the first 10 items: ", carouselItem);
              simpleTemplates = carouselItem.items.slice(0, 10);
            }
            var _b2 = getFilledMessageTemplateItemsForCarouselTemplate(simpleTemplates), maxVersion = _b2.maxVersion, filledTemplates = _b2.filledTemplates;
            result.isComposite = true;
            result.templateVersion = Math.max(cachedTemplate.version, maxVersion);
            result.filledMessageTemplateItemsList = [{
              type: carouselItem.type,
              spacing: carouselItem.spacing,
              items: filledTemplates
            }];
          } else {
            logger.error("TemplateMessageItemBody | composite template is malformed: ", templateKey, carouselItem);
            throw new Error("TemplateMessageItemBody | composite template is malformed. See error log in console for details");
          }
        } else {
          result.templateVersion = cachedTemplate.version;
          result.filledMessageTemplateItemsList = getFilledMessageTemplateItemsForSimpleTemplate(parsedUiTemplate, cachedTemplate.colorVariables);
        }
      }
    } catch (e) {
      result.isErrored = true;
    }
    return result;
  }
  (0, import_react43.useEffect)(function() {
    if (!renderData.isErrored && renderData.filledMessageTemplateItemsList.length === 0) {
      var newRenderData = getFilledMessageTemplateItems();
      setRenderData(newRenderData);
    }
  }, [templateData.key, waitingTemplateKeysMapString]);
  function tryFetchTemplateByKey(templateKeys) {
    if (templateKeys.length > 0) {
      var waitingTemplateKeyDataList_1 = [];
      templateKeys.forEach(function(templateKey2) {
        var waitingTemplateKeyData = waitingTemplateKeysMap[templateKey2];
        waitingTemplateKeyDataList_1.push([templateKey2, waitingTemplateKeyData]);
      });
      var requestedAt_1 = Date.now();
      var keysToUpdate_1 = [];
      waitingTemplateKeyDataList_1.forEach(function(_a2) {
        var templateKey2 = _a2[0], waitingTemplateKeyData = _a2[1];
        if (!waitingTemplateKeyData || waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) === -1 && requestedAt_1 > waitingTemplateKeyData.requestedAt + TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES) {
          keysToUpdate_1.push(templateKey2);
        } else if (waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) > -1) {
          throw new Error("TemplateMessageItemBody | fetching template key ".concat(templateKey2, " for messageId: ").concat(message.messageId, " has failed."));
        }
      });
      if (keysToUpdate_1.length > 0) {
        updateMessageTemplatesInfo(keysToUpdate_1, message.messageId, requestedAt_1);
      }
    }
  }
  if (renderData.isErrored) {
    return getFailedBody();
  }
  if (renderData.filledMessageTemplateItemsList.length === 0) {
    return import_react43.default.createElement(LoadingTemplateMessageItemBody, { className, isByMe });
  }
  return import_react43.default.createElement(
    "div",
    { className: getClassName([
      className,
      isByMe ? "outgoing" : "incoming",
      "sendbird-template-message-item-body"
    ]) },
    import_react43.default.createElement(
      MessageTemplateErrorBoundary,
      { fallbackMessage: import_react43.default.createElement(FallbackTemplateMessageItemBody, { className, message, isByMe }), onTemplateMessageRenderedCallback, isComposite: renderData.isComposite, logger },
      import_react43.default.createElement(MessageTemplateWrapper, { message, templateVersion: (_c = renderData.templateVersion) !== null && _c !== void 0 ? _c : 0, templateItems: renderData.filledMessageTemplateItemsList })
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/FeedbackIconButton.js
var import_react44 = __toESM(require_react(), 1);
var FeedbackIconButton = import_react44.default.forwardRef(function(props, ref) {
  var children = props.children, isSelected = props.isSelected, _a = props.onClick, onClick = _a === void 0 ? function() {
  } : _a, _b = props.disabled, disabled = _b === void 0 ? false : _b;
  return import_react44.default.createElement(
    "button",
    { className: [
      "sendbird-iconbutton__feedback",
      isSelected ? "sendbird-iconbutton__feedback__pressed" : "",
      disabled ? "sendbird-iconbutton__feedback__disabled" : ""
    ].join(" "), ref, type: "button", onClick: function(e) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
    }, disabled },
    import_react44.default.createElement("span", { className: [
      "sendbird-iconbutton__feedback__inner",
      isSelected ? "sendbird-iconbutton__feedback__inner__pressed" : "",
      disabled ? "sendbird-iconbutton__feedback__inner__disabled" : ""
    ].join(" ") }, children)
  );
});

// node_modules/@sendbird/uikit-react/ui/MobileFeedbackMenu.js
var import_react45 = __toESM(require_react(), 1);
var import_react_dom11 = __toESM(require_react_dom(), 1);
function MobileFeedbackMenu(props) {
  var hideMenu = props.hideMenu, onEditFeedback = props.onEditFeedback, onRemoveFeedback = props.onRemoveFeedback;
  var stringSet = useLocalization().stringSet;
  return import_react45.default.createElement(
    BottomSheet,
    { onBackdropClick: hideMenu },
    import_react45.default.createElement(
      "div",
      { className: "sendbird-message__bottomsheet--feedback-options-menu" },
      import_react45.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet--feedback-option", onClick: function() {
          hideMenu();
          onEditFeedback();
        } },
        import_react45.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.EDIT_COMMENT)
      ),
      import_react45.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet--feedback-option", onClick: function() {
          hideMenu();
          onRemoveFeedback();
        } },
        import_react45.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ERROR }, stringSet.REMOVE_FEEDBACK)
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/MessageFeedbackModal.js
var import_react46 = __toESM(require_react(), 1);
var import_react_dom12 = __toESM(require_react_dom(), 1);
function MessageFeedbackModal(props) {
  var _a, _b;
  var selectedFeedback = props.selectedFeedback, message = props.message, onClose = props.onClose, onSubmit = props.onSubmit, onUpdate = props.onUpdate, onRemove = props.onRemove;
  var stringSet = (0, import_react46.useContext)(LocalizationContext).stringSet;
  var isMobile = useMediaQueryContext().isMobile;
  var isEdit = (message === null || message === void 0 ? void 0 : message.myFeedback) && selectedFeedback === message.myFeedback.rating;
  var hasComment = (_a = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _a === void 0 ? void 0 : _a.comment;
  var onSubmitWrapper = function() {
    var _a2, _b2, _c;
    if (!selectedFeedback)
      return;
    var comment = (_b2 = (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.value) !== null && _b2 !== void 0 ? _b2 : "";
    if (isEdit) {
      if (comment !== ((_c = message.myFeedback) === null || _c === void 0 ? void 0 : _c.comment)) {
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(selectedFeedback, comment);
      } else {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } else if (!message.myFeedback) {
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(selectedFeedback, comment);
    }
  };
  var modalRef = (0, import_react46.useRef)();
  var inputRef = (0, import_react46.useRef)();
  var onKeyDown = useKeyDown(modalRef, {
    Enter: function() {
      return onSubmitWrapper();
    },
    Escape: function() {
      return onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  });
  return import_react46.default.createElement(
    "div",
    { onKeyDown },
    import_react46.default.createElement(
      Modal,
      { contentClassName: "sendbird-message-feedback-modal-content__mobile", type: ButtonTypes.PRIMARY, onCancel: onClose, onSubmit: function() {
        onSubmitWrapper();
      }, submitText: stringSet.BUTTON__SUBMIT, renderHeader: function() {
        return import_react46.default.createElement(
          "div",
          { className: "sendbird-modal__header" },
          import_react46.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1, className: "sendbird-message-feedback-modal-header" }, stringSet.FEEDBACK_MODAL_TITLE)
        );
      }, customFooter: import_react46.default.createElement(
        "div",
        { className: "sendbird-message-feedback-modal-footer__root" },
        !isMobile && (message === null || message === void 0 ? void 0 : message.myFeedback) && selectedFeedback === message.myFeedback.rating ? import_react46.default.createElement(Button, { type: ButtonTypes.WARNING, onClick: onRemove, labelType: LabelTypography.BUTTON_3 }, stringSet.BUTTON__REMOVE_FEEDBACK) : import_react46.default.createElement("div", null),
        import_react46.default.createElement(
          "div",
          { className: "sendbird-message-feedback-modal-footer__right-content" },
          import_react46.default.createElement(
            Button,
            { type: ButtonTypes.SECONDARY, onClick: onClose },
            import_react46.default.createElement(Label, { type: LabelTypography.BUTTON_3, color: LabelColors.ONBACKGROUND_1 }, stringSet.BUTTON__CANCEL)
          ),
          import_react46.default.createElement(
            Button,
            { onClick: function() {
              return onSubmitWrapper();
            } },
            import_react46.default.createElement(Label, { type: LabelTypography.BUTTON_3, color: LabelColors.ONCONTENT_1 }, hasComment ? stringSet.BUTTON__SAVE : stringSet.BUTTON__SUBMIT)
          )
        )
      ) },
      import_react46.default.createElement(
        "div",
        { className: "sendbird-message-feedback-modal-body__root" },
        import_react46.default.createElement(Input, { name: "sendbird-message-feedback-modal-body__root", ref: inputRef, value: isEdit ? (_b = message.myFeedback) === null || _b === void 0 ? void 0 : _b.comment : void 0, placeHolder: stringSet.FEEDBACK_CONTENT_PLACEHOLDER, autoFocus: true })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/MessageFeedbackFailedModal.js
var import_react47 = __toESM(require_react(), 1);
var import_react_dom13 = __toESM(require_react_dom(), 1);
function MessageFeedbackFailedModal(props) {
  var text2 = props.text, onCancel = props.onCancel;
  var stringSet = (0, import_react47.useContext)(LocalizationContext).stringSet;
  var modalRef = (0, import_react47.useRef)(null);
  var onKeyDown = useKeyDown(modalRef, {
    Enter: function() {
      return onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    },
    Escape: function() {
      return onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    }
  });
  return import_react47.default.createElement(
    "div",
    { onKeyDown },
    import_react47.default.createElement(Modal, { contentClassName: "sendbird-message-feedback-modal-content__mobile", type: ButtonTypes.PRIMARY, onSubmit: onCancel, onClose: onCancel, submitText: stringSet.BUTTON__OK, renderHeader: function() {
      return import_react47.default.createElement(
        "div",
        { className: "sendbird-modal__header" },
        import_react47.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1, className: "sendbird-message-feedback-modal-header" }, text2)
      );
    }, customFooter: import_react47.default.createElement(
      "div",
      { className: "sendbird-message-feedback-modal-footer__root_failed" },
      import_react47.default.createElement(
        Button,
        { onClick: onCancel },
        import_react47.default.createElement(Label, { type: LabelTypography.BUTTON_3, color: LabelColors.ONCONTENT_1 }, stringSet.BUTTON__OK)
      )
    ) })
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CbMF1uDu.js
var import_react48 = __toESM(require_react(), 1);
function useElementObserver(selector, targetElement) {
  var _a = (0, import_react48.useState)(false), isElementMounted = _a[0], setIsElementMounted = _a[1];
  (0, import_react48.useEffect)(function() {
    var targetElements = Array.isArray(targetElement) ? targetElement : [targetElement];
    var updateElementState = function() {
      var _a2;
      var elements = targetElements === null || targetElements === void 0 ? void 0 : targetElements.map(function(target) {
        return target === null || target === void 0 ? void 0 : target.querySelector(selector);
      });
      setIsElementMounted((_a2 = elements === null || elements === void 0 ? void 0 : elements.some(function(element) {
        return !!element;
      })) !== null && _a2 !== void 0 ? _a2 : false);
    };
    updateElementState();
    var observerCallback = function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.addedNodes.length || mutation.removedNodes.length) {
          Array.from(mutation.addedNodes).forEach(function(node) {
            if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {
              setIsElementMounted(true);
            }
          });
          Array.from(mutation.removedNodes).forEach(function(node) {
            if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {
              setIsElementMounted(false);
            }
          });
        }
      });
    };
    var observer = new MutationObserver(observerCallback);
    var observerOptions = {
      childList: true,
      // Observe addition and removal of child nodes
      subtree: true
      // Observe the entire subtree
    };
    targetElements === null || targetElements === void 0 ? void 0 : targetElements.forEach(function(target) {
      if (target)
        observer.observe(target, observerOptions);
    });
    return function() {
      observer.disconnect();
    };
  }, [selector, targetElement]);
  return isElementMounted;
}

// node_modules/@sendbird/uikit-react/ui/MessageContent.js
var import_react_dom14 = __toESM(require_react_dom(), 1);
function MessageProfile(props) {
  var message = props.message, channel = props.channel, userId = props.userId, _a = props.chainBottom, chainBottom = _a === void 0 ? false : _a, isByMe = props.isByMe, displayThreadReplies = props.displayThreadReplies, bottom = props.bottom;
  var avatarRef = (0, import_react49.useRef)(null);
  var _b = (0, import_react49.useContext)(UserProfileContext), disableUserProfile = _b.disableUserProfile, renderUserProfile = _b.renderUserProfile;
  if (isByMe || chainBottom || !isSendableMessage(message)) {
    return null;
  }
  return import_react49.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
    var _a2, _b2;
    return import_react49.default.createElement(Avatar$1, {
      className: classnames("sendbird-message-content__left__avatar", displayThreadReplies && "use-thread-replies"),
      src: ((_b2 = (_a2 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a2 === void 0 ? void 0 : _a2.find(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === message.sender.userId;
      })) === null || _b2 === void 0 ? void 0 : _b2.profileUrl) || message.sender.profileUrl || "",
      // TODO: Divide getting profileUrl logic to utils
      ref: avatarRef,
      width: "28px",
      height: "28px",
      bottom,
      onClick: function() {
        if (!disableUserProfile)
          toggleDropdown();
      }
    });
  }, menuItems: function(closeDropdown) {
    return renderUserProfile ? renderUserProfile({
      user: message.sender,
      close: closeDropdown,
      currentUserId: userId,
      avatarRef
    }) : import_react49.default.createElement(
      MenuItems,
      {
        /**
         * parentRef: For catching location(x, y) of MenuItems
         * parentContainRef: For toggling more options(menus & reactions)
        */
        parentRef: avatarRef,
        parentContainRef: avatarRef,
        closeDropdown,
        style: { paddingTop: "0px", paddingBottom: "0px" }
      },
      import_react49.default.createElement(UserProfile, { user: message.sender, onSuccess: closeDropdown })
    );
  } });
}
var MESSAGE_ITEM_BODY_CLASSNAME = "sendbird-message-content__middle__message-item-body";
function MessageBody(props) {
  var message = props.message, channel = props.channel, showFileViewer = props.showFileViewer, onMessageHeightChange = props.onMessageHeightChange, onTemplateMessageRenderedCallback = props.onTemplateMessageRenderedCallback, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, mouseHover = props.mouseHover, isMobile = props.isMobile, config = props.config, isReactionEnabledInChannel = props.isReactionEnabledInChannel, isByMe = props.isByMe;
  var threadMessageKindKey = useThreadMessageKindKeySelector({
    isMobile
  });
  var statefulFileInfoList = useFileInfoListWithUploaded(message);
  var messageTypes = getUIKitMessageTypes();
  var isOgMessageEnabledInGroupChannel = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && config.groupChannel.enableOgtag;
  return K(message).when(isTemplateMessage, function() {
    return import_react49.default.createElement(TemplateMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, isByMe, theme: config === null || config === void 0 ? void 0 : config.theme, onTemplateMessageRenderedCallback });
  }).when(function(message2) {
    return isOgMessageEnabledInGroupChannel && isSendableMessage(message2) && isOGMessage(message2);
  }, function() {
    var _a;
    return import_react49.default.createElement(OGMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, isByMe, mouseHover, isMentionEnabled: (_a = config.groupChannel.enableMention) !== null && _a !== void 0 ? _a : false, isReactionEnabled: isReactionEnabledInChannel, onMessageHeightChange, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage });
  }).when(isTextMessage, function() {
    var _a;
    return import_react49.default.createElement(TextMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, isByMe, mouseHover, isMentionEnabled: (_a = config.groupChannel.enableMention) !== null && _a !== void 0 ? _a : false, isReactionEnabled: isReactionEnabledInChannel, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage });
  }).when(function(message2) {
    return getUIKitMessageType(message2) === messageTypes.FILE;
  }, function() {
    return import_react49.default.createElement(FileMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel, onBeforeDownloadFileMessage });
  }).when(isMultipleFilesMessage, function() {
    return import_react49.default.createElement(MultipleFilesMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel, threadMessageKindKey, statefulFileInfoList, onBeforeDownloadFileMessage });
  }).when(isVoiceMessage, function() {
    var _a;
    return import_react49.default.createElement(VoiceMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, channelUrl: (_a = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _a !== void 0 ? _a : "", isByMe, isReactionEnabled: isReactionEnabledInChannel });
  }).when(isThumbnailMessage, function() {
    return import_react49.default.createElement(ThumbnailMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel, showFileViewer, style: isMobile ? { width: "100%" } : {} });
  }).otherwise(function(message2) {
    return import_react49.default.createElement(UnknownMessageItemBody, { className: MESSAGE_ITEM_BODY_CLASSNAME, message: message2, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel });
  });
}
function MessageHeader(props) {
  var _a, _b;
  var channel = props.channel, message = props.message;
  return import_react49.default.createElement(
    Label,
    { className: "sendbird-message-content__middle__sender-name", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 },
    /**
     * To use the latest member profile information, message.sender might be outdated
     */
    ((_b = (_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.find(function(member) {
      var _a2;
      return (member === null || member === void 0 ? void 0 : member.userId) === ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId);
    })) === null || _b === void 0 ? void 0 : _b.nickname) || getSenderName(message)
    // TODO: Divide getting profileUrl logic to utils
  );
}
var SbFeedbackStatus;
(function(SbFeedbackStatus2) {
  SbFeedbackStatus2["NOT_APPLICABLE"] = "NOT_APPLICABLE";
  SbFeedbackStatus2["NO_FEEDBACK"] = "NO_FEEDBACK";
  SbFeedbackStatus2["SUBMITTED"] = "SUBMITTED";
})(SbFeedbackStatus || (SbFeedbackStatus = {}));
function MessageContent(props) {
  var _this = this;
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  var className = props.className, userId = props.userId, channel = props.channel, message = props.message, _r = props.disabled, disabled = _r === void 0 ? false : _r, _s = props.chainTop, chainTop = _s === void 0 ? false : _s, _t = props.chainBottom, chainBottom = _t === void 0 ? false : _t, _u = props.isReactionEnabled, isReactionEnabled = _u === void 0 ? false : _u, _v = props.disableQuoteMessage, disableQuoteMessage = _v === void 0 ? false : _v, replyType = props.replyType, threadReplySelectType = props.threadReplySelectType, nicknamesMap = props.nicknamesMap, emojiContainer = props.emojiContainer, scrollToMessage = props.scrollToMessage, showEdit = props.showEdit, showRemove = props.showRemove, showFileViewer = props.showFileViewer, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, toggleReaction = props.toggleReaction, setQuoteMessage = props.setQuoteMessage, onReplyInThread = props.onReplyInThread, onQuoteMessageClick = props.onQuoteMessageClick, onMessageHeightChange = props.onMessageHeightChange, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage;
  var _w = deleteNullish(props), _x = _w.renderSenderProfile, renderSenderProfile = _x === void 0 ? function(props2) {
    return import_react49.default.createElement(MessageProfile, __assign({}, props2));
  } : _x, _y = _w.renderMessageBody, renderMessageBody = _y === void 0 ? function(props2) {
    return import_react49.default.createElement(MessageBody, __assign({}, props2));
  } : _y, _z = _w.renderMessageHeader, renderMessageHeader = _z === void 0 ? function(props2) {
    return import_react49.default.createElement(MessageHeader, __assign({}, props2));
  } : _z, _0 = _w.renderMessageMenu, renderMessageMenu = _0 === void 0 ? function(props2) {
    return import_react49.default.createElement(MessageMenu, __assign({}, props2));
  } : _0, _1 = _w.renderEmojiMenu, renderEmojiMenu = _1 === void 0 ? function(props2) {
    return import_react49.default.createElement(MessageEmojiMenu, __assign({}, props2));
  } : _1, _2 = _w.renderEmojiReactions, renderEmojiReactions = _2 === void 0 ? function(props2) {
    return import_react49.default.createElement(EmojiReactions, __assign({}, props2));
  } : _2, _3 = _w.renderMobileMenuOnLongPress, renderMobileMenuOnLongPress = _3 === void 0 ? function(props2) {
    return import_react49.default.createElement(MobileMenu, __assign({}, props2));
  } : _3;
  var dateLocale = useLocalization().dateLocale;
  var _4 = useSendbirdStateContext(), config = _4.config, eventHandlers = _4.eventHandlers;
  var logger = config.logger;
  var onPressUserProfileHandler = (_a = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _a === void 0 ? void 0 : _a.onPressUserProfile;
  var contentRef = (0, import_react49.useRef)();
  var timestampRef = (0, import_react49.useRef)();
  var threadRepliesRef = (0, import_react49.useRef)();
  var feedbackButtonsRef = (0, import_react49.useRef)();
  var isMobile = useMediaQueryContext().isMobile;
  var _5 = (0, import_react49.useState)(false), showMenu = _5[0], setShowMenu = _5[1];
  var _6 = (0, import_react49.useState)(false), mouseHover = _6[0], setMouseHover = _6[1];
  var isMenuMounted = useElementObserver("#".concat(getObservingId(message.messageId), ".").concat(MENU_OBSERVING_CLASS_NAME), [
    document.getElementById(MENU_ROOT_ID),
    document.getElementById(EMOJI_MENU_ROOT_ID)
  ]);
  var _7 = (0, import_react49.useState)(false), showFeedbackOptionsMenu = _7[0], setShowFeedbackOptionsMenu = _7[1];
  var _8 = (0, import_react49.useState)(false), showFeedbackModal = _8[0], setShowFeedbackModal = _8[1];
  var _9 = (0, import_react49.useState)(""), feedbackFailedText = _9[0], setFeedbackFailedText = _9[1];
  var _10 = (0, import_react49.useState)(getMessageContentMiddleClassNameByContainerType({
    message,
    isMobile
  })), uiContainerType = _10[0], setUiContainerType = _10[1];
  var onTemplateMessageRenderedCallback = function(renderedTemplateType) {
    if (renderedTemplateType === "failed") {
      setUiContainerType(UI_CONTAINER_TYPES.DEFAULT);
    } else if (renderedTemplateType === "composite") {
      setUiContainerType(UI_CONTAINER_TYPES.DEFAULT_CAROUSEL);
    }
  };
  var stringSet = (0, import_react49.useContext)(LocalizationContext).stringSet;
  var isByMe = userId === ((_b = message === null || message === void 0 ? void 0 : message.sender) === null || _b === void 0 ? void 0 : _b.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "pending" || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "failed";
  var isByMeClassName = isByMe ? "outgoing" : "incoming";
  var chainTopClassName = chainTop ? "chain-top" : "";
  var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);
  var isReactionEnabledClassName = isReactionEnabledInChannel ? "use-reactions" : "";
  var hoveredMenuClassName = isMenuMounted ? "sendbird-mouse-hover" : "";
  var useReplying = !!((replyType === "QUOTE_REPLY" || replyType === "THREAD") && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage) && !disableQuoteMessage);
  var useReplyingClassName = useReplying ? "use-quote" : "";
  var displayThreadReplies = ((_c = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _c === void 0 ? void 0 : _c.replyCount) && message.threadInfo.replyCount > 0 && replyType === "THREAD";
  var isFeedbackMessage = !isByMe && !!(message === null || message === void 0 ? void 0 : message.myFeedbackStatus) && message.myFeedbackStatus !== SbFeedbackStatus.NOT_APPLICABLE;
  var isFeedbackEnabled = !!((_d = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _d === void 0 ? void 0 : _d.enableFeedback) && isFeedbackMessage;
  var hasFeedback = (_e = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _e === void 0 ? void 0 : _e.rating;
  var isNotTemplateMessage = !isTemplateMessage(message);
  var showLongPressMenu = isNotTemplateMessage && isMobile;
  var showOutgoingMenu = isNotTemplateMessage && isByMe && !isMobile;
  var showThreadReplies = isNotTemplateMessage && displayThreadReplies;
  var showRightContent = isNotTemplateMessage && !isByMe && !isMobile;
  var isTimestampBottom = !!uiContainerType;
  var getTotalBottom = function() {
    var sum = 2;
    if (timestampRef.current && isTimestampBottom) {
      sum += 4 + timestampRef.current.clientHeight;
    }
    if (threadRepliesRef.current) {
      sum += 4 + threadRepliesRef.current.clientHeight;
    }
    if (feedbackButtonsRef.current) {
      sum += 4 + feedbackButtonsRef.current.clientHeight;
    }
    return sum;
  };
  var totalBottom = (0, import_react49.useMemo)(function() {
    return getTotalBottom();
  }, [isTimestampBottom]);
  var onCloseFeedbackForm = function() {
    setShowFeedbackModal(false);
  };
  var openFeedbackFormOrMenu = function(hasFeedback2) {
    if (hasFeedback2 === void 0) {
      hasFeedback2 = false;
    }
    if (isMobile && hasFeedback2) {
      setShowFeedbackOptionsMenu(true);
    } else {
      setShowFeedbackModal(true);
    }
  };
  var longPress = useLongPress({
    onLongPress: function() {
      if (showLongPressMenu) {
        setShowMenu(true);
      }
    },
    onClick: noop
  }, {
    delay: 300,
    shouldPreventDefault: false
  });
  if (isAdminMessage(message)) {
    return import_react49.default.createElement(AdminMessage, { message });
  }
  return import_react49.default.createElement(
    "div",
    { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-message-content",
      isByMeClassName,
      uiContainerType
    ]), onMouseOver: function() {
      return setMouseHover(true);
    }, onMouseLeave: function() {
      return setMouseHover(false);
    } },
    import_react49.default.createElement(
      "div",
      { className: classnames("sendbird-message-content__left", isReactionEnabledClassName, isByMeClassName, useReplyingClassName), "data-testid": "sendbird-message-content__left" },
      renderSenderProfile(__assign(__assign({}, props), { isByMe, displayThreadReplies, bottom: totalBottom > 0 ? totalBottom + "px" : "" })),
      showOutgoingMenu && import_react49.default.createElement(
        "div",
        { className: classnames("sendbird-message-content-menu", isReactionEnabledClassName, hoveredMenuClassName, isByMeClassName) },
        renderMessageMenu({
          channel,
          message,
          isByMe,
          replyType,
          showEdit,
          showRemove,
          resendMessage,
          setQuoteMessage,
          onReplyInThread: function(_a2) {
            var _b2, _c2;
            var message2 = _a2.message;
            if (threadReplySelectType === ThreadReplySelectType.THREAD) {
              onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message: message2 });
            } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
              scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage((_c2 = (_b2 = message2.parentMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt) !== null && _c2 !== void 0 ? _c2 : 0, message2.parentMessageId);
            }
          },
          deleteMessage
        }),
        isReactionEnabledInChannel && renderEmojiMenu({
          message,
          userId,
          emojiContainer,
          toggleReaction
        })
      )
    ),
    import_react49.default.createElement(
      "div",
      __assign({ className: classnames("sendbird-message-content__middle", isTemplateMessage(message) && "sendbird-message-content__middle__for_template_message", uiContainerType), "data-testid": "sendbird-message-content__middle" }, isMobile ? __assign({}, longPress) : {}, { ref: contentRef }),
      !isByMe && !chainTop && !useReplying && renderMessageHeader(props),
      useReplying ? import_react49.default.createElement(
        "div",
        { className: classnames("sendbird-message-content__middle__quote-message", isByMe ? "outgoing" : "incoming", useReplyingClassName), "data-testid": "sendbird-message-content__middle__quote-message" },
        import_react49.default.createElement(QuoteMessage, { className: "sendbird-message-content__middle__quote-message__quote", message, userId, isByMe, isUnavailable: ((_f = channel === null || channel === void 0 ? void 0 : channel.messageOffsetTimestamp) !== null && _f !== void 0 ? _f : 0) > ((_h = (_g = message.parentMessage) === null || _g === void 0 ? void 0 : _g.createdAt) !== null && _h !== void 0 ? _h : 0), onClick: function() {
          var _a2;
          if (replyType === "THREAD" && threadReplySelectType === ThreadReplySelectType.THREAD) {
            onQuoteMessageClick === null || onQuoteMessageClick === void 0 ? void 0 : onQuoteMessageClick({ message });
          }
          if ((replyType === "QUOTE_REPLY" || replyType === "THREAD" && threadReplySelectType === ThreadReplySelectType.PARENT) && ((_a2 = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _a2 === void 0 ? void 0 : _a2.createdAt) && (message === null || message === void 0 ? void 0 : message.parentMessageId)) {
            scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);
          }
        } })
      ) : null,
      import_react49.default.createElement(
        "div",
        { className: classnames("sendbird-message-content__middle__body-container", isTemplateMessage(message) && "sendbird-message-content__middle__for_template_message") },
        isByMe && !chainBottom && import_react49.default.createElement(
          "div",
          { className: classnames("sendbird-message-content__middle__body-container__created-at", "left", hoveredMenuClassName, uiContainerType), ref: timestampRef },
          import_react49.default.createElement(
            "div",
            { className: "sendbird-message-content__middle__body-container__created-at__component-container" },
            import_react49.default.createElement(MessageStatus, { message, channel })
          )
        ),
        renderMessageBody({
          message,
          channel,
          showFileViewer,
          onMessageHeightChange,
          mouseHover,
          isMobile,
          config,
          isReactionEnabledInChannel,
          isByMe,
          onTemplateMessageRenderedCallback,
          onBeforeDownloadFileMessage
        }),
        isReactionEnabledInChannel && ((_j = message === null || message === void 0 ? void 0 : message.reactions) === null || _j === void 0 ? void 0 : _j.length) > 0 && import_react49.default.createElement("div", { className: classnames("sendbird-message-content-reactions", isMultipleFilesMessage(message) ? "image-grid" : isByMe && !isThumbnailMessage(message) && !isOGMessage(message) && "primary", mouseHover && "mouse-hover") }, renderEmojiReactions({
          userId,
          message,
          channel,
          isByMe,
          // @ts-ignore
          emojiContainer: emojiContainer !== null && emojiContainer !== void 0 ? emojiContainer : new mt({}),
          memberNicknamesMap: nicknamesMap !== null && nicknamesMap !== void 0 ? nicknamesMap : /* @__PURE__ */ new Map(),
          toggleReaction,
          onPressUserProfile: onPressUserProfileHandler
        })),
        !isByMe && !chainBottom && import_react49.default.createElement(Label, { className: classnames("sendbird-message-content__middle__body-container__created-at", "right", hoveredMenuClassName, uiContainerType), type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2, ref: timestampRef }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, "p", {
          locale: dateLocale
        }))
      ),
      isTimestampBottom && import_react49.default.createElement("div", { style: {
        width: "100%",
        height: ((_l = (_k = timestampRef.current) === null || _k === void 0 ? void 0 : _k.clientHeight) !== null && _l !== void 0 ? _l : 0) + "px",
        marginTop: "4px"
      } }),
      showThreadReplies && (message === null || message === void 0 ? void 0 : message.threadInfo) && import_react49.default.createElement(ThreadReplies$1, { className: "sendbird-message-content__middle__thread-replies", threadInfo: message === null || message === void 0 ? void 0 : message.threadInfo, onClick: function() {
        return onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message });
      }, ref: threadRepliesRef }),
      isFeedbackEnabled && import_react49.default.createElement(
        "div",
        { className: "sendbird-message-content__middle__body-container__feedback-buttons-container", ref: feedbackButtonsRef },
        import_react49.default.createElement(
          FeedbackIconButton,
          { isSelected: ((_m = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _m === void 0 ? void 0 : _m.rating) === xe.GOOD, onClick: function() {
            return __awaiter(_this, void 0, void 0, function() {
              var error_1;
              var _a2, _b2;
              return __generator(this, function(_c2) {
                switch (_c2.label) {
                  case 0:
                    if (!!hasFeedback) return [3, 5];
                    _c2.label = 1;
                  case 1:
                    _c2.trys.push([1, 3, , 4]);
                    return [4, message.submitFeedback({
                      rating: xe.GOOD
                    })];
                  case 2:
                    _c2.sent();
                    openFeedbackFormOrMenu();
                    return [3, 4];
                  case 3:
                    error_1 = _c2.sent();
                    (_b2 = (_a2 = config === null || config === void 0 ? void 0 : config.logger) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "Channel: Submit feedback failed.", error_1);
                    setFeedbackFailedText(stringSet.FEEDBACK_FAILED_SUBMIT);
                    return [3, 4];
                  case 4:
                    return [3, 6];
                  case 5:
                    openFeedbackFormOrMenu(true);
                    _c2.label = 6;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, disabled: !!(message === null || message === void 0 ? void 0 : message.myFeedback) && message.myFeedback.rating !== xe.GOOD },
          import_react49.default.createElement(Icon, { type: IconTypes.FEEDBACK_LIKE, width: "24px", height: "24px" })
        ),
        import_react49.default.createElement(
          FeedbackIconButton,
          { isSelected: ((_o = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _o === void 0 ? void 0 : _o.rating) === xe.BAD, onClick: function() {
            return __awaiter(_this, void 0, void 0, function() {
              var error_2;
              var _a2, _b2;
              return __generator(this, function(_c2) {
                switch (_c2.label) {
                  case 0:
                    if (!!hasFeedback) return [3, 5];
                    _c2.label = 1;
                  case 1:
                    _c2.trys.push([1, 3, , 4]);
                    return [4, message.submitFeedback({
                      rating: xe.BAD
                    })];
                  case 2:
                    _c2.sent();
                    openFeedbackFormOrMenu();
                    return [3, 4];
                  case 3:
                    error_2 = _c2.sent();
                    (_b2 = (_a2 = config === null || config === void 0 ? void 0 : config.logger) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "Channel: Submit feedback failed.", error_2);
                    setFeedbackFailedText(stringSet.FEEDBACK_FAILED_SUBMIT);
                    return [3, 4];
                  case 4:
                    return [3, 6];
                  case 5:
                    openFeedbackFormOrMenu(true);
                    _c2.label = 6;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, disabled: !!(message === null || message === void 0 ? void 0 : message.myFeedback) && message.myFeedback.rating !== xe.BAD },
          import_react49.default.createElement(Icon, { type: IconTypes.FEEDBACK_DISLIKE, width: "24px", height: "24px" })
        )
      )
    ),
    showRightContent && import_react49.default.createElement(
      "div",
      { className: classnames("sendbird-message-content__right", chainTopClassName, isReactionEnabledClassName, useReplyingClassName), "data-testid": "sendbird-message-content__right" },
      import_react49.default.createElement(
        "div",
        { className: classnames("sendbird-message-content-menu", chainTopClassName, hoveredMenuClassName, isByMeClassName) },
        isReactionEnabledInChannel && renderEmojiMenu({
          className: "sendbird-message-content-menu__reaction-menu",
          message,
          userId,
          emojiContainer,
          toggleReaction
        }),
        renderMessageMenu({
          className: "sendbird-message-content-menu__normal-menu",
          channel,
          message,
          isByMe,
          replyType,
          showRemove,
          resendMessage,
          setQuoteMessage,
          onReplyInThread: function(_a2) {
            var _b2, _c2;
            var message2 = _a2.message;
            if (threadReplySelectType === ThreadReplySelectType.THREAD) {
              onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message: message2 });
            } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
              scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage((_c2 = (_b2 = message2.parentMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt) !== null && _c2 !== void 0 ? _c2 : 0, message2.parentMessageId);
            }
          },
          deleteMessage
        })
      )
    ),
    showMenu && isSendableMessage(message) && channel && renderMobileMenuOnLongPress({
      parentRef: contentRef,
      channel,
      hideMenu: function() {
        setShowMenu(false);
      },
      message,
      isReactionEnabled: isReactionEnabledInChannel,
      isByMe,
      userId,
      replyType,
      disabled,
      showRemove,
      emojiContainer,
      resendMessage,
      deleteMessage,
      setQuoteMessage,
      toggleReaction,
      showEdit,
      onReplyInThread: function(_a2) {
        var _b2;
        var message2 = _a2.message;
        if (threadReplySelectType === ThreadReplySelectType.THREAD) {
          onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message: message2 });
        } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
          scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage(((_b2 = message2 === null || message2 === void 0 ? void 0 : message2.parentMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt) || 0, (message2 === null || message2 === void 0 ? void 0 : message2.parentMessageId) || 0);
        }
      },
      onDownloadClick: function(e) {
        return __awaiter(_this, void 0, void 0, function() {
          var allowDownload, err_1;
          var _a2, _b2;
          return __generator(this, function(_c2) {
            switch (_c2.label) {
              case 0:
                if (!onBeforeDownloadFileMessage) {
                  return [
                    2
                    /*return*/
                  ];
                }
                _c2.label = 1;
              case 1:
                _c2.trys.push([1, 3, , 4]);
                return [4, onBeforeDownloadFileMessage({ message })];
              case 2:
                allowDownload = _c2.sent();
                if (!allowDownload) {
                  e.preventDefault();
                  (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "MessageContent: Not allowed to download.");
                }
                return [3, 4];
              case 3:
                err_1 = _c2.sent();
                (_b2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "MessageContent: Error occurred while determining download continuation:", err_1);
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
    }),
    ((_p = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _p === void 0 ? void 0 : _p.rating) && showFeedbackOptionsMenu && import_react49.default.createElement(MobileFeedbackMenu, { hideMenu: function() {
      setShowFeedbackOptionsMenu(false);
    }, onEditFeedback: function() {
      setShowFeedbackOptionsMenu(false);
      setShowFeedbackModal(true);
    }, onRemoveFeedback: function() {
      return __awaiter(_this, void 0, void 0, function() {
        var error_3;
        var _a2, _b2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              _c2.trys.push([0, 3, , 4]);
              if (!(message.myFeedback !== null)) return [3, 2];
              return [4, message.deleteFeedback(message.myFeedback.id)];
            case 1:
              _c2.sent();
              _c2.label = 2;
            case 2:
              return [3, 4];
            case 3:
              error_3 = _c2.sent();
              (_b2 = (_a2 = config === null || config === void 0 ? void 0 : config.logger) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "Channel: Delete feedback failed.", error_3);
              setFeedbackFailedText(stringSet.FEEDBACK_FAILED_DELETE);
              return [3, 4];
            case 4:
              setShowFeedbackOptionsMenu(false);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } }),
    ((_q = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _q === void 0 ? void 0 : _q.rating) && showFeedbackModal && import_react49.default.createElement(MessageFeedbackModal, { selectedFeedback: message.myFeedback.rating, message, onUpdate: function(selectedFeedback, comment) {
      return __awaiter(_this, void 0, void 0, function() {
        var newFeedback, error_4;
        var _a2, _b2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!(message.myFeedback !== null)) return [3, 4];
              newFeedback = new Be({
                id: message.myFeedback.id,
                rating: selectedFeedback,
                comment
              });
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              return [4, message.updateFeedback(newFeedback)];
            case 2:
              _c2.sent();
              return [3, 4];
            case 3:
              error_4 = _c2.sent();
              (_b2 = (_a2 = config === null || config === void 0 ? void 0 : config.logger) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "Channel: Update feedback failed.", error_4);
              setFeedbackFailedText(stringSet.FEEDBACK_FAILED_SAVE);
              return [3, 4];
            case 4:
              onCloseFeedbackForm();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, onClose: onCloseFeedbackForm, onRemove: function() {
      return __awaiter(_this, void 0, void 0, function() {
        var error_5;
        var _a2, _b2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              _c2.trys.push([0, 3, , 4]);
              if (!(message.myFeedback !== null)) return [3, 2];
              return [4, message.deleteFeedback(message.myFeedback.id)];
            case 1:
              _c2.sent();
              _c2.label = 2;
            case 2:
              return [3, 4];
            case 3:
              error_5 = _c2.sent();
              (_b2 = (_a2 = config === null || config === void 0 ? void 0 : config.logger) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "Channel: Delete feedback failed.", error_5);
              setFeedbackFailedText(stringSet.FEEDBACK_FAILED_DELETE);
              return [3, 4];
            case 4:
              onCloseFeedbackForm();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } }),
    feedbackFailedText && import_react49.default.createElement(MessageFeedbackFailedModal, { text: feedbackFailedText, onCancel: function() {
      setFeedbackFailedText("");
    } })
  );
}

// node_modules/@sendbird/uikit-react/GroupChannel/components/SuggestedReplies.js
var import_react50 = __toESM(require_react(), 1);
var ReplyItem = function(_a) {
  var value = _a.value, onClickReply = _a.onClickReply, _b = _a.type, type = _b === void 0 ? "vertical" : _b;
  return import_react50.default.createElement("div", { className: "sendbird-suggested-replies__option ".concat(type), id: value, onClick: function(e) {
    return onClickReply(e, value);
  } }, value);
};
var SuggestedReplies = function(_a) {
  var replyOptions = _a.replyOptions, onSendMessage = _a.onSendMessage, _b = _a.type, type = _b === void 0 ? "vertical" : _b;
  var _c = (0, import_react50.useState)(false), replied = _c[0], setReplied = _c[1];
  var onClickReply = function(event, option) {
    event.preventDefault();
    onSendMessage({ message: option });
    setReplied(true);
  };
  if (replied) {
    return null;
  }
  var children = replyOptions.map(function(option, index) {
    return import_react50.default.createElement(ReplyItem, { key: index, value: option, onClickReply, type });
  });
  return import_react50.default.createElement("div", { className: "sendbird-suggested-replies ".concat(type) }, children);
};

// node_modules/@sendbird/uikit-react/chunks/bundle-C_WYFRJt.js
var import_react51 = __toESM(require_react(), 1);
function SuggestedUserMentionItem(props) {
  var member = props.member, _a = props.isFocused, isFocused = _a === void 0 ? false : _a, parentScrollRef = props.parentScrollRef, onClick = props.onClick, onMouseOver = props.onMouseOver, onMouseMove = props.onMouseMove, renderUserMentionItem = props.renderUserMentionItem;
  var scrollRef = (0, import_react51.useRef)(null);
  var stringSet = (0, import_react51.useContext)(LocalizationContext).stringSet;
  (0, import_react51.useEffect)(function() {
    if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {
      scrollRef.current.scrollIntoView({ block: "nearest", inline: "nearest" });
    }
  }, [isFocused]);
  var customMentionItem = (0, import_react51.useMemo)(function() {
    if (renderUserMentionItem) {
      return import_react51.default.createElement("div", { className: "sendbird-mention-suggest-list__user-item", onClick: function(event) {
        return onClick === null || onClick === void 0 ? void 0 : onClick({ event, member, itemRef: scrollRef });
      }, onMouseOver: function(event) {
        return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event, member, itemRef: scrollRef });
      }, onMouseMove: function(event) {
        return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event, member, itemRef: scrollRef });
      }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef }, renderUserMentionItem({ user: member }));
    }
  }, [renderUserMentionItem]);
  if (customMentionItem) {
    return customMentionItem;
  }
  return import_react51.default.createElement(
    "div",
    { className: classnames("sendbird-mention-suggest-list__user-item", isFocused && "focused"), onClick: function(event) {
      return onClick === null || onClick === void 0 ? void 0 : onClick({ event, member, itemRef: scrollRef });
    }, onMouseOver: function(event) {
      return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event, member, itemRef: scrollRef });
    }, onMouseMove: function(event) {
      return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event, member, itemRef: scrollRef });
    }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef },
    import_react51.default.createElement(Avatar$1, { className: "sendbird-mention-suggest-list__user-item__avatar", src: member === null || member === void 0 ? void 0 : member.profileUrl, alt: "user-profile", width: "24px", height: "24px" }),
    import_react51.default.createElement(Label, { className: "sendbird-mention-suggest-list__user-item__nickname", testID: "sendbird-mention-suggest-list__user-item__nickname", type: LabelTypography.SUBTITLE_2, color: (member === null || member === void 0 ? void 0 : member.nickname) ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3 }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)),
    import_react51.default.createElement(Label, { className: "sendbird-mention-suggest-list__user-item__user-id", testID: "sendbird-mention-suggest-list__user-item__user-id", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, member === null || member === void 0 ? void 0 : member.userId)
  );
}
function fetchMembersFromChannel(currentUserId, channel, maxSuggestionCount, searchString) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, channel.members.sort(function(a, b) {
        var _a2;
        return (_a2 = a.nickname) === null || _a2 === void 0 ? void 0 : _a2.localeCompare(b.nickname);
      }).filter(function(member) {
        var _a2;
        return ((_a2 = member.nickname) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase().startsWith(searchString.toLowerCase())) && member.userId !== currentUserId && member.isActive;
      }).slice(0, maxSuggestionCount)];
    });
  });
}
function fetchMembersFromQuery(currentUserId, channel, maxSuggestionCount, searchString) {
  return __awaiter(this, void 0, void 0, function() {
    var query;
    return __generator(this, function(_a) {
      query = channel.createMemberListQuery({
        limit: maxSuggestionCount + 1,
        // because current user could be included
        nicknameStartsWithFilter: searchString
      });
      return [2, query.next().then(function(memberList) {
        return memberList.filter(function(member) {
          return currentUserId !== (member === null || member === void 0 ? void 0 : member.userId);
        }).slice(0, maxSuggestionCount);
      })];
    });
  });
}
var DEBOUNCING_TIME = 300;
var SuggestedMentionListView = function(props) {
  var _a, _b, _c;
  var className = props.className, currentChannel = props.currentChannel, _d = props.targetNickname, targetNickname = _d === void 0 ? "" : _d, onUserItemClick = props.onUserItemClick, onFocusItemChange = props.onFocusItemChange, onFetchUsers = props.onFetchUsers, renderUserMentionItem = props.renderUserMentionItem, inputEvent = props.inputEvent, _e = props.ableAddMention, ableAddMention = _e === void 0 ? true : _e, _f = props.maxMentionCount, maxMentionCount = _f === void 0 ? MAX_USER_MENTION_COUNT : _f, _g = props.maxSuggestionCount, maxSuggestionCount = _g === void 0 ? MAX_USER_SUGGESTION_COUNT : _g;
  var _h = useSendbirdStateContext(), config = _h.config, stores = _h.stores;
  var logger = config.logger;
  var currentUserId = ((_c = (_b = (_a = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a === void 0 ? void 0 : _a.sdk) === null || _b === void 0 ? void 0 : _b.currentUser) === null || _c === void 0 ? void 0 : _c.userId) || "";
  var scrollRef = (0, import_react51.useRef)(null);
  var stringSet = useLocalization().stringSet;
  var _j = (0, import_react51.useState)(null), timer = _j[0], setTimer = _j[1];
  var _k = (0, import_react51.useState)(""), searchString = _k[0], setSearchString = _k[1];
  var _l = (0, import_react51.useState)(""), lastSearchString = _l[0], setLastSearchString = _l[1];
  var _m = (0, import_react51.useState)(null), currentFocusedMember = _m[0], setCurrentFocusedMember = _m[1];
  var _o = (0, import_react51.useState)([]), currentMemberList = _o[0], setCurrentMemberList = _o[1];
  (0, import_react51.useEffect)(function() {
    clearTimeout(timer !== null && timer !== void 0 ? timer : void 0);
    setTimer(setTimeout(function() {
      setSearchString(targetNickname);
    }, DEBOUNCING_TIME));
  }, [targetNickname]);
  (0, import_react51.useEffect)(function() {
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {
      if (currentFocusedMember && currentMemberList.length > 0) {
        onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(currentFocusedMember);
      }
    }
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {
      var currentUserIndex = currentMemberList.findIndex(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId);
      });
      if (0 < currentUserIndex) {
        setCurrentFocusedMember(currentMemberList[currentUserIndex - 1]);
        onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex - 1]);
      }
    }
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {
      var currentUserIndex = currentMemberList.findIndex(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId);
      });
      if (currentUserIndex < currentMemberList.length - 1) {
        setCurrentFocusedMember(currentMemberList[currentUserIndex + 1]);
        onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex + 1]);
      }
    }
  }, [inputEvent]);
  (0, import_react51.useEffect)(function() {
    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {
      return;
    }
    if (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) {
      if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.createMemberListQuery)) {
        logger.warning("SuggestedMentionList: Creating member list query failed");
        return;
      }
    }
    var fetcher = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) ? fetchMembersFromQuery : fetchMembersFromChannel;
    fetcher(currentUserId, currentChannel, maxSuggestionCount, searchString.slice(USER_MENTION_TEMP_CHAR.length)).then(function(suggestingMembers) {
      if (suggestingMembers.length < 1) {
        logger.info("SuggestedMentionList: Fetched member list is empty");
      } else {
        logger.info("SuggestedMentionList: Fetching member list succeeded", { memberList: suggestingMembers });
        setCurrentFocusedMember(suggestingMembers[0]);
      }
      setLastSearchString(searchString);
      onFetchUsers === null || onFetchUsers === void 0 ? void 0 : onFetchUsers(suggestingMembers);
      setCurrentMemberList(suggestingMembers);
    }).catch(function(error) {
      if (error) {
        logger.error("SuggestedMentionList: Fetching member list failed", error);
      }
    });
  }, [
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    // We have to be specific like this or React would not recognize the changes in instances.
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function(member) {
      return member.nickname;
    }).join(),
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function(member) {
      return member.isActive;
    }).join(),
    searchString,
    maxSuggestionCount,
    currentUserId,
    currentMemberList.length,
    lastSearchString
  ]);
  if (!ableAddMention && currentMemberList.length === 0) {
    return null;
  }
  return import_react51.default.createElement(
    "div",
    { className: classnames("sendbird-mention-suggest-list", className), "data-testid": "sendbird-mention-suggest-list", key: "sendbird-mention-suggest-list", ref: scrollRef },
    ableAddMention && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(function(member) {
      return import_react51.default.createElement(SuggestedUserMentionItem, { key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), member, isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId), parentScrollRef: scrollRef, onClick: function(_a2) {
        var member2 = _a2.member;
        onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(member2);
      }, onMouseOver: function(_a2) {
        var member2 = _a2.member;
        setCurrentFocusedMember(member2);
      }, renderUserMentionItem });
    })),
    !ableAddMention && import_react51.default.createElement(
      "div",
      { className: "sendbird-mention-suggest-list__notice-item" },
      import_react51.default.createElement(Icon, { className: "sendbird-mention-suggest-list__notice-item__icon", type: IconTypes.INFO, fillColor: IconColors.ON_BACKGROUND_2, width: "20px", height: "20px" }),
      import_react51.default.createElement(Label, { className: "sendbird-mention-suggest-list__notice-item__text", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.MENTION_COUNT__OVER_LIMIT.replace("%d", String(maxMentionCount)))
    )
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-CAXTSiql.js
var useDidMountEffect = function(func, deps) {
  var _a = (0, import_react52.useState)(false), didMount = _a[0], setDidmount = _a[1];
  (0, import_react52.useEffect)(function() {
    if (didMount) {
      func();
    } else {
      setDidmount(true);
    }
  }, deps);
};
var MessageView = function(props) {
  var _a, _b;
  var message = props.message, children = props.children, hasSeparator = props.hasSeparator, chainTop = props.chainTop, chainBottom = props.chainBottom, handleScroll = props.handleScroll, channel = props.channel, emojiContainer = props.emojiContainer, editInputDisabled = props.editInputDisabled, shouldRenderSuggestedReplies = props.shouldRenderSuggestedReplies, isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, threadReplySelectType = props.threadReplySelectType, nicknamesMap = props.nicknamesMap, scrollToMessage = props.scrollToMessage, toggleReaction = props.toggleReaction, setQuoteMessage = props.setQuoteMessage, onQuoteMessageClick = props.onQuoteMessageClick, onReplyInThreadClick = props.onReplyInThreadClick, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, sendUserMessage = props.sendUserMessage, updateUserMessage = props.updateUserMessage, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, setAnimatedMessageId = props.setAnimatedMessageId, animatedMessageId = props.animatedMessageId, onMessageAnimated = props.onMessageAnimated, _c = props.usedInLegacy, usedInLegacy = _c === void 0 ? true : _c;
  var _d = deleteNullish(props), renderUserMentionItem = _d.renderUserMentionItem, renderMessage = _d.renderMessage, _e = _d.renderMessageContent, renderMessageContent = _e === void 0 ? function(props2) {
    return import_react52.default.createElement(MessageContent, __assign({}, props2));
  } : _e, _f = _d.renderSuggestedReplies, renderSuggestedReplies = _f === void 0 ? function(props2) {
    return import_react52.default.createElement(SuggestedReplies, __assign({}, props2));
  } : _f, renderCustomSeparator = _d.renderCustomSeparator, renderEditInput = _d.renderEditInput, renderFileViewer = _d.renderFileViewer, renderRemoveMessageModal = _d.renderRemoveMessageModal;
  var _g = useLocalization(), dateLocale = _g.dateLocale, stringSet = _g.stringSet;
  var globalStore = useSendbirdStateContext();
  var _h = globalStore.config, userId = _h.userId, isOnline = _h.isOnline, userMention = _h.userMention, logger = _h.logger, groupChannel = _h.groupChannel;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;
  var _j = (0, import_react52.useState)(false), showEdit = _j[0], setShowEdit = _j[1];
  var _k = (0, import_react52.useState)(false), showRemove = _k[0], setShowRemove = _k[1];
  var _l = (0, import_react52.useState)(false), showFileViewer = _l[0], setShowFileViewer = _l[1];
  var _m = (0, import_react52.useState)(false), isAnimated = _m[0], setIsAnimated = _m[1];
  var _o = (0, import_react52.useState)(""), mentionNickname = _o[0], setMentionNickname = _o[1];
  var _p = (0, import_react52.useState)([]), mentionedUsers = _p[0], setMentionedUsers = _p[1];
  var _q = (0, import_react52.useState)([]), mentionedUserIds = _q[0], setMentionedUserIds = _q[1];
  var _r = (0, import_react52.useState)(null), messageInputEvent = _r[0], setMessageInputEvent = _r[1];
  var _s = (0, import_react52.useState)(null), selectedUser = _s[0], setSelectedUser = _s[1];
  var _t = (0, import_react52.useState)([]), mentionSuggestedUsers = _t[0], setMentionSuggestedUsers = _t[1];
  var editMessageInputRef = (0, import_react52.useRef)(null);
  var messageScrollRef = (0, import_react52.useRef)(null);
  var displaySuggestedMentionList = isOnline && groupChannel.enableMention && mentionNickname.length > 0 && !isDisabledBecauseFrozen(channel) && !isDisabledBecauseMuted(channel);
  var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  (0, import_react52.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId2 = _a2.userId;
      var i = mentionedUserIds.indexOf(userId2);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  useDidMountEffect(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, [showEdit, (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.length]);
  useDidMountEffect(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  var prevShouldRenderSuggestedReplies = (0, import_react52.useRef)(shouldRenderSuggestedReplies);
  (0, import_react52.useEffect)(function() {
    if (prevShouldRenderSuggestedReplies.current !== shouldRenderSuggestedReplies) {
      handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
    } else {
      prevShouldRenderSuggestedReplies.current = shouldRenderSuggestedReplies;
    }
  }, [shouldRenderSuggestedReplies]);
  (0, import_react52.useLayoutEffect)(function() {
    if (usedInLegacy)
      handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, []);
  (0, import_react52.useLayoutEffect)(function() {
    var timeouts = [];
    if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      timeouts.push(setTimeout(function() {
        setIsAnimated(true);
      }, 500));
      timeouts.push(setTimeout(function() {
        setAnimatedMessageId(null);
        onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();
      }, 1600));
    } else {
      setIsAnimated(false);
    }
    return function() {
      timeouts.forEach(function(it) {
        return clearTimeout(it);
      });
    };
  }, [animatedMessageId, messageScrollRef.current, message.messageId]);
  var renderedCustomSeparator = (0, import_react52.useMemo)(function() {
    var _a2;
    return (_a2 = renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message })) !== null && _a2 !== void 0 ? _a2 : null;
  }, [message, renderCustomSeparator]);
  var renderChildren = function() {
    if (children) {
      return children;
    }
    if (renderMessage) {
      var messageProps = __assign(__assign({}, props), { renderMessage: void 0 });
      return renderMessage(messageProps);
    }
    return import_react52.default.createElement(
      import_react52.default.Fragment,
      null,
      renderMessageContent({
        className: "sendbird-message-hoc__message-content",
        userId,
        scrollToMessage,
        channel,
        message,
        disabled: !isOnline,
        chainTop,
        chainBottom,
        isReactionEnabled,
        replyType,
        threadReplySelectType,
        nicknamesMap,
        emojiContainer,
        showEdit: setShowEdit,
        showRemove: setShowRemove,
        showFileViewer: setShowFileViewer,
        resendMessage,
        deleteMessage,
        toggleReaction,
        setQuoteMessage,
        onReplyInThread: onReplyInThreadClick,
        onQuoteMessageClick,
        onMessageHeightChange: handleScroll,
        onBeforeDownloadFileMessage
      }),
      shouldRenderSuggestedReplies && renderSuggestedReplies({
        replyOptions: getSuggestedReplies(message),
        onSendMessage: sendUserMessage,
        type: groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.suggestedRepliesDirection
      }),
      showRemove && (renderRemoveMessageModal === null || renderRemoveMessageModal === void 0 ? void 0 : renderRemoveMessageModal({ message, onCancel: function() {
        return setShowRemove(false);
      } })),
      showFileViewer && renderFileViewer({ message, onCancel: function() {
        return setShowFileViewer(false);
      } })
    );
  };
  if (showEdit && ((_b = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b === void 0 ? void 0 : _b.call(message))) {
    return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || import_react52.default.createElement(
      import_react52.default.Fragment,
      null,
      displaySuggestedMentionList && import_react52.default.createElement(SuggestedMentionListView, { currentChannel: channel, targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0, renderUserMentionItem, onUserItemClick: function(user) {
        if (user) {
          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
        }
        setMentionNickname("");
        setSelectedUser(user);
        setMessageInputEvent(null);
      }, onFocusItemChange: function() {
        setMessageInputEvent(null);
      }, onFetchUsers: function(users) {
        setMentionSuggestedUsers(users);
      }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount }),
      import_react52.default.createElement(MessageInput, { isEdit: true, channel, disabled: editInputDisabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled: groupChannel.enableMention, message, onStartTyping: function() {
        var _a2;
        (_a2 = channel === null || channel === void 0 ? void 0 : channel.startTyping) === null || _a2 === void 0 ? void 0 : _a2.call(channel);
      }, onUpdateMessage: function(_a2) {
        var _b2;
        var messageId = _a2.messageId, message2 = _a2.message, mentionTemplate = _a2.mentionTemplate;
        updateUserMessage(messageId, {
          message: message2,
          mentionedUsers,
          mentionedMessageTemplate: mentionTemplate
        });
        setShowEdit(false);
        (_b2 = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(channel);
      }, onCancelEdit: function() {
        var _a2;
        setMentionNickname("");
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEdit(false);
        (_a2 = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _a2 === void 0 ? void 0 : _a2.call(channel);
      }, onUserMentioned: function(user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname("");
        }
      }, onMentionStringChange: function(mentionText) {
        setMentionNickname(mentionText);
      }, onMentionedUserIdsUpdated: function(userIds) {
        setMentionedUserIds(userIds);
      }, onKeyDown: function(e) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e);
          return true;
        }
        return false;
      } })
    );
  }
  return import_react52.default.createElement(
    "div",
    { className: classnames("sendbird-msg-hoc sendbird-msg--scroll-ref", isAnimated && "sendbird-msg-hoc__animated"), "data-testid": "sendbird-message-view", style: children || renderMessage ? void 0 : { marginBottom: "2px" }, "data-sb-message-id": message.messageId, "data-sb-created-at": message.createdAt, ref: messageScrollRef },
    hasSeparator && (renderedCustomSeparator || import_react52.default.createElement(
      DateSeparator,
      null,
      import_react52.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {
        locale: dateLocale
      }))
    )),
    renderChildren()
  );
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/FileViewer.js
var import_react54 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-Ck65vtgI.js
var import_react53 = __toESM(require_react(), 1);
var import_react_dom15 = __toESM(require_react_dom(), 1);
var FileViewerView = function(_a) {
  var message = _a.message, onCancel = _a.onCancel, deleteMessage = _a.deleteMessage, onDownloadClick = _a.onDownloadClick;
  var sender = message.sender, type = message.type, url = message.url, _b = message.name, name = _b === void 0 ? "" : _b, threadInfo = message.threadInfo;
  var profileUrl = sender.profileUrl, nickname = sender.nickname, userId = sender.userId;
  var config = useSendbirdStateContext().config;
  return (0, import_react_dom15.createPortal)(import_react53.default.createElement(FileViewerComponent2, { profileUrl, nickname, type, url, name, onCancel, onDelete: function() {
    return deleteMessage(message).then(function() {
      return onCancel();
    });
  }, isByMe: config.userId === userId, disableDelete: (threadInfo === null || threadInfo === void 0 ? void 0 : threadInfo.replyCount) ? threadInfo.replyCount > 0 : false, onDownloadClick }), document.getElementById(MODAL_ROOT));
};
var FileViewerComponent2 = function(_a) {
  var profileUrl = _a.profileUrl, nickname = _a.nickname, name = _a.name, type = _a.type, url = _a.url, isByMe = _a.isByMe, onCancel = _a.onCancel, onDelete = _a.onDelete, disableDelete = _a.disableDelete, onDownloadClick = _a.onDownloadClick;
  return import_react53.default.createElement(
    Modal,
    { onClose: onCancel },
    import_react53.default.createElement(
      "div",
      { className: "sendbird-fileviewer", "data-testid": "sendbird-fileviewer" },
      import_react53.default.createElement(
        "div",
        { className: "sendbird-fileviewer__header" },
        import_react53.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__left" },
          import_react53.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__left__avatar" },
            import_react53.default.createElement(Avatar$1, { height: "32px", width: "32px", src: profileUrl })
          ),
          import_react53.default.createElement(Label, { className: "sendbird-fileviewer__header__left__filename", type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, name),
          import_react53.default.createElement(Label, { className: "sendbird-fileviewer__header__left__sender-name", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, nickname)
        ),
        import_react53.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__right" },
          isSupportedFileView(type) && import_react53.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions" },
            import_react53.default.createElement(
              "a",
              { className: "sendbird-fileviewer__header__right__actions__download", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
              import_react53.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px" })
            ),
            onDelete && isByMe && import_react53.default.createElement(
              "div",
              { className: "sendbird-fileviewer__header__right__actions__delete" },
              import_react53.default.createElement(Icon, { className: disableDelete ? "disabled" : "", type: IconTypes.DELETE, fillColor: disableDelete ? IconColors.GRAY : IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: function() {
                if (!disableDelete) {
                  onDelete();
                }
              } })
            )
          ),
          import_react53.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions__close" },
            import_react53.default.createElement(Icon, { type: IconTypes.CLOSE, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: onCancel })
          )
        )
      ),
      import_react53.default.createElement(
        "div",
        { className: "sendbird-fileviewer__content" },
        isVideo(type) && import_react53.default.createElement(
          "video",
          { controls: true, className: "sendbird-fileviewer__content__video" },
          import_react53.default.createElement("source", { src: url, type })
        ),
        isImage(type) && import_react53.default.createElement("img", { src: url, alt: name, className: "sendbird-fileviewer__content__img" }),
        !isSupportedFileView(type) && import_react53.default.createElement(
          "div",
          { className: "sendbird-fileviewer__content__unsupported" },
          import_react53.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1 }, LabelStringSet.UI__FILE_VIEWER__UNSUPPORT)
        )
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/FileViewer.js
var import_react_dom16 = __toESM(require_react_dom(), 1);
var FileViewer2 = function(props) {
  var _a = useGroupChannelContext(), deleteMessage = _a.deleteMessage, onBeforeDownloadFileMessage = _a.onBeforeDownloadFileMessage;
  var config = useSendbirdStateContext().config;
  var logger = config.logger;
  return import_react54.default.createElement(FileViewerView, __assign({}, props, { deleteMessage, onDownloadClick: function(e) {
    return __awaiter(void 0, void 0, void 0, function() {
      var allowDownload, err_1;
      var _a2, _b;
      return __generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            if (!onBeforeDownloadFileMessage)
              return [
                2
                /*return*/
              ];
            _c.label = 1;
          case 1:
            _c.trys.push([1, 3, , 4]);
            return [4, onBeforeDownloadFileMessage({ message: props.message })];
          case 2:
            allowDownload = _c.sent();
            if (!allowDownload) {
              e.preventDefault();
              (_a2 = logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "FileViewer: Not allowed to download.");
            }
            return [3, 4];
          case 3:
            err_1 = _c.sent();
            (_b = logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, "FileViewer: Error occurred while determining download continuation:", err_1);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  } }));
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/RemoveMessageModal.js
var import_react56 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CU9ItXV_.js
var import_react55 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CBwCMBt0.js
function getModalDeleteMessageTitle(stringSet, message) {
  return K(message).when(isMultipleFilesMessage, function() {
    var filesCount = message.fileInfoList.length;
    return "Do you want to delete all ".concat(filesCount, " photos?");
  }).otherwise(function() {
    return stringSet.MODAL__DELETE_MESSAGE__TITLE;
  });
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CU9ItXV_.js
var RemoveMessageModalView = function(props) {
  var _a;
  var _b = props.onSubmit, onSubmit = _b === void 0 ? function() {
  } : _b, onCancel = props.onCancel, message = props.message, deleteMessage = props.deleteMessage;
  var stringSet = (0, import_react55.useContext)(LocalizationContext).stringSet;
  return import_react55.default.createElement(Modal, { type: ButtonTypes.DANGER, disabled: ((_a = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) ? message.threadInfo.replyCount > 0 : void 0, onCancel, onSubmit: function() {
    if (message.isUserMessage() || message.isFileMessage() || message.isMultipleFilesMessage()) {
      deleteMessage(message).then(function() {
        onSubmit();
        onCancel();
      });
    }
  }, submitText: stringSet.MESSAGE_MENU__DELETE, titleText: getModalDeleteMessageTitle(stringSet, message) });
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/RemoveMessageModal.js
var import_react_dom17 = __toESM(require_react_dom(), 1);
var RemoveMessageModal = function(props) {
  var deleteMessage = useGroupChannelContext().deleteMessage;
  return import_react56.default.createElement(RemoveMessageModalView, __assign({}, props, { deleteMessage }));
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/Message.js
var import_react_dom18 = __toESM(require_react_dom(), 1);
var Message = function(props) {
  var _a = useSendbirdStateContext(), config = _a.config, emojiManager = _a.emojiManager;
  var _b = useGroupChannelContext(), loading = _b.loading, currentChannel = _b.currentChannel, animatedMessageId = _b.animatedMessageId, setAnimatedMessageId = _b.setAnimatedMessageId, scrollToMessage = _b.scrollToMessage, replyType = _b.replyType, threadReplySelectType = _b.threadReplySelectType, isReactionEnabled = _b.isReactionEnabled, toggleReaction = _b.toggleReaction, nicknamesMap = _b.nicknamesMap, setQuoteMessage = _b.setQuoteMessage, renderUserMentionItem = _b.renderUserMentionItem, onQuoteMessageClick = _b.onQuoteMessageClick, onReplyInThreadClick = _b.onReplyInThreadClick, onMessageAnimated = _b.onMessageAnimated, onBeforeDownloadFileMessage = _b.onBeforeDownloadFileMessage, messages = _b.messages, updateUserMessage = _b.updateUserMessage, sendUserMessage = _b.sendUserMessage, resendMessage = _b.resendMessage, deleteMessage = _b.deleteMessage;
  var message = props.message;
  var initialized = !loading && Boolean(currentChannel);
  var shouldRenderSuggestedReplies = useIIFE(function() {
    var _a2;
    var _b2 = config.groupChannel, enableSuggestedReplies = _b2.enableSuggestedReplies, showSuggestedRepliesFor = _b2.showSuggestedRepliesFor;
    var lastMessageInView = messages[messages.length - 1];
    var hasUnsentMessage = isSendableMessage(lastMessageInView) && lastMessageInView.sendingStatus !== "succeeded";
    var showSuggestedReplies = showSuggestedRepliesFor === "all_messages" ? true : message.messageId === ((_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.lastMessage) === null || _a2 === void 0 ? void 0 : _a2.messageId);
    return enableSuggestedReplies && getSuggestedReplies(message).length > 0 && !hasUnsentMessage && showSuggestedReplies;
  });
  return import_react57.default.createElement(MessageView, __assign({}, props, { channel: currentChannel, emojiContainer: emojiManager.emojiContainer, editInputDisabled: !initialized || isDisabledBecauseFrozen(currentChannel !== null && currentChannel !== void 0 ? currentChannel : void 0) || isDisabledBecauseMuted(currentChannel !== null && currentChannel !== void 0 ? currentChannel : void 0) || !config.isOnline, shouldRenderSuggestedReplies, isReactionEnabled: isReactionEnabled !== null && isReactionEnabled !== void 0 ? isReactionEnabled : false, replyType: replyType !== null && replyType !== void 0 ? replyType : "NONE", threadReplySelectType: threadReplySelectType !== null && threadReplySelectType !== void 0 ? threadReplySelectType : ThreadReplySelectType.PARENT, nicknamesMap, renderUserMentionItem, scrollToMessage, toggleReaction, setQuoteMessage, onQuoteMessageClick, onReplyInThreadClick, sendUserMessage, updateUserMessage, resendMessage, deleteMessage, animatedMessageId, setAnimatedMessageId, onMessageAnimated, renderFileViewer: function(props2) {
    return import_react57.default.createElement(FileViewer2, __assign({}, props2));
  }, renderRemoveMessageModal: function(props2) {
    return import_react57.default.createElement(RemoveMessageModal, __assign({}, props2));
  }, usedInLegacy: false, onBeforeDownloadFileMessage }));
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/UnreadCount.js
var import_react58 = __toESM(require_react(), 1);
var UnreadCount = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.count, count = _c === void 0 ? 0 : _c, _d = _a.time, time = _d === void 0 ? "" : _d, onClick = _a.onClick, lastReadAt = _a.lastReadAt;
  var _e = (0, import_react58.useContext)(LocalizationContext), stringSet = _e.stringSet, dateLocale = _e.dateLocale;
  var unreadSince = (0, import_react58.useMemo)(function() {
    var _a2, _b2;
    if (stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON !== "on") {
      var timeArray = ((_b2 = (_a2 = time === null || time === void 0 ? void 0 : time.toString) === null || _a2 === void 0 ? void 0 : _a2.call(time)) === null || _b2 === void 0 ? void 0 : _b2.split(" ")) || [];
      timeArray === null || timeArray === void 0 ? void 0 : timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);
      return timeArray.join(" ");
    } else if (lastReadAt) {
      return format(lastReadAt, stringSet.DATE_FORMAT__MESSAGE_LIST__NOTIFICATION__UNREAD_SINCE, { locale: dateLocale });
    }
  }, [time, lastReadAt]);
  return import_react58.default.createElement(
    "div",
    { className: classnames(count < 1 ? "sendbird-notification--hide" : "sendbird-notification", className), "data-testid": "sendbird-notification", onClick },
    import_react58.default.createElement(
      Label,
      { className: "sendbird-notification__text", testID: "sendbird-notification__text", color: LabelColors.ONCONTENT_1, type: LabelTypography.CAPTION_2 },
      "".concat(count, " "),
      stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE,
      " ".concat(unreadSince)
    ),
    import_react58.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.CONTENT })
  );
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/FrozenNotification.js
var import_react59 = __toESM(require_react(), 1);
var FrozenNotification = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b;
  var stringSet = (0, import_react59.useContext)(LocalizationContext).stringSet;
  return import_react59.default.createElement(
    "div",
    { className: classnames("sendbird-notification", "sendbird-notification--frozen", className), "data-testid": "sendbird-notification" },
    import_react59.default.createElement(Label, { className: "sendbird-notification__text", testID: "sendbird-notification__text", type: LabelTypography.CAPTION_2 }, stringSet.CHANNEL_FROZEN)
  );
};

// node_modules/@sendbird/uikit-react/ui/TypingIndicatorBubble.js
var import_react60 = __toESM(require_react(), 1);
var TypingDots = function() {
  return import_react60.default.createElement(
    "div",
    { className: "typing-dots-container" },
    import_react60.default.createElement("span", null),
    import_react60.default.createElement("span", null),
    import_react60.default.createElement("span", null)
  );
};
var AVATAR_BORDER_SIZE = 2;
var AVATAR_DIAMETER_WITHOUT_BORDER = 28;
var AVATAR_DIAMETER = AVATAR_DIAMETER_WITHOUT_BORDER + AVATAR_BORDER_SIZE * 2;
var LEFT_GAP = 24;
var MAX_PROFILES_COUNT = 3;
var LEFT_FOR_BORDER = AVATAR_BORDER_SIZE;
var AvatarStack = function(props) {
  var sources = props.sources, max = props.max;
  return import_react60.default.createElement(
    import_react60.default.Fragment,
    null,
    " ",
    sources.slice(0, max).map(function(src, index) {
      return import_react60.default.createElement(Avatar$1, {
        className: "sendbird-message-content__left__avatar multiple",
        src: src || "",
        key: "avatar_stack_item_".concat(src),
        // TODO: Divide getting profileUrl logic to utils
        width: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
        height: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
        zIndex: index,
        left: "".concat(index * LEFT_GAP - LEFT_FOR_BORDER, "px")
      });
    }),
    " "
  );
};
var TypingIndicatorBubbleAvatar = function(props) {
  var typingMembers = props.typingMembers;
  var membersCount = typingMembers.length;
  var displayCount = Math.min(membersCount, 4);
  var hiddenCount = membersCount - MAX_PROFILES_COUNT;
  var superImposedWidth = (displayCount - 1) * (AVATAR_DIAMETER - LEFT_GAP);
  var rightPaddingSize = 12;
  return import_react60.default.createElement(
    "div",
    { className: "sendbird-message-content__left incoming", style: {
      minWidth: displayCount * AVATAR_DIAMETER - superImposedWidth + rightPaddingSize
    } },
    import_react60.default.createElement(AvatarStack, { sources: typingMembers.map(function(member) {
      return member.profileUrl;
    }), max: MAX_PROFILES_COUNT }),
    hiddenCount > 0 ? import_react60.default.createElement(Avatar$1, {
      className: "sendbird-message-content__left__avatar multiple",
      // TODO: Divide getting profileUrl logic to utils
      width: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
      height: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
      zIndex: MAX_PROFILES_COUNT,
      left: "".concat(MAX_PROFILES_COUNT * LEFT_GAP, "px"),
      customDefaultComponent: function(_a) {
        var width = _a.width, height = _a.height;
        return import_react60.default.createElement(AvatarDefault, { width, height, text: "+".concat(hiddenCount) });
      }
    }) : null
  );
};
var TypingIndicatorBubble = function(props) {
  var typingMembers = props.typingMembers, handleScroll = props.handleScroll;
  if (typingMembers.length === 0)
    return null;
  (0, import_react60.useLayoutEffect)(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, []);
  return import_react60.default.createElement(
    "div",
    { className: "sendbird-message-content incoming", style: { marginBottom: "2px" } },
    import_react60.default.createElement(TypingIndicatorBubbleAvatar, { typingMembers }),
    import_react60.default.createElement(
      "div",
      { className: "sendbird-message-content__middle" },
      import_react60.default.createElement(TypingDots, null)
    )
  );
};

// node_modules/@sendbird/uikit-react/Channel/utils/compareMessagesForGrouping.js
var compareMessagesForGrouping = function(prevMessage, currMessage, nextMessage, currentChannel, replyType) {
  if (!currentChannel || currentChannel.channelType !== "group") {
    return [
      isSameGroup(prevMessage, currMessage),
      isSameGroup(currMessage, nextMessage)
    ];
  }
  if (replyType === "THREAD" && (currMessage === null || currMessage === void 0 ? void 0 : currMessage.threadInfo)) {
    return [false, false];
  }
  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || "";
  var isAcceptable = sendingStatus !== "pending" && sendingStatus !== "failed";
  return [
    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,
    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable
  ];
};
var getMessageCreatedAt = function(message) {
  return format(message.createdAt, "p");
};
var isSameGroup = function(message, comparingMessage, currentChannel) {
  var _a, _b;
  if (!(message && comparingMessage && message.messageType && message.messageType !== "admin" && comparingMessage.messageType && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== "admin" && "sender" in message && "sender" in comparingMessage && message.createdAt && comparingMessage.createdAt && message.sender.userId && comparingMessage.sender.userId)) {
    return false;
  }
  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b === void 0 ? void 0 : _b.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage) && (currentChannel ? isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage) : true);
};

// node_modules/@sendbird/uikit-react/Channel/utils/getMessagePartsInfo.js
var getMessagePartsInfo = function(_a) {
  var _b = _a.allMessages, allMessages = _b === void 0 ? [] : _b, _c = _a.isMessageGroupingEnabled, isMessageGroupingEnabled = _c === void 0 ? true : _c, _d = _a.currentIndex, currentIndex = _d === void 0 ? 0 : _d, currentMessage = _a.currentMessage, _e = _a.currentChannel, currentChannel = _e === void 0 ? null : _e, _f = _a.replyType, replyType = _f === void 0 ? "" : _f;
  var previousMessage = allMessages[currentIndex - 1];
  var nextMessage = allMessages[currentIndex + 1];
  var _g = isMessageGroupingEnabled ? compareMessagesForGrouping(previousMessage, currentMessage, nextMessage, currentChannel, replyType) : [false, false], chainTop = _g[0], chainBottom = _g[1];
  var previousMessageCreatedAt = previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.createdAt;
  var currentCreatedAt = currentMessage.createdAt;
  var isLocalMessage = "sendingStatus" in currentMessage && currentMessage.sendingStatus !== "succeeded";
  var hasSeparator = isLocalMessage ? false : !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));
  return {
    chainTop,
    chainBottom,
    hasSeparator
  };
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/MessageList.js
var import_react_dom19 = __toESM(require_react_dom(), 1);
var InfiniteList = (0, import_react61.forwardRef)(function(props, listRef) {
  var messages = props.messages, renderMessage = props.renderMessage, scrollPositionRef = props.scrollPositionRef, scrollDistanceFromBottomRef = props.scrollDistanceFromBottomRef, onLoadPrevious = props.onLoadPrevious, onLoadNext = props.onLoadNext, _a = props.loadThreshold, loadThreshold = _a === void 0 ? 0.05 : _a, typingIndicator = props.typingIndicator, _b = props.onScrollPosition, onScrollPosition = _b === void 0 ? noop : _b, initDeps = props.initDeps;
  var isFetching = import_react61.default.useRef(false);
  var direction = import_react61.default.useRef();
  var oldScrollTop = (0, import_react61.useRef)(0);
  (0, import_react61.useLayoutEffect)(function() {
    if (listRef.current) {
      listRef.current.scrollTop = listRef.current.scrollHeight;
    }
  }, initDeps);
  (0, import_react61.useLayoutEffect)(function() {
    if (listRef.current) {
      if (direction.current === "top") {
        listRef.current.scrollTop = listRef.current.scrollHeight - scrollPositionRef.current;
      }
      if (direction.current === "bottom") {
        listRef.current.scrollTop = oldScrollTop.current;
      }
      direction.current = void 0;
    }
  }, [listRef.current, messages.length]);
  var handleScroll = function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var list, threshold;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!listRef.current)
              return [
                2
                /*return*/
              ];
            list = listRef.current;
            onScrollPosition(getReachedStatus(list));
            scrollPositionRef.current = list.scrollHeight - list.scrollTop;
            scrollDistanceFromBottomRef.current = scrollPositionRef.current - list.clientHeight;
            oldScrollTop.current = list.scrollTop;
            if (isFetching.current)
              return [
                2
                /*return*/
              ];
            threshold = list.clientHeight * Math.min(Math.max(0, loadThreshold), 1);
            if (!(list.scrollTop <= threshold)) return [3, 2];
            isFetching.current = true;
            direction.current = "top";
            return [4, onLoadPrevious()];
          case 1:
            _a2.sent();
            isFetching.current = false;
            return [3, 5];
          case 2:
            if (!(list.scrollHeight - list.scrollTop - list.clientHeight <= threshold)) return [3, 4];
            isFetching.current = true;
            direction.current = "bottom";
            return [4, onLoadNext()];
          case 3:
            _a2.sent();
            isFetching.current = false;
            return [3, 5];
          case 4:
            direction.current = void 0;
            _a2.label = 5;
          case 5:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  return import_react61.default.createElement(
    "div",
    { className: "sendbird-conversation__scroll-container" },
    import_react61.default.createElement("div", { className: "sendbird-conversation__padding" }),
    import_react61.default.createElement(
      "div",
      { ref: listRef, className: "sendbird-conversation__messages-padding", "data-testid": "sendbird-message-list-container", onScroll: handleScroll },
      messages.map(function(message, index) {
        return renderMessage({ message, index });
      }),
      typingIndicator
    )
  );
});
function getReachedStatus(element) {
  if (isAboutSame(element.scrollTop, 0, SCROLL_BUFFER)) {
    return "top";
  }
  if (isAboutSame(element.scrollHeight, element.clientHeight + element.scrollTop, SCROLL_BUFFER)) {
    return "bottom";
  }
  return "middle";
}
var MessageList = function(props) {
  var _a, _b, _c, _d, _e;
  var _f = props.className, className = _f === void 0 ? "" : _f;
  var _g = deleteNullish(props), _h = _g.renderMessage, renderMessage = _h === void 0 ? function(props2) {
    return import_react61.default.createElement(Message, __assign({}, props2));
  } : _h, renderMessageContent = _g.renderMessageContent, renderSuggestedReplies = _g.renderSuggestedReplies, renderCustomSeparator = _g.renderCustomSeparator, _j = _g.renderPlaceholderLoader, renderPlaceholderLoader = _j === void 0 ? function() {
    return import_react61.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
  } : _j, _k = _g.renderPlaceholderEmpty, renderPlaceholderEmpty = _k === void 0 ? function() {
    return import_react61.default.createElement(PlaceHolder, { className: "sendbird-conversation__no-messages", type: PlaceHolderTypes.NO_MESSAGES });
  } : _k, _l = _g.renderFrozenNotification, renderFrozenNotification = _l === void 0 ? function() {
    return import_react61.default.createElement(FrozenNotification, { className: "sendbird-conversation__messages__notification" });
  } : _l;
  var _m = useGroupChannelContext(), channelUrl = _m.channelUrl, hasNext = _m.hasNext, loading = _m.loading, messages = _m.messages, newMessages = _m.newMessages, scrollToBottom = _m.scrollToBottom, isScrollBottomReached = _m.isScrollBottomReached, isMessageGroupingEnabled = _m.isMessageGroupingEnabled, scrollRef = _m.scrollRef, scrollDistanceFromBottomRef = _m.scrollDistanceFromBottomRef, scrollPositionRef = _m.scrollPositionRef, currentChannel = _m.currentChannel, replyType = _m.replyType, scrollPubSub = _m.scrollPubSub, loadNext = _m.loadNext, loadPrevious = _m.loadPrevious, setIsScrollBottomReached = _m.setIsScrollBottomReached, resetNewMessages = _m.resetNewMessages;
  var store = useSendbirdStateContext();
  var _o = (0, import_react61.useState)(), unreadSinceDate = _o[0], setUnreadSinceDate = _o[1];
  (0, import_react61.useEffect)(function() {
    if (isScrollBottomReached) {
      setUnreadSinceDate(void 0);
    } else {
      setUnreadSinceDate(/* @__PURE__ */ new Date());
    }
  }, [isScrollBottomReached]);
  var onMessageContentSizeChanged = function(isBottomMessageAffected) {
    if (isBottomMessageAffected === void 0) {
      isBottomMessageAffected = false;
    }
    var elem = scrollRef.current;
    if (elem) {
      var latestDistance = scrollDistanceFromBottomRef.current;
      var currentDistance = elem.scrollHeight - elem.scrollTop - elem.offsetHeight;
      if (latestDistance < currentDistance && (!isBottomMessageAffected || latestDistance < SCROLL_BUFFER)) {
        var diff = currentDistance - latestDistance;
        scrollPubSub.publish("scroll", { top: elem.scrollTop + diff, lazy: false, animated: false });
      }
    }
  };
  var renderer2 = {
    frozenNotification: function() {
      if (!currentChannel || !currentChannel.isFrozen)
        return null;
      return renderFrozenNotification();
    },
    unreadMessagesNotification: function() {
      if (isScrollBottomReached || !unreadSinceDate)
        return null;
      return import_react61.default.createElement(UnreadCount, { className: "sendbird-conversation__messages__notification", count: newMessages.length, lastReadAt: unreadSinceDate, onClick: function() {
        return scrollToBottom();
      } });
    },
    scrollToBottomButton: function() {
      if (!hasNext() && isScrollBottomReached)
        return null;
      return import_react61.default.createElement(
        "div",
        { className: "sendbird-conversation__scroll-bottom-button", onClick: function() {
          return scrollToBottom();
        }, onKeyDown: function() {
          return scrollToBottom();
        }, tabIndex: 0, role: "button" },
        import_react61.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.PRIMARY })
      );
    }
  };
  if (loading) {
    return renderPlaceholderLoader();
  }
  if (messages.length === 0) {
    return renderPlaceholderEmpty();
  }
  return import_react61.default.createElement(
    import_react61.default.Fragment,
    null,
    import_react61.default.createElement(
      "div",
      { className: "sendbird-conversation__messages ".concat(className) },
      import_react61.default.createElement(InfiniteList, { ref: scrollRef, initDeps: [channelUrl], scrollPositionRef, scrollDistanceFromBottomRef, onLoadNext: loadNext, onLoadPrevious: loadPrevious, onScrollPosition: function(it) {
        var isScrollBottomReached2 = it === "bottom";
        if (newMessages.length > 0 && isScrollBottomReached2) {
          resetNewMessages();
        }
        setIsScrollBottomReached(isScrollBottomReached2);
      }, messages, renderMessage: function(_a2) {
        var message = _a2.message, index = _a2.index;
        var _b2 = getMessagePartsInfo({
          allMessages: messages,
          replyType: replyType !== null && replyType !== void 0 ? replyType : "NONE",
          isMessageGroupingEnabled: isMessageGroupingEnabled !== null && isMessageGroupingEnabled !== void 0 ? isMessageGroupingEnabled : false,
          currentIndex: index,
          currentMessage: message,
          currentChannel
        }), chainTop = _b2.chainTop, chainBottom = _b2.chainBottom, hasSeparator = _b2.hasSeparator;
        var isOutgoingMessage = isSendableMessage(message) && message.sender.userId === store.config.userId;
        return import_react61.default.createElement(MessageProvider, { message, key: getComponentKeyFromMessage(message), isByMe: isOutgoingMessage }, renderMessage({
          handleScroll: onMessageContentSizeChanged,
          message,
          hasSeparator,
          chainTop,
          chainBottom,
          renderMessageContent,
          renderSuggestedReplies,
          renderCustomSeparator
        }));
      }, typingIndicator: !hasNext() && ((_b = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_e = (_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.typingIndicatorTypes) === null || _e === void 0 ? void 0 : _e.has(TypingIndicatorType.Bubble)) && import_react61.default.createElement(TypingIndicatorBubbleWrapper, { channelUrl, handleScroll: onMessageContentSizeChanged }) }),
      import_react61.default.createElement(import_react61.default.Fragment, null, renderer2.frozenNotification()),
      import_react61.default.createElement(import_react61.default.Fragment, null, renderer2.unreadMessagesNotification()),
      import_react61.default.createElement(import_react61.default.Fragment, null, renderer2.scrollToBottomButton())
    )
  );
};
var TypingIndicatorBubbleWrapper = function(props) {
  var stores = useSendbirdStateContext().stores;
  var _a = (0, import_react61.useState)([]), typingMembers = _a[0], setTypingMembers = _a[1];
  useGroupChannelHandler(stores.sdkStore.sdk, {
    onTypingStatusUpdated: function(channel) {
      if (channel.url === props.channelUrl) {
        setTypingMembers(channel.getTypingUsers());
      }
    }
  });
  return import_react61.default.createElement(TypingIndicatorBubble, { typingMembers, handleScroll: props.handleScroll });
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/MessageInputWrapper.js
var import_react67 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-ChKVOZMC.js
var import_react66 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/GroupChannel/components/SuggestedMentionList.js
var import_react62 = __toESM(require_react(), 1);
var SuggestedMentionList = function(props) {
  return import_react62.default.createElement(SuggestedMentionListView, __assign({}, props));
};

// node_modules/@sendbird/uikit-react/ui/QuoteMessageInput.js
var import_react63 = __toESM(require_react(), 1);
var componentClassname = "sendbird-quote_message_input__avatar";
function QuoteMessageThumbnail(_a) {
  var _b;
  var message = _a.message;
  if (!isFileMessage(message) && !isMultipleFilesMessage(message) || isVoiceMessage(message)) {
    return import_react63.default.createElement(import_react63.default.Fragment, null);
  }
  var thumbnailUrl = getMessageFirstFileThumbnailUrl(message);
  if (!thumbnailUrl) {
    if (isImageMessage(message) || isVideoMessage(message)) {
      thumbnailUrl = getMessageFirstFileUrl(message);
    } else if (isMultipleFilesMessage(message) && isImageFileInfo((_b = message.fileInfoList) === null || _b === void 0 ? void 0 : _b[0])) {
      thumbnailUrl = message.fileInfoList[0].url;
    }
  }
  if (isVideoMessage(message) && thumbnailUrl) {
    return import_react63.default.createElement(
      "div",
      { className: componentClassname },
      import_react63.default.createElement("video", { style: {
        width: "44px",
        height: "44px"
      }, src: thumbnailUrl })
    );
  } else if ((isThumbnailMessage(message) || isMultipleFilesMessage(message)) && thumbnailUrl) {
    return import_react63.default.createElement(ImageRenderer, { className: componentClassname, url: thumbnailUrl, alt: getMessageFirstFileType(message), width: "44px", height: "44px", fixedSize: true });
  } else if (isAudioMessage(message)) {
    return import_react63.default.createElement(
      "div",
      { className: componentClassname },
      import_react63.default.createElement(Icon, { type: IconTypes.FILE_AUDIO, fillColor: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px" })
    );
  } else {
    return import_react63.default.createElement(
      "div",
      { className: componentClassname },
      import_react63.default.createElement(Icon, { type: IconTypes.FILE_DOCUMENT, fillColor: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px" })
    );
  }
}
function QuoteMessageInput(_a) {
  var className = _a.className, replyingMessage = _a.replyingMessage, onClose = _a.onClose;
  var stringSet = (0, import_react63.useContext)(LocalizationContext).stringSet;
  var fileMessage = replyingMessage;
  var sender = replyingMessage === null || replyingMessage === void 0 ? void 0 : replyingMessage.sender;
  var displayFileIcon = (isFileMessage(replyingMessage) || isMultipleFilesMessage(replyingMessage)) && !isVoiceMessage(replyingMessage);
  return import_react63.default.createElement(
    "div",
    { className: getClassName(["sendbird-quote_message_input", className !== null && className !== void 0 ? className : ""]) },
    displayFileIcon && import_react63.default.createElement(QuoteMessageThumbnail, { message: fileMessage }),
    import_react63.default.createElement(
      "div",
      { className: "sendbird-quote_message_input__body", style: {
        width: "calc(100% - ".concat(displayFileIcon ? "164px" : "120px", ")"),
        left: displayFileIcon ? "92px" : "40px"
      } },
      import_react63.default.createElement(Label, { className: "sendbird-quote_message_input__body__sender-name", type: LabelTypography.CAPTION_1, color: LabelColors.ONBACKGROUND_1 }, "".concat(stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO, " ").concat(sender && sender.nickname ? sender.nickname : stringSet.NO_NAME)),
      import_react63.default.createElement(
        Label,
        { className: "sendbird-quote_message_input__body__message-content", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 },
        isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE,
        isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO,
        isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF,
        isUserMessage(replyingMessage) && replyingMessage.message,
        getUIKitMessageType(replyingMessage) === UIKitMessageTypes.FILE && getMessageFirstFileName(fileMessage),
        isMultipleFilesMessage(replyingMessage) && "".concat(fileMessage.fileInfoList.length, " Photos"),
        isVoiceMessage(replyingMessage) && stringSet.VOICE_MESSAGE
      )
    ),
    import_react63.default.createElement(Icon, { className: "sendbird-quote_message_input__close-button", type: IconTypes.CLOSE, fillColor: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px", onClick: function() {
      return onClose === null || onClose === void 0 ? void 0 : onClose(replyingMessage);
    } })
  );
}

// node_modules/@sendbird/uikit-react/VoiceRecorder/useVoiceRecorder.js
var import_react64 = __toESM(require_react(), 1);
var import_react_dom20 = __toESM(require_react_dom(), 1);
var VoiceRecorderStatus = {
  PREPARING: "PREPARING",
  READY_TO_RECORD: "READY_TO_RECORD",
  RECORDING: "RECORDING",
  COMPLETED: "COMPLETED"
};
var useVoiceRecorder = function(_a) {
  var _b = _a.onRecordingStarted, onRecordingStarted = _b === void 0 ? noop : _b, _c = _a.onRecordingEnded, onRecordingEnded = _c === void 0 ? noop : _c;
  var config = useSendbirdStateContext().config;
  var voiceRecord = config.voiceRecord;
  var maxRecordingTime = voiceRecord.maxRecordingTime;
  var voiceRecorder = useVoiceRecorderContext();
  var isRecordable = voiceRecorder.isRecordable;
  var _d = (0, import_react64.useState)(null), recordedFile = _d[0], setRecordedFile = _d[1];
  var _e = (0, import_react64.useState)(VoiceRecorderStatus.PREPARING), recordingStatus = _e[0], setRecordingStatus = _e[1];
  (0, import_react64.useEffect)(function() {
    if (isRecordable && recordingStatus === VoiceRecorderStatus.PREPARING) {
      setRecordingStatus(VoiceRecorderStatus.READY_TO_RECORD);
    }
  }, [isRecordable]);
  var start = (0, import_react64.useCallback)(function() {
    voiceRecorder === null || voiceRecorder === void 0 ? void 0 : voiceRecorder.start({
      onRecordingStarted: function() {
        setRecordingStatus(VoiceRecorderStatus.RECORDING);
        onRecordingStarted();
        startTimer();
      },
      onRecordingEnded: function(audioFile) {
        setRecordingStatus(VoiceRecorderStatus.COMPLETED);
        onRecordingEnded(audioFile);
        setRecordedFile(audioFile);
        stopTimer();
      }
    });
  }, [onRecordingStarted, onRecordingEnded]);
  var stop = (0, import_react64.useCallback)(function() {
    voiceRecorder === null || voiceRecorder === void 0 ? void 0 : voiceRecorder.stop();
    stopTimer();
  }, [voiceRecorder]);
  var cancel = (0, import_react64.useCallback)(function() {
    stop();
    setRecordedFile(null);
  }, [voiceRecorder]);
  var _f = (0, import_react64.useState)(0), recordingTime = _f[0], setRecordingTime = _f[1];
  var timer = (0, import_react64.useRef)(null);
  function startTimer() {
    stopTimer();
    setRecordingTime(0);
    timer.current = setInterval(function() {
      setRecordingTime(function(prevTime) {
        var newTime = prevTime + 100;
        if (newTime > maxRecordingTime) {
          stopTimer();
        }
        return newTime;
      });
    }, 100);
  }
  function stopTimer() {
    if (timer.current) {
      clearInterval(timer.current);
      timer.current = null;
    }
  }
  (0, import_react64.useEffect)(function() {
    if (recordingTime > maxRecordingTime) {
      stop();
    }
  }, [recordingTime, maxRecordingTime, stop]);
  return {
    start,
    stop,
    cancel,
    recordingStatus,
    recordingTime,
    recordedFile,
    recordingLimit: maxRecordingTime
  };
};

// node_modules/@sendbird/uikit-react/chunks/bundle-B7FJxg4D.js
var import_react65 = __toESM(require_react(), 1);
var VoiceMessageInputStatus = {
  READY_TO_RECORD: "READY_TO_RECORD",
  RECORDING: "RECORDING",
  READY_TO_PLAY: "READY_TO_PLAY",
  PLAYING: "PLAYING"
};
var ControlerIcon = function(_a) {
  var inputState = _a.inputState;
  switch (inputState) {
    case VoiceMessageInputStatus.READY_TO_RECORD: {
      return import_react65.default.createElement("div", { className: "sendbird-controler-icon record-icon" });
    }
    case VoiceMessageInputStatus.RECORDING: {
      return import_react65.default.createElement("div", { className: "sendbird-controler-icon stop-icon" });
    }
    case VoiceMessageInputStatus.READY_TO_PLAY: {
      return import_react65.default.createElement(Icon, { className: "sendbird-controler-icon play-icon", width: "20px", height: "20px", type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_1 });
    }
    case VoiceMessageInputStatus.PLAYING: {
      return import_react65.default.createElement(
        "div",
        { className: "sendbird-controler-icon pause-icon" },
        import_react65.default.createElement("div", { className: "sendbird-controler-icon pause-icon-inner" }),
        import_react65.default.createElement("div", { className: "sendbird-controler-icon pause-icon-inner" })
      );
    }
    default:
      return import_react65.default.createElement(import_react65.default.Fragment, null);
  }
};
var VoiceMessageInput = function(_a) {
  var _b = _a.minRecordTime, minRecordTime = _b === void 0 ? VOICE_RECORDER_DEFAULT_MIN : _b, maximumValue = _a.maximumValue, _c = _a.currentValue, currentValue = _c === void 0 ? 0 : _c, currentType = _a.currentType, onCancelClick = _a.onCancelClick, onControlClick = _a.onControlClick, onSubmitClick = _a.onSubmitClick, renderCancelButton = _a.renderCancelButton, renderControlButton = _a.renderControlButton, renderSubmitButton = _a.renderSubmitButton;
  var _d = (0, import_react65.useState)(0), lastClickTime = _d[0], setLastClickTime = _d[1];
  var isReadyToRecord = (0, import_react65.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.READY_TO_RECORD;
  }, [currentType]);
  var isRecording = (0, import_react65.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.RECORDING;
  }, [currentType]);
  var isSendButtonDisabled = (0, import_react65.useMemo)(function() {
    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD || currentType === VoiceMessageInputStatus.RECORDING) {
      return minRecordTime > currentValue;
    }
    return false;
  }, [currentType, minRecordTime, currentValue]);
  var isPlayMode = (0, import_react65.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.READY_TO_PLAY || currentType === VoiceMessageInputStatus.PLAYING;
  }, [currentType]);
  var stringSet = useLocalization().stringSet;
  var handleOnCancelClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
      setLastClickTime(currentTime);
    }
  };
  var handleOnControlClick = (0, import_react65.useCallback)(function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      onControlClick === null || onControlClick === void 0 ? void 0 : onControlClick(currentType);
      setLastClickTime(currentTime);
    }
  }, [currentType]);
  var handleOnSubmitClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      if (!isSendButtonDisabled) {
        onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick();
      }
      setLastClickTime(currentTime);
    }
  };
  return import_react65.default.createElement(
    "div",
    { className: "sendbird-voice-message-input" },
    import_react65.default.createElement(
      "div",
      { className: "sendbird-voice-message-input__indicator" },
      import_react65.default.createElement(
        "div",
        { className: "sendbird-voice-message-input__indicator__progress-bar" },
        import_react65.default.createElement(ProgressBar, { className: "sendbird-voice-message-input__indicator__progress-bar__bar", disabled: isReadyToRecord, maxSize: maximumValue, currentSize: currentValue })
      ),
      isRecording ? import_react65.default.createElement("div", { className: "sendbird-voice-message-input__indicator__on-rec" }) : null,
      import_react65.default.createElement(PlaybackTime, { className: "sendbird-voice-message-input__indicator__playback-time", time: isPlayMode ? maximumValue - currentValue : currentValue, labelColor: isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1 })
    ),
    import_react65.default.createElement(
      "div",
      { className: "sendbird-voice-message-input__controler" },
      (renderCancelButton === null || renderCancelButton === void 0 ? void 0 : renderCancelButton()) || import_react65.default.createElement(
        TextButton,
        { className: "sendbird-voice-message-input__controler__cancel", onClick: handleOnCancelClick, disableUnderline: true },
        import_react65.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.BUTTON__CANCEL)
      ),
      (renderControlButton === null || renderControlButton === void 0 ? void 0 : renderControlButton(currentType)) || import_react65.default.createElement(
        "div",
        { className: "sendbird-voice-message-input__controler__main", onClick: handleOnControlClick },
        import_react65.default.createElement(ControlerIcon, { inputState: currentType })
      ),
      (renderSubmitButton === null || renderSubmitButton === void 0 ? void 0 : renderSubmitButton()) || import_react65.default.createElement(
        "div",
        { className: classnames("sendbird-voice-message-input__controler__submit", isSendButtonDisabled && "voice-message--disabled"), onClick: handleOnSubmitClick },
        import_react65.default.createElement(Icon, { width: "19px", height: "19px", type: IconTypes.SEND, fillColor: isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-DM6QiOiG.js
var compressImage = function(_a) {
  var imageFile = _a.imageFile, compressionRate = _a.compressionRate, resizingWidth = _a.resizingWidth, resizingHeight = _a.resizingHeight, outputFormat = _a.outputFormat;
  var image = document.createElement("img");
  return new Promise(function(resolve, reject) {
    image.src = URL.createObjectURL(imageFile);
    image.onerror = reject;
    image.onload = function() {
      URL.revokeObjectURL(image.src);
      var canvas = document.createElement("canvas");
      var originWidth = image.width;
      var originHeight = image.height;
      var targetResizingWidth = !resizingWidth || resizingWidth > originWidth ? originWidth : resizingWidth;
      var targetResizingHeight = !resizingHeight || resizingHeight > originHeight ? originHeight : resizingHeight;
      var widthRatio = originWidth / targetResizingWidth;
      var heightRatio = originHeight / targetResizingHeight;
      if (widthRatio > heightRatio) {
        targetResizingHeight = originHeight / (resizingWidth ? widthRatio : 1);
      } else if (heightRatio > widthRatio) {
        targetResizingWidth = originWidth / (resizingHeight ? heightRatio : 1);
      }
      canvas.width = targetResizingWidth;
      canvas.height = targetResizingHeight;
      var ctx = canvas.getContext("2d");
      if (!ctx) {
        reject(new Error("Failed to get canvas 2d context"));
        return;
      }
      ctx.drawImage(image, 0, 0, targetResizingWidth, targetResizingHeight);
      var targetFileType = outputFormat === "preserve" ? imageFile.type : "image/".concat(outputFormat);
      var targetSubtype = targetFileType.split("/").pop();
      var dotIndex = imageFile.name.lastIndexOf(".");
      var targetName = "".concat(dotIndex === -1 ? imageFile.name : imageFile.name.substring(0, dotIndex), ".").concat(targetSubtype);
      ctx.canvas.toBlob(function(blob) {
        if (blob) {
          var file = new File([blob], targetName, { type: targetFileType });
          resolve(file);
        } else {
          reject(new Error("Failed to compress image"));
        }
      }, targetFileType, compressionRate);
    };
  });
};
var compressImages = function(_a) {
  return __awaiter(void 0, [_a], void 0, function(_b) {
    var compressionRate, _c, outputFormat, resizingWidth, resizingHeight, result;
    var files = _b.files, logger = _b.logger, imageCompression = _b.imageCompression;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          compressionRate = imageCompression.compressionRate, _c = imageCompression.outputFormat, outputFormat = _c === void 0 ? "preserve" : _c;
          resizingWidth = imageCompression.resizingWidth ? pxToNumber(imageCompression.resizingWidth) : void 0;
          resizingHeight = imageCompression.resizingHeight ? pxToNumber(imageCompression.resizingHeight) : void 0;
          result = {
            failedIndexes: [],
            compressedFiles: []
          };
          if (!(Array.isArray(files) && files.length > 0)) {
            logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: There are no files.", files);
            return [2, result];
          }
          if (!compressionRate || compressionRate < 0 || 1 < compressionRate) {
            logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: The compressionRate is not acceptable.", compressionRate);
            return [2, result];
          }
          return [4, Promise.all(files.map(function(file, index) {
            return __awaiter(void 0, void 0, void 0, function() {
              var compressedImage, err_1;
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    if (!(file.type === "image/jpg" || file.type === "image/png" || file.type === "image/jpeg")) {
                      logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: The fileType is not compressible.", { file, index });
                      result.failedIndexes.push(index);
                      result.compressedFiles.push(file);
                      return [
                        2
                        /*return*/
                      ];
                    }
                    _a2.label = 1;
                  case 1:
                    _a2.trys.push([1, 3, , 4]);
                    return [4, compressImage({
                      imageFile: file,
                      compressionRate,
                      resizingWidth,
                      resizingHeight,
                      outputFormat
                    })];
                  case 2:
                    compressedImage = _a2.sent();
                    result.compressedFiles.push(compressedImage);
                    return [3, 4];
                  case 3:
                    err_1 = _a2.sent();
                    result.compressedFiles.push(file);
                    result.failedIndexes.push(index);
                    logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: Failed to compress image file", { file, err: err_1 });
                    return [3, 4];
                  case 4:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }))];
        case 1:
          _d.sent();
          logger === null || logger === void 0 ? void 0 : logger.info("utils - compressImages: Finished compressing images", result);
          return [2, result];
      }
    });
  });
};

// node_modules/@sendbird/uikit-react/chunks/bundle-ChKVOZMC.js
var VoiceMessageInputWrapper = function(_a) {
  var channel = _a.channel, onCancelClick = _a.onCancelClick, onSubmitClick = _a.onSubmitClick;
  var uuid = (0, import_react66.useRef)(uuidv4()).current;
  var _b = (0, import_react66.useState)(null), audioFile = _b[0], setAudioFile = _b[1];
  var _c = (0, import_react66.useState)(VoiceMessageInputStatus.READY_TO_RECORD), voiceInputState = _c[0], setVoiceInputState = _c[1];
  var _d = (0, import_react66.useState)(false), isSubmitted = _d[0], setSubmit = _d[1];
  var _e = (0, import_react66.useState)(false), isDisabled = _e[0], setDisabled = _e[1];
  var _f = (0, import_react66.useState)(false), showModal = _f[0], setShowModal = _f[1];
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var _g = useVoiceRecorder({
    onRecordingStarted: function() {
      setVoiceInputState(VoiceMessageInputStatus.RECORDING);
    },
    onRecordingEnded: function(audioFile2) {
      setAudioFile(audioFile2);
    }
  }), start = _g.start, stop = _g.stop, cancel = _g.cancel, recordingTime = _g.recordingTime, recordingStatus = _g.recordingStatus, recordingLimit = _g.recordingLimit;
  var voicePlayer = useVoicePlayer({
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    key: uuid,
    audioFile: audioFile !== null && audioFile !== void 0 ? audioFile : void 0
  });
  var play = voicePlayer.play, pause = voicePlayer.pause, playbackTime = voicePlayer.playbackTime, playingStatus = voicePlayer.playingStatus;
  var stopVoicePlayer = voicePlayer.stop;
  (0, import_react66.useEffect)(function() {
    if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {
      setDisabled(true);
    } else {
      setDisabled(false);
    }
  }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);
  (0, import_react66.useEffect)(function() {
    if (isSubmitted && audioFile) {
      onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick(audioFile, recordingTime);
      setSubmit(false);
      setAudioFile(null);
    }
  }, [isSubmitted, audioFile, recordingTime]);
  (0, import_react66.useEffect)(function() {
    if (audioFile) {
      if (recordingTime < config.voiceRecord.minRecordingTime) {
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
        setAudioFile(null);
      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {
        setVoiceInputState(VoiceMessageInputStatus.PLAYING);
      } else {
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);
      }
    }
  }, [audioFile, recordingTime, playingStatus]);
  return import_react66.default.createElement(
    "div",
    { className: "sendbird-voice-message-input-wrapper" },
    import_react66.default.createElement(VoiceMessageInput, { currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime, maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit, currentType: voiceInputState, onCancelClick: function() {
      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
      cancel();
      stopVoicePlayer();
    }, onSubmitClick: function() {
      if (isDisabled) {
        setShowModal(true);
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
      } else {
        stop();
        pause();
        setSubmit(true);
      }
    }, onControlClick: function(type) {
      switch (type) {
        case VoiceMessageInputStatus.READY_TO_RECORD: {
          stopVoicePlayer();
          start();
          break;
        }
        case VoiceMessageInputStatus.RECORDING: {
          if (recordingTime >= config.voiceRecord.minRecordingTime && !isDisabled) {
            stop();
          } else if (isDisabled) {
            cancel();
            setShowModal(true);
            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
          } else {
            cancel();
            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
          }
          break;
        }
        case VoiceMessageInputStatus.READY_TO_PLAY: {
          play();
          break;
        }
        case VoiceMessageInputStatus.PLAYING: {
          pause();
          break;
        }
      }
    } }),
    showModal && import_react66.default.createElement(
      Modal,
      { className: "sendbird-voice-message-input-wrapper-alert", titleText: isDisabledBecauseMuted(channel) ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN, hideFooter: true, isCloseOnClickOutside: true, onClose: function() {
        setShowModal(false);
        onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
      } },
      import_react66.default.createElement(
        "div",
        { className: "sendbird-voice-message-input-wrapper-alert__body" },
        import_react66.default.createElement(Button, { className: "sendbird-voice-message-input-wrapper-alert__body__ok-button", type: ButtonTypes.PRIMARY, size: ButtonSizes.BIG, onClick: function() {
          setShowModal(false);
          onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
        } }, stringSet.BUTTON__OK)
      )
    )
  );
};
var useHandleUploadFiles = function(_a, _b) {
  var sendFileMessage = _a.sendFileMessage, sendMultipleFilesMessage = _a.sendMultipleFilesMessage, quoteMessage = _a.quoteMessage;
  var logger = _b.logger;
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var imageCompression = config.imageCompression;
  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;
  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;
  var openModal = useGlobalModalContext().openModal;
  return (0, import_react66.useCallback)(function(files) {
    return __awaiter(void 0, void 0, void 0, function() {
      var ONE_MiB, compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (files.length === 0) {
              logger.warning("Channel|useHandleUploadFiles: given file list is empty.", { files });
              return [
                2
                /*return*/
              ];
            }
            if (files.length > uikitMultipleFilesMessageLimit) {
              logger.info("Channel|useHandleUploadFiles: Cannot upload files more than ".concat(uikitMultipleFilesMessageLimit));
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace("%d", "".concat(uikitUploadSizeLimit)),
                  hideFooter: true
                },
                childElement: function(_a3) {
                  var closeModal = _a3.closeModal;
                  return import_react66.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            if (files.some(function(file2) {
              return file2.size > uikitUploadSizeLimit;
            })) {
              logger.info("Channel|useHandleUploadFiles: Cannot upload file size exceeding ".concat(uikitUploadSizeLimit));
              ONE_MiB = 1024 * 1024;
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace("%d", "".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),
                  hideFooter: true
                },
                childElement: function(_a3) {
                  var closeModal = _a3.closeModal;
                  return import_react66.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            return [4, compressImages({
              files,
              imageCompression,
              logger
            })];
          case 1:
            compressedFiles = _a2.sent().compressedFiles;
            sendingFiles = compressedFiles;
            if (sendingFiles.length === 1) {
              logger.info("Channel|useHandleUploadFiles: sending one file.");
              file = sendingFiles[0];
              return [2, sendFileMessage({ file, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId })];
            } else if (sendingFiles.length > 1) {
              logger.info("Channel|useHandleUploadFiles: sending multiple files.");
              imageFiles_1 = [];
              otherFiles_1 = [];
              sendingFiles.forEach(function(file2) {
                if (isImage(file2.type)) {
                  imageFiles_1.push(file2);
                } else {
                  otherFiles_1.push(file2);
                }
              });
              return [2, otherFiles_1.reduce(function(previousPromise, item) {
                return previousPromise.then(function() {
                  return sendFileMessage({ file: item, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId });
                });
              }, function() {
                if (imageFiles_1.length === 0) {
                  return Promise.resolve();
                } else if (imageFiles_1.length === 1) {
                  return sendFileMessage({ file: imageFiles_1[0] });
                } else {
                  return sendMultipleFilesMessage({
                    fileInfoList: imageFiles_1.map(function(file2) {
                      return {
                        file: file2,
                        fileName: file2.name,
                        fileSize: file2.size,
                        mimeType: file2.type
                      };
                    }),
                    parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId
                  });
                }
              }())];
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);
};
var MessageInputWrapperView = import_react66.default.forwardRef(function(props, ref) {
  var _a;
  var currentChannel = props.currentChannel, loading = props.loading, quoteMessage = props.quoteMessage, setQuoteMessage = props.setQuoteMessage, messageInputRef = props.messageInputRef, sendUserMessage = props.sendUserMessage, sendFileMessage = props.sendFileMessage, sendVoiceMessage = props.sendVoiceMessage, sendMultipleFilesMessage = props.sendMultipleFilesMessage, renderUserMentionItem = props.renderUserMentionItem, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon, acceptableMimeTypes = props.acceptableMimeTypes, disabled = props.disabled;
  var stringSet = useLocalization().stringSet;
  var isMobile = useMediaQueryContext().isMobile;
  var _b = useSendbirdStateContext(), stores = _b.stores, config = _b.config;
  var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;
  var sdk = stores.sdkStore.sdk;
  var maxMentionCount = userMention.maxMentionCount, maxSuggestionCount = userMention.maxSuggestionCount;
  var isBroadcast = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast;
  var isOperator = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === "operator";
  var isMultipleFilesMessageEnabled = (_a = props.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;
  var isMentionEnabled = groupChannel.enableMention;
  var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;
  var _c = (0, import_react66.useState)(""), mentionNickname = _c[0], setMentionNickname = _c[1];
  var _d = (0, import_react66.useState)([]), mentionedUsers = _d[0], setMentionedUsers = _d[1];
  var _e = (0, import_react66.useState)([]), mentionedUserIds = _e[0], setMentionedUserIds = _e[1];
  var _f = (0, import_react66.useState)(null), selectedUser = _f[0], setSelectedUser = _f[1];
  var _g = (0, import_react66.useState)([]), mentionSuggestedUsers = _g[0], setMentionSuggestedUsers = _g[1];
  var _h = (0, import_react66.useState)(null), messageInputEvent = _h[0], setMessageInputEvent = _h[1];
  var _j = (0, import_react66.useState)(false), showVoiceMessageInput = _j[0], setShowVoiceMessageInput = _j[1];
  var isMessageInputDisabled = loading || (!currentChannel || !sdk) || !sdk.isCacheEnabled && !isOnline || isDisabledBecauseFrozen(currentChannel) || isDisabledBecauseMuted(currentChannel) || isDisabledBecauseSuggestedReplies(currentChannel, config.groupChannel.enableSuggestedReplies) || disabled;
  var showSuggestedMentionList = !isMessageInputDisabled && isMentionEnabled && mentionNickname.length > 0 && !isBroadcast;
  var mentionNodes = useDirtyGetMentions({ ref: ref || messageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxMentionCount;
  (0, import_react66.useEffect)(function() {
    setMentionNickname("");
    setMentionedUsers([]);
    setMentionedUserIds([]);
    setSelectedUser(null);
    setMentionSuggestedUsers([]);
    setMessageInputEvent(null);
    setShowVoiceMessageInput(false);
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  (0, import_react66.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId = _a2.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  var handleUploadFiles = useHandleUploadFiles({
    sendFileMessage,
    sendMultipleFilesMessage,
    quoteMessage: quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0
  }, { logger });
  if (isBroadcast && !isOperator) {
    return null;
  }
  return import_react66.default.createElement(
    "div",
    { className: showVoiceMessageInput ? "sendbird-message-input-wrapper--voice-message" : "sendbird-message-input-wrapper" },
    showSuggestedMentionList && import_react66.default.createElement(SuggestedMentionList, { currentChannel, targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0, renderUserMentionItem, onUserItemClick: function(user) {
      if (user) {
        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname("");
      setSelectedUser(user);
      setMessageInputEvent(null);
    }, onFocusItemChange: function() {
      setMessageInputEvent(null);
    }, onFetchUsers: function(users) {
      setMentionSuggestedUsers(users);
    }, ableAddMention: ableMention, maxMentionCount, maxSuggestionCount }),
    quoteMessage && import_react66.default.createElement(
      "div",
      { className: "sendbird-message-input-wrapper__quote-message-input" },
      import_react66.default.createElement(QuoteMessageInput, { replyingMessage: quoteMessage, onClose: function() {
        return setQuoteMessage(null);
      } })
    ),
    showVoiceMessageInput ? import_react66.default.createElement(VoiceMessageInputWrapper, { channel: currentChannel !== null && currentChannel !== void 0 ? currentChannel : void 0, onSubmitClick: function(recordedFile, duration) {
      sendVoiceMessage({ file: recordedFile, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId }, duration);
      setQuoteMessage(null);
      setShowVoiceMessageInput(false);
    }, onCancelClick: function() {
      setShowVoiceMessageInput(false);
    } }) : import_react66.default.createElement(MessageInput, { className: "sendbird-message-input-wrapper__message-input", channel: currentChannel, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isMobile, acceptableMimeTypes, mentionSelectedUser: selectedUser, isMentionEnabled, isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function() {
      setShowVoiceMessageInput(true);
    }, setMentionedUsers, placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen(currentChannel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__FROZEN || isDisabledBecauseMuted(currentChannel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED) || disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || void 0, ref: ref || messageInputRef, disabled: isMessageInputDisabled, renderFileUploadIcon, renderSendMessageIcon, renderVoiceMessageIcon, onStartTyping: function() {
      currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping();
    }, onSendMessage: function(_a2) {
      var _b2;
      var message = _a2.message, mentionTemplate = _a2.mentionTemplate;
      sendUserMessage({
        message,
        mentionedUsers,
        mentionedMessageTemplate: mentionTemplate,
        parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId
      });
      setMentionNickname("");
      setMentionedUsers([]);
      setQuoteMessage(null);
      (_b2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(currentChannel);
    }, onFileUpload: function(fileList) {
      handleUploadFiles(fileList);
      setQuoteMessage(null);
    }, onUserMentioned: function(user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname("");
      }
    }, onMentionStringChange: function(mentionText) {
      setMentionNickname(mentionText);
    }, onMentionedUserIdsUpdated: function(userIds) {
      setMentionedUserIds(userIds);
    }, onKeyDown: function(e) {
      if (showSuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    } })
  );
});

// node_modules/@sendbird/uikit-react/GroupChannel/components/MessageInputWrapper.js
var import_react_dom21 = __toESM(require_react_dom(), 1);
var MessageInputWrapper = function(props) {
  var context = useGroupChannelContext();
  return import_react67.default.createElement(MessageInputWrapperView, __assign({}, props, context));
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/GroupChannelUI.js
var import_react_dom22 = __toESM(require_react_dom(), 1);
var GroupChannelUI = function(props) {
  var context = useGroupChannelContext();
  var channelUrl = context.channelUrl, fetchChannelError = context.fetchChannelError;
  var _a = deleteNullish(props), _b = _a.renderChannelHeader, renderChannelHeader = _b === void 0 ? function(props2) {
    return import_react68.default.createElement(GroupChannelHeader, __assign({}, props2));
  } : _b, _c = _a.renderMessageList, renderMessageList = _c === void 0 ? function(props2) {
    return import_react68.default.createElement(MessageList, __assign({}, props2, { className: "sendbird-conversation__message-list" }));
  } : _c, _d = _a.renderMessageInput, renderMessageInput = _d === void 0 ? function() {
    return import_react68.default.createElement(MessageInputWrapper, __assign({}, props));
  } : _d;
  return import_react68.default.createElement(GroupChannelUIView, __assign({}, props, context, { isInvalid: fetchChannelError !== null, channelUrl, renderChannelHeader, renderMessageList, renderMessageInput }));
};

// node_modules/@sendbird/uikit-react/GroupChannel.js
var import_react_dom23 = __toESM(require_react_dom());
var GroupChannel = function(props) {
  return import_react69.default.createElement(
    GroupChannelProvider,
    __assign({}, props),
    import_react69.default.createElement(GroupChannelUI, __assign({}, props))
  );
};

export {
  useToggleReactionCallback,
  getCaseResolvedReplyType,
  getCaseResolvedThreadReplySelectType,
  pubSubFactory,
  getIsReactionEnabled,
  useHTMLTextDirection,
  useMessageLayoutDirection,
  GroupChannelUIView,
  getChannelTitle,
  GroupChannelHeaderView,
  ThreadReplySelectType,
  useDirtyGetMentions,
  DateSeparator,
  MessageInputKeys,
  tokenizeMessage,
  MessageInput,
  MessageMenu,
  MessageEmojiMenu,
  MessageProvider,
  EmojiReactions,
  getMessageFirstFileName,
  getMessageFirstFileUrl,
  MobileMenu,
  LinkLabel,
  TextFragment,
  OGMessageItemBody,
  TextMessageItemBody,
  FileMessageItemBody,
  FileViewer,
  ThreadMessageKind,
  MultipleFilesMessageItemBody,
  useThreadMessageKindKeySelector,
  useFileInfoListWithUploaded,
  VoiceMessageItemBody,
  ThumbnailMessageItemBody,
  UnknownMessageItemBody,
  useElementObserver,
  SuggestedMentionListView,
  MessageView,
  FileViewerView,
  getModalDeleteMessageTitle,
  RemoveMessageModalView,
  UnreadCount,
  FrozenNotification,
  TypingIndicatorBubble,
  compareMessagesForGrouping,
  getMessagePartsInfo,
  compressImages,
  VoiceMessageInputWrapper,
  MessageInputWrapperView,
  GroupChannel
};
/*! Bundled license information:

dompurify/dist/purify.es.mjs:
  (*! @license DOMPurify 3.1.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.1.6/LICENSE *)
*/
//# sourceMappingURL=chunk-YJDTWDQW.js.map

import {
  Avatar$1,
  ButtonTypes,
  ChannelAvatar,
  ContextMenu,
  Header$1,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  Input,
  InputLabel,
  Label,
  LabelColors,
  LabelTypography,
  LocalizationContext,
  MENTION_USER_LABEL_CLASSNAME,
  MenuItem,
  MenuItems,
  MessageStatus,
  Modal,
  PlaceHolder,
  PlaceHolderTypes,
  TextButton,
  TypingIndicatorText,
  UserListItem,
  UserProfileProvider,
  __assign,
  __awaiter,
  __generator,
  __rest,
  __spreadArray,
  classnames,
  getChannelTitle,
  getChannelUnreadMessageCount,
  getCreateGroupChannel,
  getLastMessage,
  getLastMessageCreatedAt,
  getSdk,
  getTotalMembers,
  isAboutSame,
  isVoiceMessage,
  mi,
  noop,
  rn,
  useGroupChannelHandler,
  useGroupChannelList,
  useLocalization,
  useLongPress,
  useMediaQueryContext,
  usePreservedCallback,
  useSendbirdStateContext,
  uuidv4
} from "./chunk-6LPVY4UA.js";
import {
  SCROLL_BUFFER
} from "./chunk-ZRNKNDBU.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/@sendbird/uikit-react/GroupChannelList.js
var import_react22 = __toESM(require_react());

// node_modules/@sendbird/uikit-react/GroupChannelList/context.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-8Y67Y4IK.js
var import_react = __toESM(require_react(), 1);
function useOnlineStatus(sdk, logger) {
  var _a, _b;
  var _c = (0, import_react.useState)(
    // window is undefined in SSR env
    typeof window !== "undefined" ? (_b = (_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.onLine) !== null && _b !== void 0 ? _b : true : true
  ), isOnline = _c[0], setIsOnline = _c[1];
  (0, import_react.useEffect)(function() {
    var uniqueHandlerId = uuidv4();
    try {
      logger.warning("sdk changed", uniqueHandlerId);
      var handler = new mi({
        onDisconnected: function() {
          setIsOnline(false);
          logger.warning("onDisconnected", { isOnline });
        },
        onReconnectStarted: function() {
          setIsOnline(false);
          logger.warning("onReconnectStarted", { isOnline });
        },
        onReconnectSucceeded: function() {
          setIsOnline(true);
          logger.warning("onReconnectSucceeded", { isOnline });
        },
        onReconnectFailed: function() {
          sdk.reconnect();
          logger.warning("onReconnectFailed");
        }
      });
      if (sdk === null || sdk === void 0 ? void 0 : sdk.addConnectionHandler) {
        sdk.addConnectionHandler(uniqueHandlerId, handler);
        logger.info("Added ConnectionHandler", uniqueHandlerId);
      }
    } catch (_a2) {
    }
    return function() {
      try {
        sdk.removeConnectionHandler(uniqueHandlerId);
        logger.info("Removed ConnectionHandler", uniqueHandlerId);
      } catch (_a2) {
      }
    };
  }, [sdk]);
  (0, import_react.useEffect)(function() {
    var tryReconnect = function() {
      try {
        logger.warning("Try reconnecting SDK");
        if (sdk.connectionState !== "OPEN") {
          sdk.reconnect();
        }
      } catch (_a2) {
      }
    };
    window.addEventListener("online", tryReconnect);
    return function() {
      window.removeEventListener("online", tryReconnect);
    };
  }, [sdk]);
  (0, import_react.useEffect)(function() {
    var body = document.querySelector("body");
    if (!isOnline && !(sdk === null || sdk === void 0 ? void 0 : sdk.isCacheEnabled)) {
      try {
        body === null || body === void 0 ? void 0 : body.classList.add("sendbird__offline");
        logger.info("Added class sendbird__offline to body");
      } catch (e) {
      }
    } else {
      try {
        body === null || body === void 0 ? void 0 : body.classList.remove("sendbird__offline");
        logger.info("Removed class sendbird__offline from body");
      } catch (e) {
      }
    }
  }, [isOnline, sdk === null || sdk === void 0 ? void 0 : sdk.isCacheEnabled]);
  return isOnline;
}
var TIMEOUT = 2e3;
function schedulerFactory(_a) {
  var logger = _a.logger, timeout = _a.timeout, cb = _a.cb;
  var queue = [];
  var interval = null;
  var push = function(channel) {
    var channelPresent = queue.find(function(c) {
      return c.url === channel.url;
    });
    if (!channelPresent) {
      queue.push(channel);
    } else {
      logger.info("Channel: Mark as read already in queue", { channel });
    }
    if (interval) {
      return;
    }
    var item = queue.shift();
    if (item) {
      cb(item);
    }
    interval = setInterval(function() {
      if (queue.length === 0 && interval) {
        clearInterval(interval);
        interval = null;
        return;
      }
      var item2 = queue.shift();
      if (item2) {
        cb(item2);
      }
    }, timeout || TIMEOUT);
  };
  var clear = function() {
    queue = [];
    if (interval) {
      clearInterval(interval);
      interval = null;
    }
  };
  return {
    push,
    clear,
    getQueue: function() {
      return queue;
    }
  };
}
function useUnmount(callback, deps) {
  if (deps === void 0) {
    deps = [];
  }
  (0, import_react.useLayoutEffect)(function() {
    return function() {
      callback();
    };
  }, deps);
}
function useMarkAsDeliveredScheduler(_a, _b) {
  var _this = this;
  var isConnected = _a.isConnected;
  var logger = _b.logger;
  var markAsDeliveredScheduler = (0, import_react.useMemo)(function() {
    return schedulerFactory({
      logger,
      cb: function(channel) {
        return __awaiter(_this, void 0, void 0, function() {
          var error_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 2, , 3]);
                return [4, channel.markAsDelivered()];
              case 1:
                _a2.sent();
                return [3, 3];
              case 2:
                error_1 = _a2.sent();
                logger.warning("Channel: Mark as delivered failed", { channel, error: error_1 });
                return [3, 3];
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
    });
  }, []);
  (0, import_react.useEffect)(function() {
    if (!isConnected) {
      markAsDeliveredScheduler.clear();
    }
  }, [isConnected]);
  useUnmount(function() {
    markAsDeliveredScheduler.clear();
  });
  return markAsDeliveredScheduler;
}

// node_modules/@sendbird/uikit-react/GroupChannelList/context.js
var GroupChannelListContext = import_react2.default.createContext(null);
var GroupChannelListProvider = function(props) {
  var _a, _b, _c;
  var children = props.children, _d = props.className, className = _d === void 0 ? "" : _d, selectedChannelUrl = props.selectedChannelUrl, _e = props.disableAutoSelect, disableAutoSelect = _e === void 0 ? false : _e, allowProfileEdit = props.allowProfileEdit, isTypingIndicatorEnabled = props.isTypingIndicatorEnabled, isMessageReceiptStatusEnabled = props.isMessageReceiptStatusEnabled, channelListQueryParams = props.channelListQueryParams, onThemeChange = props.onThemeChange, _f = props.onChannelSelect, onChannelSelect = _f === void 0 ? noop : _f, _g = props.onChannelCreated, onChannelCreated = _g === void 0 ? noop : _g, onCreateChannelClick = props.onCreateChannelClick, onBeforeCreateChannel = props.onBeforeCreateChannel, onUserProfileUpdated = props.onUserProfileUpdated, disableUserProfile = props.disableUserProfile, renderUserProfile = props.renderUserProfile, onUserProfileMessage = props.onUserProfileMessage;
  var globalStore = useSendbirdStateContext();
  var config = globalStore.config, stores = globalStore.stores;
  var sdkStore = stores.sdkStore;
  var sdk = sdkStore.sdk;
  var isConnected = useOnlineStatus(sdk, config.logger);
  var scheduler = useMarkAsDeliveredScheduler({ isConnected }, config);
  var channelListDataSource = useGroupChannelList(sdk, {
    collectionCreator: getCollectionCreator(sdk, channelListQueryParams),
    markAsDelivered: function(channels) {
      return channels.forEach(scheduler.push);
    },
    onChannelsDeleted: function(channelUrls) {
      channelUrls.forEach(function(url) {
        if (url === selectedChannelUrl)
          onChannelSelect(null);
      });
    }
  });
  var refreshing = channelListDataSource.refreshing, initialized = channelListDataSource.initialized, groupChannels = channelListDataSource.groupChannels, refresh = channelListDataSource.refresh, loadMore = channelListDataSource.loadMore;
  (0, import_react2.useEffect)(function() {
    var _a2;
    if (!disableAutoSelect && stores.sdkStore.initialized && initialized) {
      if (!selectedChannelUrl)
        onChannelSelect((_a2 = groupChannels[0]) !== null && _a2 !== void 0 ? _a2 : null);
    }
  }, [disableAutoSelect, stores.sdkStore.initialized, initialized, selectedChannelUrl]);
  (0, import_react2.useEffect)(function() {
    refresh();
  }, [
    Object.keys(channelListQueryParams !== null && channelListQueryParams !== void 0 ? channelListQueryParams : {}).sort().map(function(key) {
      return "".concat(key, "=").concat(encodeURIComponent(JSON.stringify(channelListQueryParams[key])));
    }).join("&")
  ]);
  var _h = (0, import_react2.useState)([]), typingChannelUrls = _h[0], setTypingChannelUrls = _h[1];
  useGroupChannelHandler(sdk, {
    onTypingStatusUpdated: function(channel) {
      var _a2;
      var channelList = typingChannelUrls.filter(function(channelUrl) {
        return channelUrl !== channel.url;
      });
      if (((_a2 = channel.getTypingUsers()) === null || _a2 === void 0 ? void 0 : _a2.length) > 0) {
        setTypingChannelUrls(channelList.concat(channel.url));
      } else {
        setTypingChannelUrls(channelList);
      }
    }
  });
  return import_react2.default.createElement(
    GroupChannelListContext.Provider,
    { value: {
      className,
      selectedChannelUrl,
      disableAutoSelect,
      allowProfileEdit: (_a = allowProfileEdit !== null && allowProfileEdit !== void 0 ? allowProfileEdit : config.allowProfileEdit) !== null && _a !== void 0 ? _a : true,
      isTypingIndicatorEnabled: (_b = isTypingIndicatorEnabled !== null && isTypingIndicatorEnabled !== void 0 ? isTypingIndicatorEnabled : config.groupChannelList.enableTypingIndicator) !== null && _b !== void 0 ? _b : false,
      isMessageReceiptStatusEnabled: (_c = isMessageReceiptStatusEnabled !== null && isMessageReceiptStatusEnabled !== void 0 ? isMessageReceiptStatusEnabled : config.groupChannelList.enableMessageReceiptStatus) !== null && _c !== void 0 ? _c : false,
      onChannelSelect,
      onChannelCreated,
      onThemeChange,
      onCreateChannelClick,
      onBeforeCreateChannel,
      onUserProfileUpdated,
      typingChannelUrls,
      refreshing,
      initialized,
      groupChannels,
      refresh,
      loadMore
    } },
    import_react2.default.createElement(
      UserProfileProvider,
      { disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile, renderUserProfile: renderUserProfile !== null && renderUserProfile !== void 0 ? renderUserProfile : config === null || config === void 0 ? void 0 : config.renderUserProfile, onUserProfileMessage: onUserProfileMessage !== null && onUserProfileMessage !== void 0 ? onUserProfileMessage : config === null || config === void 0 ? void 0 : config.onUserProfileMessage },
      import_react2.default.createElement("div", { className: "sendbird-channel-list ".concat(className) }, children)
    )
  );
};
var useGroupChannelListContext = function() {
  var context = (0, import_react2.useContext)(GroupChannelListContext);
  if (!context)
    throw new Error("GroupChannelListContext not found. Use within the GroupChannelList module.");
  return context;
};
function getCollectionCreator(sdk, channelListQueryParams) {
  return function(defaultParams) {
    var params = __assign(__assign({}, defaultParams), channelListQueryParams);
    return sdk.groupChannel.createGroupChannelCollection(__assign(__assign({}, params), { filter: new rn(params) }));
  };
}

// node_modules/@sendbird/uikit-react/GroupChannelList/components/GroupChannelListUI.js
var import_react21 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-B2Vy0FIf.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/GroupChannelList/components/GroupChannelListHeader.js
var import_react3 = __toESM(require_react(), 1);
var GroupChannelListHeader = function(_a) {
  var renderTitle = _a.renderTitle, renderIconButton = _a.renderIconButton, onEdit = _a.onEdit, allowProfileEdit = _a.allowProfileEdit, renderLeft = _a.renderLeft, renderMiddle = _a.renderMiddle, renderRight = _a.renderRight;
  var stores = useSendbirdStateContext().stores;
  var user = stores.userStore.user;
  var stringSet = useLocalization().stringSet;
  var renderProfile = renderMiddle !== null && renderMiddle !== void 0 ? renderMiddle : renderTitle;
  return import_react3.default.createElement(Header$1, { className: classnames("sendbird-channel-header", allowProfileEdit && "sendbird-channel-header--allow-edit"), renderLeft, renderMiddle: function() {
    var _a2;
    return (_a2 = renderProfile === null || renderProfile === void 0 ? void 0 : renderProfile()) !== null && _a2 !== void 0 ? _a2 : import_react3.default.createElement(
      "div",
      { className: "sendbird-channel-header__title", role: "button", onClick: function() {
        onEdit === null || onEdit === void 0 ? void 0 : onEdit();
      }, onKeyDown: function() {
        onEdit === null || onEdit === void 0 ? void 0 : onEdit();
      }, tabIndex: 0 },
      import_react3.default.createElement(
        "div",
        { className: "sendbird-channel-header__title__left" },
        import_react3.default.createElement(Avatar$1, { width: "32px", height: "32px", src: user.profileUrl, alt: user.nickname })
      ),
      import_react3.default.createElement(
        "div",
        { className: "sendbird-channel-header__title__right" },
        import_react3.default.createElement(Label, { className: "sendbird-channel-header__title__right__name", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, user.nickname || stringSet.NO_NAME),
        import_react3.default.createElement(Label, { className: "sendbird-channel-header__title__right__user-id", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_2 }, user.userId)
      )
    );
  }, renderRight: renderRight !== null && renderRight !== void 0 ? renderRight : renderIconButton });
};

// node_modules/@sendbird/uikit-react/EditUserProfile.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/EditUserProfile/context.js
var import_react4 = __toESM(require_react(), 1);
var EditUserProfileProviderContext = import_react4.default.createContext(null);
var EditUserProfileProvider = function(_a) {
  var children = _a.children, props = __rest(_a, ["children"]);
  return import_react4.default.createElement(EditUserProfileProviderContext.Provider, { value: props }, children);
};
var useEditUserProfileContext = function() {
  var context = import_react4.default.useContext(EditUserProfileProviderContext);
  if (!context)
    throw new Error("EditUserProfileContext not found. Use within the EditUserProfile module.");
  return context;
};

// node_modules/@sendbird/uikit-react/EditUserProfile/components/EditUserProfileUI.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-egkx7NWB.js
var USER_ACTIONS = {
  INIT_USER: "INIT_USER",
  RESET_USER: "RESET_USER",
  UPDATE_USER_INFO: "UPDATE_USER_INFO"
};

// node_modules/@sendbird/uikit-react/EditUserProfile/components/EditUserProfileUI.js
var import_react_dom = __toESM(require_react_dom(), 1);
var EditUserProfileUIView = function(_a) {
  var _b;
  var formRef = _a.formRef, inputRef = _a.inputRef, onThemeChange = _a.onThemeChange, setProfileImage = _a.setProfileImage;
  var _c = useSendbirdStateContext(), stores = _c.stores, config = _c.config;
  var theme = config.theme, setCurrentTheme = config.setCurrentTheme;
  var user = (_b = stores.userStore) === null || _b === void 0 ? void 0 : _b.user;
  var stringSet = useLocalization().stringSet;
  var _d = (0, import_react5.useState)(null), currentImg = _d[0], setCurrentImg = _d[1];
  var hiddenInputRef = (0, import_react5.useRef)(null);
  return import_react5.default.createElement(
    "form",
    { className: "sendbird-edit-user-profile", ref: formRef, onSubmit: function(e) {
      e.preventDefault();
    } },
    import_react5.default.createElement(
      "section",
      { className: "sendbird-edit-user-profile__img" },
      import_react5.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL),
      import_react5.default.createElement(
        "div",
        { className: "sendbird-edit-user-profile__img__avatar" },
        import_react5.default.createElement(Avatar$1, { width: "80px", height: "80px", src: currentImg || (user === null || user === void 0 ? void 0 : user.profileUrl) })
      ),
      import_react5.default.createElement("input", { ref: hiddenInputRef, type: "file", accept: "image/gif, image/jpeg, image/png", style: { display: "none" }, onChange: function(e) {
        if (e.target.files) {
          setCurrentImg(URL.createObjectURL(e.target.files[0]));
          setProfileImage(e.target.files[0]);
        }
        if (hiddenInputRef.current) {
          hiddenInputRef.current.value = "";
        }
      } }),
      import_react5.default.createElement(
        TextButton,
        { className: "sendbird-edit-user-profile__img__avatar-button", disableUnderline: true, onClick: function() {
          var _a2;
          return (_a2 = hiddenInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
        } },
        import_react5.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD)
      )
    ),
    import_react5.default.createElement(
      "section",
      { className: "sendbird-edit-user-profile__name" },
      import_react5.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL),
      import_react5.default.createElement(Input, { required: (user === null || user === void 0 ? void 0 : user.nickname) !== "", name: "sendbird-edit-user-profile__name__input", ref: inputRef, value: user === null || user === void 0 ? void 0 : user.nickname, placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER })
    ),
    import_react5.default.createElement(
      "section",
      { className: "sendbird-edit-user-profile__userid" },
      import_react5.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL),
      import_react5.default.createElement(Input, { disabled: true, name: "sendbird-edit-user-profile__userid__input", value: user === null || user === void 0 ? void 0 : user.userId })
    ),
    import_react5.default.createElement(
      "section",
      { className: "sendbird-edit-user-profile__theme" },
      import_react5.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL),
      import_react5.default.createElement("div", { className: "sendbird-edit-user-profile__theme__theme-icon" }, theme === "dark" ? import_react5.default.createElement(Icon, { onClick: function() {
        setCurrentTheme("light");
        onThemeChange === null || onThemeChange === void 0 ? void 0 : onThemeChange("light");
      }, type: IconTypes.TOGGLE_ON, width: 44, height: 24 }) : import_react5.default.createElement(Icon, { onClick: function() {
        setCurrentTheme("dark");
        onThemeChange === null || onThemeChange === void 0 ? void 0 : onThemeChange("dark");
      }, type: IconTypes.TOGGLE_OFF, width: 44, height: 24 }))
    )
  );
};
var handleUpdateUserInfo = function(_a) {
  var _b, _c, _d;
  var globalContext = _a.globalContext, formRef = _a.formRef, inputRef = _a.inputRef, profileImage = _a.profileImage, onEditProfile = _a.onEditProfile;
  var stores = globalContext.stores, dispatchers = globalContext.dispatchers;
  var sdk = stores.sdkStore.sdk;
  var user = stores.userStore.user;
  var userDispatcher = dispatchers.userDispatcher;
  if ((user === null || user === void 0 ? void 0 : user.nickname) !== "" && !inputRef.current.value) {
    (_c = (_b = formRef.current).reportValidity) === null || _c === void 0 ? void 0 : _c.call(_b);
    return;
  }
  sdk === null || sdk === void 0 ? void 0 : sdk.updateCurrentUserInfo({
    nickname: (_d = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) === null || _d === void 0 ? void 0 : _d.value,
    profileImage: profileImage !== null && profileImage !== void 0 ? profileImage : void 0
  }).then(function(updatedUser) {
    userDispatcher({ type: USER_ACTIONS.UPDATE_USER_INFO, payload: updatedUser });
    onEditProfile === null || onEditProfile === void 0 ? void 0 : onEditProfile(updatedUser);
  });
};
var useEditUserProfileUISates = function(_a) {
  var onEditProfile = _a.onEditProfile;
  var globalContext = useSendbirdStateContext();
  var inputRef = (0, import_react5.useRef)(null);
  var formRef = (0, import_react5.useRef)(null);
  var _b = (0, import_react5.useState)(null), profileImage = _b[0], setProfileImage = _b[1];
  var updateUserInfo = function() {
    handleUpdateUserInfo({
      globalContext,
      formRef,
      inputRef,
      profileImage,
      onEditProfile
    });
  };
  return {
    formRef,
    inputRef,
    updateUserInfo,
    profileImage,
    setProfileImage
  };
};
var EditUserProfileUI = function() {
  var editProfileContext = useEditUserProfileContext();
  var onEditProfile = editProfileContext.onEditProfile, onCancel = editProfileContext.onCancel, onThemeChange = editProfileContext.onThemeChange;
  var stringSet = (0, import_react5.useContext)(LocalizationContext).stringSet;
  var _a = useEditUserProfileUISates({ onEditProfile }), formRef = _a.formRef, inputRef = _a.inputRef, updateUserInfo = _a.updateUserInfo, setProfileImage = _a.setProfileImage;
  return import_react5.default.createElement(
    Modal,
    { titleText: stringSet.EDIT_PROFILE__TITLE, submitText: stringSet.BUTTON__SAVE, type: ButtonTypes.PRIMARY, onCancel, isFullScreenOnMobile: true, onSubmit: updateUserInfo },
    import_react5.default.createElement(EditUserProfileUIView, { formRef, inputRef, setProfileImage, onThemeChange })
  );
};

// node_modules/@sendbird/uikit-react/EditUserProfile.js
var import_react_dom2 = __toESM(require_react_dom(), 1);
var EditUserProfile = function(props) {
  var onEditProfile = props.onEditProfile, onCancel = props.onCancel, onThemeChange = props.onThemeChange;
  return import_react6.default.createElement(
    EditUserProfileProvider,
    { onEditProfile, onCancel, onThemeChange },
    import_react6.default.createElement(EditUserProfileUI, null)
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-FtNvi0ib.js
var import_react7 = __toESM(require_react(), 1);
function useThrottleCallback(callback, delay, options) {
  if (options === void 0) {
    options = {
      leading: true,
      trailing: false
    };
  }
  var timer = (0, import_react7.useRef)(null);
  var trailingArgs = (0, import_react7.useRef)(null);
  (0, import_react7.useEffect)(function() {
    return function() {
      if (timer.current)
        clearTimeout(timer.current);
    };
  }, []);
  return usePreservedCallback(function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (timer.current) {
      trailingArgs.current = args;
      return;
    }
    if (options.leading) {
      callback.apply(void 0, args);
    } else {
      trailingArgs.current = args;
    }
    var invoke = function() {
      if (options.trailing && trailingArgs.current) {
        callback.apply(void 0, trailingArgs.current);
        trailingArgs.current = null;
        timer.current = setTimeout(invoke, delay);
      } else {
        timer.current = null;
      }
    };
    timer.current = setTimeout(invoke, delay);
  });
}

// node_modules/@sendbird/uikit-react/chunks/bundle-D2bCW01X.js
var BUFFER_DELAY = 100;
function useOnScrollPositionChangeDetector(params) {
  var onReachedTop = params.onReachedTop, onReachedBottom = params.onReachedBottom, onInBetween = params.onInBetween;
  var cb = usePreservedCallback(function(event) {
    if (event === null || event === void 0 ? void 0 : event.target) {
      var _a = event.target, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
      var positionEvent = {
        distanceFromBottom: scrollHeight - scrollTop - clientHeight
      };
      if (onReachedTop && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
        onReachedTop(positionEvent);
      } else if (onReachedBottom && isAboutSame(scrollHeight, clientHeight + scrollTop, SCROLL_BUFFER)) {
        onReachedBottom(positionEvent);
      } else if (onInBetween) {
        onInBetween(positionEvent);
      }
    }
  });
  return useThrottleCallback(cb, BUFFER_DELAY, { trailing: true });
}

// node_modules/@sendbird/uikit-react/chunks/bundle-B2Vy0FIf.js
var GroupChannelListUIView = function(_a) {
  var renderHeader = _a.renderHeader, renderPlaceHolderError = _a.renderPlaceHolderError, renderPlaceHolderLoading = _a.renderPlaceHolderLoading, renderPlaceHolderEmptyList = _a.renderPlaceHolderEmptyList, onChangeTheme = _a.onChangeTheme, onUserProfileUpdated = _a.onUserProfileUpdated, allowProfileEdit = _a.allowProfileEdit, channels = _a.channels, onLoadMore = _a.onLoadMore, initialized = _a.initialized, renderChannel = _a.renderChannel, renderAddChannel = _a.renderAddChannel;
  var _b = (0, import_react8.useState)(false), showProfileEdit = _b[0], setShowProfileEdit = _b[1];
  var stores = useSendbirdStateContext().stores;
  var renderer = {
    addChannel: renderAddChannel,
    channel: renderChannel,
    placeholder: {
      loading: function() {
        if (initialized)
          return null;
        if (renderPlaceHolderLoading)
          return renderPlaceHolderLoading();
        return import_react8.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
      },
      empty: function() {
        if (!initialized)
          return null;
        if (renderPlaceHolderEmptyList)
          return renderPlaceHolderEmptyList();
        return import_react8.default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS });
      },
      error: function() {
        if (!initialized || !stores.sdkStore.error)
          return null;
        if (renderPlaceHolderError)
          return renderPlaceHolderError();
        return import_react8.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG });
      }
    }
  };
  return import_react8.default.createElement(
    import_react8.default.Fragment,
    null,
    import_react8.default.createElement("div", { className: "sendbird-channel-list__header" }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || import_react8.default.createElement(GroupChannelListHeader, { onEdit: function() {
      return allowProfileEdit && setShowProfileEdit(true);
    }, allowProfileEdit, renderIconButton: function() {
      return renderer.addChannel();
    } })),
    showProfileEdit && import_react8.default.createElement(EditUserProfile, { onThemeChange: onChangeTheme, onCancel: function() {
      return setShowProfileEdit(false);
    }, onEditProfile: function(user) {
      setShowProfileEdit(false);
      onUserProfileUpdated(user);
    } }),
    import_react8.default.createElement(ChannelListComponent, { data: channels, renderItem: renderer.channel, onLoadMore, placeholderLoading: renderer.placeholder.loading(), placeholderEmpty: renderer.placeholder.empty(), placeholderError: renderer.placeholder.error() })
  );
};
var ChannelListComponent = function(props) {
  var data = props.data, renderItem = props.renderItem, onLoadMore = props.onLoadMore, placeholderLoading = props.placeholderLoading, placeholderError = props.placeholderError, placeholderEmpty = props.placeholderEmpty;
  var onScroll = useOnScrollPositionChangeDetector({
    onReachedBottom: function() {
      return onLoadMore === null || onLoadMore === void 0 ? void 0 : onLoadMore();
    }
  });
  return import_react8.default.createElement(
    "div",
    { className: "sendbird-channel-list__body", onScroll },
    placeholderError,
    import_react8.default.createElement("div", null, data.map(function(item, index) {
      return renderItem({ item, index });
    })),
    placeholderLoading,
    data.length === 0 && placeholderEmpty
  );
};

// node_modules/@sendbird/uikit-react/GroupChannelList/components/GroupChannelPreviewAction.js
var import_react9 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var LeaveGroupChannel = function(_a) {
  var channel = _a.channel, onSubmit = _a.onSubmit, onCancel = _a.onCancel;
  var config = useSendbirdStateContext().config;
  var logger = config.logger, isOnline = config.isOnline;
  var stringSet = useLocalization().stringSet;
  if (channel) {
    return import_react9.default.createElement(Modal, { disabled: !isOnline, onCancel, onSubmit: function() {
      logger.info("LeaveGroupChannel: Leaving channel", channel);
      channel.leave().then(function() {
        logger.info("LeaveGroupChannel: Leaving channel successful!", channel);
        onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
      });
    }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE });
  }
};
function GroupChannelPreviewAction(_a) {
  var channel = _a.channel, _b = _a.disabled, disabled = _b === void 0 ? false : _b, onLeaveChannel = _a.onLeaveChannel;
  var parentRef = (0, import_react9.useRef)(null);
  var parentContainerRef = (0, import_react9.useRef)(null);
  var _c = (0, import_react9.useState)(false), showModal = _c[0], setShowModal = _c[1];
  var stringSet = (0, import_react9.useContext)(LocalizationContext).stringSet;
  return import_react9.default.createElement(
    "div",
    { ref: parentContainerRef, tabIndex: 0, role: "button", style: { display: "inline-block" }, onKeyDown: function(e) {
      return e.stopPropagation();
    }, onClick: function(e) {
      return e.stopPropagation();
    } },
    import_react9.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
      return import_react9.default.createElement(
        IconButton,
        { ref: parentRef, onClick: toggleDropdown, height: "32px", width: "32px" },
        import_react9.default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
      );
    }, menuItems: function(closeDropdown) {
      return import_react9.default.createElement(
        MenuItems,
        { parentRef, parentContainRef: parentContainerRef, closeDropdown },
        import_react9.default.createElement(MenuItem, { onClick: function() {
          if (disabled)
            return;
          setShowModal(true);
          closeDropdown();
        }, testID: "channel_list_item_context_menu_leave_channel" }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE)
      );
    } }),
    showModal && import_react9.default.createElement(LeaveGroupChannel, { channel, onSubmit: function() {
      setShowModal(false);
      onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();
    }, onCancel: function() {
      return setShowModal(false);
    } })
  );
}

// node_modules/@sendbird/uikit-react/GroupChannelList/components/GroupChannelListItem.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-R159x0xi.js
var import_react12 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/Badge.js
var import_react10 = __toESM(require_react(), 1);
function Badge(_a) {
  var count = _a.count, _b = _a.maxLevel, maxLevel = _b === void 0 ? 2 : _b, _c = _a.className, className = _c === void 0 ? "" : _c;
  var stringSet = (0, import_react10.useContext)(LocalizationContext).stringSet;
  var maximumNumber = parseInt("9".repeat(maxLevel > 6 ? 6 : maxLevel), 10);
  return import_react10.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-badge"
    ], false).join(" ") },
    import_react10.default.createElement(
      "div",
      { className: "sendbird-badge__text" },
      import_react10.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONCONTENT_1 }, typeof count === "string" ? count : count > maximumNumber ? "".concat(maximumNumber).concat(stringSet.BADGE__OVER) : count)
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/MentionUserLabel.js
var import_react11 = __toESM(require_react(), 1);
function MentionUserLabel(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, children = _a.children, _c = _a.isReverse, isReverse = _c === void 0 ? false : _c, color = _a.color, userId = _a.userId;
  return import_react11.default.createElement("span", { className: classnames(MENTION_USER_LABEL_CLASSNAME, className, isReverse && "reverse", color), contentEditable: false, "data-userid": userId, "data-sb-mention": true }, children);
}

// node_modules/@sendbird/uikit-react/chunks/bundle-R159x0xi.js
var GroupChannelListItemView = function(_a) {
  var channel = _a.channel, tabIndex = _a.tabIndex, isTyping = _a.isTyping, isSelected = _a.isSelected, channelName = _a.channelName, _b = _a.isMessageStatusEnabled, isMessageStatusEnabled = _b === void 0 ? true : _b, _c = _a.onClick, onClick = _c === void 0 ? noop : _c, _d = _a.onLeaveChannel, onLeaveChannel = _d === void 0 ? function() {
    return Promise.resolve();
  } : _d, renderChannelAction = _a.renderChannelAction;
  var config = useSendbirdStateContext().config;
  var theme = config.theme, userId = config.userId;
  var _e = useLocalization(), dateLocale = _e.dateLocale, stringSet = _e.stringSet;
  var isMobile = useMediaQueryContext().isMobile;
  var isMentionEnabled = config.groupChannel.enableMention;
  var _f = (0, import_react12.useState)(false), showMobileLeave = _f[0], setShowMobileLeave = _f[1];
  var onLongPress = useLongPress({
    onLongPress: function() {
      if (isMobile) {
        setShowMobileLeave(true);
      }
    },
    onClick
  }, {
    delay: 1e3
  });
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    import_react12.default.createElement(
      "div",
      __assign({ className: [
        "sendbird-channel-preview",
        isSelected ? "sendbird-channel-preview--active" : ""
      ].join(" "), role: "link", tabIndex }, isMobile ? __assign({}, onLongPress) : { onClick }),
      import_react12.default.createElement(
        "div",
        { className: "sendbird-channel-preview__avatar" },
        import_react12.default.createElement(ChannelAvatar, { channel, userId, theme })
      ),
      import_react12.default.createElement(
        "div",
        { className: "sendbird-channel-preview__content" },
        import_react12.default.createElement(
          "div",
          { className: "sendbird-channel-preview__content__upper" },
          import_react12.default.createElement(
            "div",
            { className: "sendbird-channel-preview__content__upper__header" },
            (channel.isBroadcast || false) && import_react12.default.createElement(
              "div",
              { className: "sendbird-channel-preview__content__upper__header__broadcast-icon" },
              import_react12.default.createElement(Icon, { type: IconTypes.BROADCAST, fillColor: IconColors.SECONDARY, height: "16px", width: "16px" })
            ),
            import_react12.default.createElement(Label, { className: "sendbird-channel-preview__content__upper__header__channel-name", testID: "sendbird-channel-preview__content__upper__header__channel-name", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, channelName),
            import_react12.default.createElement(Label, { className: "sendbird-channel-preview__content__upper__header__total-members", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, getTotalMembers(channel)),
            channel.isFrozen && import_react12.default.createElement(
              "div",
              { title: "Frozen", className: "sendbird-channel-preview__content__upper__header__frozen-icon" },
              import_react12.default.createElement(Icon, { type: IconTypes.FREEZE, fillColor: IconColors.PRIMARY, height: 12, width: 12 })
            )
          ),
          !channel.isEphemeral && isMessageStatusEnabled && import_react12.default.createElement(MessageStatus, { className: "sendbird-channel-preview__content__upper__last-message-at", channel, message: channel.lastMessage, isDateSeparatorConsidered: false }),
          !channel.isEphemeral && !isMessageStatusEnabled && import_react12.default.createElement(Label, { className: "sendbird-channel-preview__content__upper__last-message-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, getLastMessageCreatedAt({
            channel,
            locale: dateLocale,
            stringSet
          }))
        ),
        import_react12.default.createElement(
          "div",
          { className: "sendbird-channel-preview__content__lower" },
          import_react12.default.createElement(
            Label,
            { className: "sendbird-channel-preview__content__lower__last-message", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 },
            isTyping && import_react12.default.createElement(TypingIndicatorText, { members: channel.getTypingUsers() }),
            !isTyping && !isVoiceMessage(channel.lastMessage) && getLastMessage(channel, stringSet),
            !isTyping && isVoiceMessage(channel.lastMessage) && stringSet.VOICE_MESSAGE
          ),
          /**
           * Do not show unread count for focused channel. This is because of the limitation where
           * isScrollBottom and hasNext states needs to be added globally but they are from channel context
           * so channel list cannot see them with the current architecture.
           */
          !isSelected && !channel.isEphemeral && import_react12.default.createElement(
            "div",
            { className: "sendbird-channel-preview__content__lower__unread-message-count" },
            isMentionEnabled && channel.unreadMentionCount > 0 ? import_react12.default.createElement(MentionUserLabel, { className: "sendbird-channel-preview__content__lower__unread-message-count__mention", color: "purple" }, "@") : null,
            getChannelUnreadMessageCount(channel) ? (
              // return number
              import_react12.default.createElement(Badge, { count: getChannelUnreadMessageCount(channel) })
            ) : null
          )
        )
      ),
      !isMobile && import_react12.default.createElement("div", { className: "sendbird-channel-preview__action" }, renderChannelAction({ channel }))
    ),
    showMobileLeave && isMobile && import_react12.default.createElement(
      Modal,
      { className: "sendbird-channel-preview__leave--mobile", titleText: channelName, hideFooter: true, isCloseOnClickOutside: true, onCancel: function() {
        return setShowMobileLeave(false);
      } },
      import_react12.default.createElement(
        TextButton,
        { onClick: function() {
          onLeaveChannel();
          setShowMobileLeave(false);
        }, className: "sendbird-channel-preview__leave-label--mobile" },
        import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE)
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/GroupChannelList/components/GroupChannelListItem.js
var import_react_dom4 = __toESM(require_react_dom(), 1);
var GroupChannelListItem = function(_a) {
  var _b, _c, _d;
  var channel = _a.channel, isSelected = _a.isSelected, isTyping = _a.isTyping, renderChannelAction = _a.renderChannelAction, onLeaveChannel = _a.onLeaveChannel, onClick = _a.onClick, tabIndex = _a.tabIndex;
  var config = useSendbirdStateContext().config;
  var stringSet = useLocalization().stringSet;
  var _e = useGroupChannelListContext(), _f = _e.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _f === void 0 ? false : _f, _g = _e.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _g === void 0 ? false : _g;
  var userId = config.userId;
  var isMessageStatusEnabled = isMessageReceiptStatusEnabled && !((_b = channel.lastMessage) === null || _b === void 0 ? void 0 : _b.isAdminMessage()) && ((_d = (_c = channel.lastMessage) === null || _c === void 0 ? void 0 : _c.sender) === null || _d === void 0 ? void 0 : _d.userId) === userId;
  return import_react13.default.createElement(GroupChannelListItemView, { channel, tabIndex, channelName: getChannelTitle(channel, userId, stringSet), isTyping: isTypingIndicatorEnabled && isTyping, isSelected, isMessageStatusEnabled, onClick, onLeaveChannel, renderChannelAction });
};

// node_modules/@sendbird/uikit-react/GroupChannelList/components/AddGroupChannel.js
var import_react20 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CcvIdULa.js
var import_react19 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/CreateChannel.js
var import_react18 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/CreateChannel/components/CreateChannelUI.js
var import_react17 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CM1oxZtw.js
var import_react14 = __toESM(require_react(), 1);
var CHANNEL_TYPE;
(function(CHANNEL_TYPE2) {
  CHANNEL_TYPE2["GROUP"] = "group";
  CHANNEL_TYPE2["SUPERGROUP"] = "supergroup";
  CHANNEL_TYPE2["BROADCAST"] = "broadcast";
})(CHANNEL_TYPE || (CHANNEL_TYPE = {}));
var CreateChannelContext = import_react14.default.createContext(null);
var CreateChannelProvider = function(props) {
  var _a;
  var children = props.children, onCreateChannelClick = props.onCreateChannelClick, onBeforeCreateChannel = props.onBeforeCreateChannel, onChannelCreated = props.onChannelCreated, userListQuery = props.userListQuery, onCreateChannel = props.onCreateChannel, overrideInviteUser = props.overrideInviteUser;
  var store = useSendbirdStateContext();
  var _userListQuery = userListQuery !== null && userListQuery !== void 0 ? userListQuery : (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.userListQuery;
  var _b = (0, import_react14.useState)(0), step = _b[0], setStep = _b[1];
  var _c = (0, import_react14.useState)(CHANNEL_TYPE.GROUP), type = _c[0], setType = _c[1];
  return import_react14.default.createElement(CreateChannelContext.Provider, { value: {
    sdk: store.stores.sdkStore.sdk,
    createChannel: getCreateGroupChannel(store),
    onCreateChannelClick,
    onBeforeCreateChannel,
    onChannelCreated,
    userListQuery: _userListQuery,
    step,
    setStep,
    type,
    setType,
    onCreateChannel,
    overrideInviteUser
  } }, children);
};
var useCreateChannelContext = function() {
  var context = import_react14.default.useContext(CreateChannelContext);
  if (!context)
    throw new Error("CreateChannelContext not found. Use within the CreateChannel module.");
  return context;
};

// node_modules/@sendbird/uikit-react/CreateChannel/components/InviteUsers.js
var import_react15 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var filterUser = function(idsToFilter) {
  return function(currentId) {
    return idsToFilter === null || idsToFilter === void 0 ? void 0 : idsToFilter.includes(currentId);
  };
};
var setChannelType = function(params, type) {
  if (type === "broadcast") {
    params.isBroadcast = true;
  }
  if (type === "supergroup") {
    params.isSuper = true;
  }
  return params;
};
var createDefaultUserListQuery = function(_a) {
  var sdk = _a.sdk, userFilledApplicationUserListQuery = _a.userFilledApplicationUserListQuery;
  var params = sdk.createApplicationUserListQuery();
  if (userFilledApplicationUserListQuery) {
    Object.keys(userFilledApplicationUserListQuery).forEach(function(key) {
      params[key] = userFilledApplicationUserListQuery[key];
    });
  }
  return params;
};
var BUFFER = 50;
var InviteUsers = function(_a) {
  var _b, _c, _d;
  var onCancel = _a.onCancel, userListQuery = _a.userListQuery;
  var _e = useCreateChannelContext(), onCreateChannelClick = _e.onCreateChannelClick, onBeforeCreateChannel = _e.onBeforeCreateChannel, onChannelCreated = _e.onChannelCreated, createChannel = _e.createChannel, onCreateChannel = _e.onCreateChannel, overrideInviteUser = _e.overrideInviteUser, type = _e.type;
  var globalStore = useSendbirdStateContext();
  var userId = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _b === void 0 ? void 0 : _b.userId;
  var sdk = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;
  var idsToFilter = [userId];
  var _f = (0, import_react15.useState)([]), users = _f[0], setUsers = _f[1];
  var _g = (0, import_react15.useState)({}), selectedUsers = _g[0], setSelectedUsers = _g[1];
  var stringSet = (0, import_react15.useContext)(LocalizationContext).stringSet;
  var _h = (0, import_react15.useState)(null), usersDataSource = _h[0], setUsersDataSource = _h[1];
  var selectedCount = Object.keys(selectedUsers).length;
  var titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;
  var submitText = stringSet.BUTTON__CREATE;
  var isMobile = useMediaQueryContext().isMobile;
  var _j = (0, import_react15.useState)(window.innerHeight), scrollableAreaHeight = _j[0], setScrollableAreaHeight = _j[1];
  (0, import_react15.useEffect)(function() {
    var applicationUserListQuery = userListQuery ? userListQuery() : createDefaultUserListQuery({ sdk });
    setUsersDataSource(applicationUserListQuery);
    if (!(applicationUserListQuery === null || applicationUserListQuery === void 0 ? void 0 : applicationUserListQuery.isLoading)) {
      applicationUserListQuery.next().then(function(it) {
        setUsers(it);
      });
    }
  }, []);
  (0, import_react15.useEffect)(function() {
    var scrollableAreaHeight2 = function() {
      setScrollableAreaHeight(window.innerHeight);
    };
    window.addEventListener("resize", scrollableAreaHeight2);
    return function() {
      window.removeEventListener("resize", scrollableAreaHeight2);
    };
  }, []);
  return import_react15.default.createElement(
    Modal,
    {
      isFullScreenOnMobile: true,
      titleText,
      submitText,
      type: ButtonTypes.PRIMARY,
      // Disable the create button if no users are selected,
      // but if there's only the logged-in user in the user list,
      // then the create button should be enabled
      disabled: users.length > 1 && Object.keys(selectedUsers).length === 0,
      onCancel,
      onSubmit: function() {
        var selectedUserList = Object.keys(selectedUsers).length > 0 ? Object.keys(selectedUsers) : [userId];
        var _onChannelCreated = onChannelCreated !== null && onChannelCreated !== void 0 ? onChannelCreated : onCreateChannel;
        var _onCreateChannelClick = onCreateChannelClick !== null && onCreateChannelClick !== void 0 ? onCreateChannelClick : overrideInviteUser;
        if (typeof _onCreateChannelClick === "function") {
          _onCreateChannelClick({
            users: selectedUserList,
            onClose: onCancel !== null && onCancel !== void 0 ? onCancel : noop,
            channelType: type
          });
          return;
        }
        if (onBeforeCreateChannel) {
          var params = onBeforeCreateChannel(selectedUserList);
          setChannelType(params, type);
          createChannel(params).then(function(channel) {
            return _onChannelCreated === null || _onChannelCreated === void 0 ? void 0 : _onChannelCreated(channel);
          });
        } else {
          var params = {};
          params.invitedUserIds = selectedUserList;
          params.isDistinct = false;
          if (userId) {
            params.operatorUserIds = [userId];
          }
          setChannelType(params, type);
          createChannel(params).then(function(channel) {
            return _onChannelCreated === null || _onChannelCreated === void 0 ? void 0 : _onChannelCreated(channel);
          });
        }
        onCancel === null || onCancel === void 0 ? void 0 : onCancel();
      }
    },
    import_react15.default.createElement(
      "div",
      null,
      import_react15.default.createElement(Label, { color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, "".concat(selectedCount, " ").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),
      import_react15.default.createElement("div", { className: "sendbird-create-channel--scroll", style: isMobile ? { height: "calc(".concat(scrollableAreaHeight, "px - 200px)") } : {}, onScroll: function(e) {
        if (!usersDataSource)
          return;
        var eventTarget = e.target;
        var hasNext = usersDataSource.hasNext, isLoading = usersDataSource.isLoading;
        var fetchMore = eventTarget.clientHeight + eventTarget.scrollTop + BUFFER > eventTarget.scrollHeight;
        if (hasNext && fetchMore && !isLoading) {
          usersDataSource.next().then(function(usersBatch) {
            setUsers(__spreadArray(__spreadArray([], users, true), usersBatch, true));
          });
        }
      } }, users.map(function(user) {
        return !filterUser(idsToFilter)(user.userId) && import_react15.default.createElement(UserListItem, { key: user.userId, user, checkBox: true, checked: selectedUsers[user.userId], onChange: function(event) {
          var _a2;
          var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a2 = {}, _a2[event.target.id] = event.target.checked, _a2));
          if (!event.target.checked) {
            delete modifiedSelectedUsers[event.target.id];
          }
          setSelectedUsers(modifiedSelectedUsers);
        } });
      }))
    )
  );
};

// node_modules/@sendbird/uikit-react/CreateChannel/components/SelectChannelType.js
var import_react16 = __toESM(require_react(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
var isBroadcastChannelEnabled = function(sdk) {
  var _a;
  var ALLOW_BROADCAST_CHANNEL = "allow_broadcast_channel";
  var applicationAttributes = (_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes;
  if (Array.isArray(applicationAttributes)) {
    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);
  }
  return false;
};
var isSuperGroupChannelEnabled = function(sdk) {
  var _a;
  var ALLOW_SUPER_GROUP_CHANNEL = "allow_super_group_channel";
  var applicationAttributes = (_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes;
  if (Array.isArray(applicationAttributes)) {
    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);
  }
  return false;
};
var SelectChannelType = function(props) {
  var onCancel = props.onCancel;
  var store = useSendbirdStateContext();
  var sdk = getSdk(store);
  var createChannelProps = useCreateChannelContext();
  var setStep = createChannelProps.setStep, setType = createChannelProps.setType;
  var stringSet = (0, import_react16.useContext)(LocalizationContext).stringSet;
  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);
  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);
  return import_react16.default.createElement(
    Modal,
    { titleText: stringSet === null || stringSet === void 0 ? void 0 : stringSet.MODAL__CREATE_CHANNEL__TITLE, hideFooter: true, onCancel: function() {
      onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    }, className: "sendbird-add-channel__modal" },
    import_react16.default.createElement(
      "div",
      { className: "sendbird-add-channel__rectangle-wrap" },
      import_react16.default.createElement(
        "div",
        { className: "sendbird-add-channel__rectangle", onClick: function() {
          setType(CHANNEL_TYPE.GROUP);
          setStep(1);
        }, role: "button", tabIndex: 0, onKeyDown: function() {
          setType(CHANNEL_TYPE.GROUP);
          setStep(1);
        } },
        import_react16.default.createElement(Icon, { className: "sendbird-add-channel__rectangle__chat-icon", type: IconTypes.CHAT, fillColor: IconColors.PRIMARY, width: "28px", height: "28px" }),
        import_react16.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MODAL__CREATE_CHANNEL__GROUP)
      ),
      isSupergroupAvailable && import_react16.default.createElement(
        "div",
        { className: "sendbird-add-channel__rectangle", onClick: function() {
          setType(CHANNEL_TYPE.SUPERGROUP);
          setStep(1);
        }, role: "button", tabIndex: 0, onKeyDown: function() {
          setType(CHANNEL_TYPE.SUPERGROUP);
          setStep(1);
        } },
        import_react16.default.createElement(Icon, { className: "sendbird-add-channel__rectangle__supergroup-icon", type: IconTypes.SUPERGROUP, fillColor: IconColors.PRIMARY, width: "28px", height: "28px" }),
        import_react16.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MODAL__CREATE_CHANNEL__SUPER)
      ),
      isBroadcastAvailable && import_react16.default.createElement(
        "div",
        { className: "sendbird-add-channel__rectangle", onClick: function() {
          setType(CHANNEL_TYPE.BROADCAST);
          setStep(1);
        }, role: "button", tabIndex: 0, onKeyDown: function() {
          setType(CHANNEL_TYPE.BROADCAST);
          setStep(1);
        } },
        import_react16.default.createElement(Icon, { className: "sendbird-add-channel__rectangle__broadcast-icon", type: IconTypes.BROADCAST, fillColor: IconColors.PRIMARY, width: "28px", height: "28px" }),
        import_react16.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MODAL__CREATE_CHANNEL__BROADCAST)
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/CreateChannel/components/CreateChannelUI.js
var import_react_dom7 = __toESM(require_react_dom(), 1);
var CreateChannel = function(props) {
  var onCancel = props.onCancel, renderStepOne = props.renderStepOne;
  var _a = useCreateChannelContext(), step = _a.step, setStep = _a.setStep, userListQuery = _a.userListQuery;
  return import_react17.default.createElement(
    import_react17.default.Fragment,
    null,
    step === 0 && ((renderStepOne === null || renderStepOne === void 0 ? void 0 : renderStepOne()) || import_react17.default.createElement(SelectChannelType, { onCancel })),
    step === 1 && import_react17.default.createElement(InviteUsers, { userListQuery, onCancel: function() {
      setStep(0);
      onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    } })
  );
};

// node_modules/@sendbird/uikit-react/CreateChannel.js
var import_react_dom8 = __toESM(require_react_dom(), 1);
var CreateChannel2 = function(props) {
  return import_react18.default.createElement(
    CreateChannelProvider,
    __assign({}, props),
    import_react18.default.createElement(CreateChannel, __assign({}, props))
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-CcvIdULa.js
var AddGroupChannelView = function(_a) {
  var createChannelVisible = _a.createChannelVisible, onChangeCreateChannelVisible = _a.onChangeCreateChannelVisible, onBeforeCreateChannel = _a.onBeforeCreateChannel, onCreateChannelClick = _a.onCreateChannelClick, onChannelCreated = _a.onChannelCreated;
  var config = useSendbirdStateContext().config;
  return import_react19.default.createElement(
    import_react19.default.Fragment,
    null,
    import_react19.default.createElement(
      IconButton,
      { height: "32px", width: "32px", disabled: !config.isOnline, onClick: function() {
        return onChangeCreateChannelVisible(true);
      } },
      import_react19.default.createElement(Icon, { type: IconTypes.CREATE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
    ),
    createChannelVisible && import_react19.default.createElement(CreateChannel2, { onCancel: function() {
      return onChangeCreateChannelVisible(false);
    }, onChannelCreated: function(channel) {
      onChannelCreated === null || onChannelCreated === void 0 ? void 0 : onChannelCreated(channel);
      onChangeCreateChannelVisible(false);
    }, onBeforeCreateChannel, onCreateChannelClick })
  );
};

// node_modules/@sendbird/uikit-react/GroupChannelList/components/AddGroupChannel.js
var import_react_dom9 = __toESM(require_react_dom(), 1);
var AddGroupChannel = function() {
  var _a = (0, import_react20.useState)(false), createChannelVisible = _a[0], setCreateChannelVisible = _a[1];
  var _b = useGroupChannelListContext(), onChannelCreated = _b.onChannelCreated, onBeforeCreateChannel = _b.onBeforeCreateChannel, onCreateChannelClick = _b.onCreateChannelClick;
  return import_react20.default.createElement(AddGroupChannelView, { createChannelVisible, onChangeCreateChannelVisible: setCreateChannelVisible, onCreateChannelClick, onBeforeCreateChannel, onChannelCreated });
};

// node_modules/@sendbird/uikit-react/GroupChannelList/components/GroupChannelListUI.js
var import_react_dom10 = __toESM(require_react_dom(), 1);
var GroupChannelListUI = function(props) {
  var renderHeader = props.renderHeader, renderChannelPreview = props.renderChannelPreview, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;
  var _a = useGroupChannelListContext(), onChannelSelect = _a.onChannelSelect, onThemeChange = _a.onThemeChange, allowProfileEdit = _a.allowProfileEdit, typingChannelUrls = _a.typingChannelUrls, groupChannels = _a.groupChannels, initialized = _a.initialized, selectedChannelUrl = _a.selectedChannelUrl, loadMore = _a.loadMore, onUserProfileUpdated = _a.onUserProfileUpdated;
  var _b = useSendbirdStateContext(), stores = _b.stores, config = _b.config;
  var logger = config.logger, isOnline = config.isOnline;
  var sdk = stores.sdkStore.sdk;
  var renderListItem = function(renderProps) {
    var channel = renderProps.item, index = renderProps.index;
    var itemProps = {
      channel,
      tabIndex: index,
      isSelected: channel.url === selectedChannelUrl,
      isTyping: typingChannelUrls.includes(channel.url),
      renderChannelAction: function(props2) {
        return import_react21.default.createElement(GroupChannelPreviewAction, __assign({}, props2));
      },
      onClick: function() {
        if (isOnline || (sdk === null || sdk === void 0 ? void 0 : sdk.isCacheEnabled)) {
          logger.info("ChannelList: Clicked on channel:", channel);
          onChannelSelect(channel);
        } else {
          logger.warning("ChannelList: Inactivated clicking channel item during offline.");
        }
      },
      onLeaveChannel: function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                logger.info("ChannelList: Leaving channel", channel);
                return [4, channel.leave()];
              case 1:
                _a2.sent();
                logger.info("ChannelList: Leaving channel success");
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
    };
    if (renderChannelPreview) {
      return import_react21.default.createElement("div", { key: channel.url, onClick: itemProps.onClick }, renderChannelPreview(itemProps));
    }
    return import_react21.default.createElement(GroupChannelListItem, __assign({ key: channel.url }, itemProps));
  };
  return import_react21.default.createElement(GroupChannelListUIView, { renderHeader, renderChannel: renderListItem, renderPlaceHolderError, renderPlaceHolderLoading, renderPlaceHolderEmptyList, onChangeTheme: onThemeChange !== null && onThemeChange !== void 0 ? onThemeChange : noop, allowProfileEdit, onUserProfileUpdated: onUserProfileUpdated !== null && onUserProfileUpdated !== void 0 ? onUserProfileUpdated : noop, channels: groupChannels, onLoadMore: loadMore, initialized, renderAddChannel: function() {
    return import_react21.default.createElement(AddGroupChannel, null);
  } });
};

// node_modules/@sendbird/uikit-react/GroupChannelList.js
var import_react_dom11 = __toESM(require_react_dom());
var GroupChannelList = function(props) {
  return import_react22.default.createElement(
    GroupChannelListProvider,
    __assign({}, props),
    import_react22.default.createElement(GroupChannelListUI, __assign({}, props))
  );
};

export {
  useOnlineStatus,
  schedulerFactory,
  useUnmount,
  useMarkAsDeliveredScheduler,
  USER_ACTIONS,
  useThrottleCallback,
  useOnScrollPositionChangeDetector,
  GroupChannelListUIView,
  GroupChannelPreviewAction,
  Badge,
  GroupChannelListItemView,
  AddGroupChannelView,
  GroupChannelList
};
//# sourceMappingURL=chunk-APF5U6TK.js.map

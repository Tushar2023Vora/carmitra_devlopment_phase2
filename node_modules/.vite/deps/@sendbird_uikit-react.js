import {
  DateSeparator,
  EmojiReactions,
  FileMessageItemBody,
  FileViewer,
  FileViewerView,
  FrozenNotification,
  GroupChannel,
  GroupChannelHeaderView,
  GroupChannelUIView,
  LinkLabel,
  MessageEmojiMenu,
  MessageInput,
  MessageInputKeys,
  MessageInputWrapperView,
  MessageMenu,
  MessageProvider,
  MessageView,
  MobileMenu,
  MultipleFilesMessageItemBody,
  OGMessageItemBody,
  RemoveMessageModalView,
  SuggestedMentionListView,
  TextFragment,
  TextMessageItemBody,
  ThreadMessageKind,
  ThreadReplySelectType,
  ThumbnailMessageItemBody,
  TypingIndicatorBubble,
  UnknownMessageItemBody,
  UnreadCount,
  VoiceMessageInputWrapper,
  VoiceMessageItemBody,
  compareMessagesForGrouping,
  compressImages,
  getCaseResolvedReplyType,
  getCaseResolvedThreadReplySelectType,
  getChannelTitle as getChannelTitle2,
  getIsReactionEnabled,
  getMessageFirstFileName,
  getMessageFirstFileUrl,
  getMessagePartsInfo,
  getModalDeleteMessageTitle,
  pubSubFactory,
  tokenizeMessage,
  useDirtyGetMentions,
  useElementObserver,
  useFileInfoListWithUploaded,
  useHTMLTextDirection,
  useMessageLayoutDirection,
  useThreadMessageKindKeySelector,
  useToggleReactionCallback
} from "./chunk-YJDTWDQW.js";
import {
  AddGroupChannelView,
  Badge,
  GroupChannelList,
  GroupChannelListItemView,
  GroupChannelListUIView,
  GroupChannelPreviewAction,
  USER_ACTIONS,
  schedulerFactory,
  useMarkAsDeliveredScheduler,
  useOnScrollPositionChangeDetector,
  useOnlineStatus,
  useThrottleCallback,
  useUnmount
} from "./chunk-APF5U6TK.js";
import {
  $e,
  ALL,
  APP_LAYOUT_ROOT,
  Ae,
  Avatar$1,
  Button,
  ButtonSizes,
  ButtonTypes,
  ChannelAvatar,
  Colors,
  ContextMenu,
  E,
  EMOJI_MENU_ROOT_ID,
  EmojiManager,
  EmojiReactionListRoot,
  GlobalModalProvider,
  Header$1,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  ImageRenderer,
  In,
  Input,
  InputLabel,
  Jt,
  K,
  Label,
  LabelColors,
  LabelTypography,
  Loader,
  LocalizationContext,
  LocalizationProvider,
  MENU_OBSERVING_CLASS_NAME,
  MENU_ROOT_ID,
  MediaQueryProvider,
  MenuItem,
  MenuItem$1,
  MenuItems,
  MenuRoot,
  MessageStatus,
  Modal,
  ModalFooter,
  ModalRoot,
  MuteMenuItem,
  MutedAvatarOverlay,
  OperatorMenuItem,
  PUBSUB_TOPICS,
  PlaceHolder,
  PlaceHolderTypes,
  PublishingModuleType,
  S,
  SendbirdSdkContext,
  TextButton,
  TypingIndicatorType,
  UIKitConfigProvider,
  UserListItem,
  UserProfile,
  UserProfileContext,
  UserProfileProvider,
  VoicePlayerProvider,
  VoiceRecorderProvider,
  Ye,
  Zt,
  __assign,
  __awaiter,
  __generator,
  __rest,
  __spreadArray,
  classnames,
  cssVars,
  deleteNullish,
  filterChannelListParams,
  filterMessageListParams,
  format,
  getAllEmojisMapFromEmojiContainer,
  getChannelTitle,
  getChannelsWithUpsertedChannel,
  getClassName,
  getNicknamesMapFromMembers,
  getObservingId,
  getOpenChannelAvatar,
  getSenderName,
  getStringSet,
  getSuggestedReplies,
  getUIKitFileType,
  getUIKitMessageType,
  getUIKitMessageTypes,
  isAboutSame,
  isChannelJustCreated,
  isDisabledBecauseFrozen,
  isDisabledBecauseMuted,
  isEditedMessage,
  isFileMessage,
  isGifMessage,
  isImage,
  isMultipleFilesMessage,
  isOGMessage,
  isOperator,
  isSameDay,
  isSendableMessage,
  isSentMessage,
  isTextMessage,
  isTextuallyNull,
  isThisYear,
  isThumbnailMessage,
  isToday,
  isUserMessage,
  isVideo,
  isVideoMessage,
  isVoiceMessage,
  isYesterday,
  je,
  ke,
  mapColorKeys,
  mergeAndSortMessages,
  noop,
  openURL,
  passUnsuccessfullMessages,
  pubSubTopics,
  scrollIntoLast,
  scrollToRenderedMessage,
  sendbirdSelectors,
  shouldPubSubPublishToChannel,
  shouldPubSubPublishToThread,
  truncateString,
  useGlobalModalContext,
  useLocalization,
  useLongPress,
  useMediaQueryContext,
  usePreservedCallback,
  useSendbirdStateContext,
  useUIKitConfig,
  useVoicePlayerContext,
  uuidv4,
  withSendbirdContext,
  xe2 as xe
} from "./chunk-6LPVY4UA.js";
import {
  B,
  Be,
  H,
  Qe,
  V,
  W,
  We,
  q,
  u,
  v,
  z
} from "./chunk-OQ72IX5E.js";
import {
  CACHED_MESSAGE_TEMPLATES_KEY,
  CACHED_MESSAGE_TEMPLATES_TOKEN_KEY,
  DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT,
  DEFAULT_UPLOAD_SIZE_LIMIT,
  DELIVERY_RECEIPT,
  META_ARRAY_MESSAGE_TYPE_KEY,
  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,
  META_ARRAY_VOICE_DURATION_KEY,
  ONE_MiB,
  SCROLL_BOTTOM_DELAY_FOR_FETCH,
  SCROLL_BOTTOM_DELAY_FOR_SEND,
  SCROLL_BUFFER,
  VOICE_MESSAGE_FILE_NAME,
  VOICE_MESSAGE_MIME_TYPE,
  VOICE_RECORDER_DEFAULT_MAX,
  VOICE_RECORDER_DEFAULT_MIN
} from "./chunk-ZRNKNDBU.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/@sendbird/uikit-react/SendbirdProvider.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var DEFAULT_COLOR_SET = {
  "--sendbird-dark-primary-500": "#4d2aa6",
  "--sendbird-dark-primary-400": "#6440C4",
  "--sendbird-dark-primary-300": "#7B53EF",
  "--sendbird-dark-primary-200": "#9E8CF5",
  "--sendbird-dark-primary-100": "#E2DFFF",
  "--sendbird-dark-secondary-500": "#007A7A",
  "--sendbird-dark-secondary-400": "#189A8D",
  "--sendbird-dark-secondary-300": "#2EBA9F",
  "--sendbird-dark-secondary-200": "#6FD6BE",
  "--sendbird-dark-secondary-100": "#AEF2DC",
  "--sendbird-dark-information-100": "#b2d9ff",
  "--sendbird-dark-error-500": "#A30E2D",
  "--sendbird-dark-error-400": "#C11F41",
  "--sendbird-dark-error-300": "#E53157",
  "--sendbird-dark-error-200": "#FF6183",
  "--sendbird-dark-error-100": "#FFABBD",
  "--sendbird-dark-background-700": "#000000",
  "--sendbird-dark-background-600": "#161616",
  "--sendbird-dark-background-500": "#2C2C2C",
  "--sendbird-dark-background-400": "#393939",
  "--sendbird-dark-background-300": "#A8A8A8",
  "--sendbird-dark-background-200": "#D9D9D9",
  "--sendbird-dark-background-100": "#F0F0F0",
  "--sendbird-dark-background-50": "#FFFFFF",
  "--sendbird-dark-overlay": "rgba(0, 0, 0, 0.32)",
  "--sendbird-dark-onlight-01": "rgba(0, 0, 0, 0.88)",
  "--sendbird-dark-onlight-02": "rgba(0, 0, 0, 0.50)",
  "--sendbird-dark-onlight-03": "rgba(0, 0, 0, 0.38)",
  "--sendbird-dark-onlight-04": "rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-ondark-01": "rgba(255, 255, 255, 0.88)",
  "--sendbird-dark-ondark-02": "rgba(255, 255, 255, 0.50)",
  "--sendbird-dark-ondark-03": "rgba(255, 255, 255, 0.38)",
  "--sendbird-dark-ondark-04": "rgba(255, 255, 255, 0.12)",
  "--sendbird-dark-shadow-01": "0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-02": "0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-03": "0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-04": "0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-message-input": "0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)",
  "--sendbird-light-primary-500": "#4d2aa6",
  "--sendbird-light-primary-400": "#6440C4",
  "--sendbird-light-primary-300": "#7B53EF",
  "--sendbird-light-primary-200": "#9E8CF5",
  "--sendbird-light-primary-100": "#E2DFFF",
  "--sendbird-light-secondary-500": "#007A7A",
  "--sendbird-light-secondary-400": "#189A8D",
  "--sendbird-light-secondary-300": "#2EBA9F",
  "--sendbird-light-secondary-200": "#6FD6BE",
  "--sendbird-light-secondary-100": "#AEF2DC",
  "--sendbird-light-information-100": "#b2d9ff",
  "--sendbird-light-error-500": "#A30E2D",
  "--sendbird-light-error-400": "#C11F41",
  "--sendbird-light-error-300": "#E53157",
  "--sendbird-light-error-200": "#FF6183",
  "--sendbird-light-error-100": "#FFABBD",
  "--sendbird-light-background-700": "#000000",
  "--sendbird-light-background-600": "#161616",
  "--sendbird-light-background-500": "#2C2C2C",
  "--sendbird-light-background-400": "#393939",
  "--sendbird-light-background-300": "#A8A8A8",
  "--sendbird-light-background-200": "#D9D9D9",
  "--sendbird-light-background-100": "#F0F0F0",
  "--sendbird-light-background-50": " #FFFFFF",
  "--sendbird-light-overlay": "rgba(0, 0, 0, 0.32)",
  "--sendbird-light-onlight-01": "rgba(0, 0, 0, 0.88)",
  "--sendbird-light-onlight-02": "rgba(0, 0, 0, 0.50)",
  "--sendbird-light-onlight-03": "rgba(0, 0, 0, 0.38)",
  "--sendbird-light-onlight-04": "rgba(0, 0, 0, 0.12)",
  "--sendbird-light-ondark-01": "rgba(255, 255, 255, 0.88)",
  "--sendbird-light-ondark-02": "rgba(255, 255, 255, 0.50)",
  "--sendbird-light-ondark-03": "rgba(255, 255, 255, 0.38)",
  "--sendbird-light-ondark-04": "rgba(255, 255, 255, 0.12)",
  "--sendbird-light-shadow-01": "0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-02": "0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-03": "0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-04": "0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-message-input": "0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)"
};
var isEmpty = function(obj) {
  if (obj === null || obj === void 0) {
    return true;
  }
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      return false;
    }
  }
  return JSON.stringify(obj) === JSON.stringify({});
};
var useTheme = function(overrides) {
  (0, import_react.useLayoutEffect)(function() {
    if (!isEmpty(overrides)) {
      var variables = __assign(__assign({}, DEFAULT_COLOR_SET), mapColorKeys(overrides));
      cssVars({ variables });
    }
  }, [overrides]);
};
var SDK_ACTIONS = {
  INIT_SDK: "INIT_SDK",
  SET_SDK_LOADING: "SET_SDK_LOADING",
  RESET_SDK: "RESET_SDK",
  SDK_ERROR: "SDK_ERROR"
};
var initialState$2 = {
  initialized: false,
  loading: false,
  sdk: {},
  error: false
};
function reducer$2(state, action) {
  return K(action).with({ type: SDK_ACTIONS.SET_SDK_LOADING }, function(_a) {
    var payload = _a.payload;
    return __assign(__assign({}, state), { initialized: false, loading: payload });
  }).with({ type: SDK_ACTIONS.SDK_ERROR }, function() {
    return __assign(__assign({}, state), { initialized: false, loading: false, error: true });
  }).with({ type: SDK_ACTIONS.INIT_SDK }, function(_a) {
    var payload = _a.payload;
    return {
      sdk: payload,
      initialized: true,
      loading: false,
      error: false
    };
  }).with({ type: SDK_ACTIONS.RESET_SDK }, function() {
    return initialState$2;
  }).otherwise(function() {
    return state;
  });
}
var initialState$1 = {
  initialized: false,
  loading: false,
  user: {}
};
function reducer$1(state, action) {
  return K(action).with({ type: USER_ACTIONS.INIT_USER }, function(_a) {
    var payload = _a.payload;
    return {
      initialized: true,
      loading: false,
      user: payload
    };
  }).with({ type: USER_ACTIONS.RESET_USER }, function() {
    return initialState$1;
  }).with({ type: USER_ACTIONS.UPDATE_USER_INFO }, function(_a) {
    var payload = _a.payload;
    return __assign(__assign({}, state), { user: payload });
  }).otherwise(function() {
    return state;
  });
}
var APP_INFO_ACTIONS = {
  INITIALIZE_MESSAGE_TEMPLATES_INFO: "INITIALIZE_MESSAGE_TEMPLATES_INFO",
  UPSERT_MESSAGE_TEMPLATES: "UPSERT_MESSAGE_TEMPLATES",
  UPSERT_WAITING_TEMPLATE_KEYS: "UPSERT_WAITING_TEMPLATE_KEYS",
  MARK_ERROR_WAITING_TEMPLATE_KEYS: "MARK_ERROR_WAITING_TEMPLATE_KEYS"
};
function reducer(state, action) {
  return K(action).with({ type: APP_INFO_ACTIONS.INITIALIZE_MESSAGE_TEMPLATES_INFO }, function(_a) {
    var payload = _a.payload;
    return {
      messageTemplatesInfo: payload,
      waitingTemplateKeysMap: {}
    };
  }).with({ type: APP_INFO_ACTIONS.UPSERT_MESSAGE_TEMPLATES }, function(_a) {
    var payload = _a.payload;
    var templatesInfo = state.messageTemplatesInfo;
    if (!templatesInfo)
      return state;
    var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);
    payload.forEach(function(templatesMapData) {
      var key = templatesMapData.key, template = templatesMapData.template;
      templatesInfo.templatesMap[key] = template;
      delete waitingTemplateKeysMap[key];
    });
    return __assign(__assign({}, state), { waitingTemplateKeysMap, messageTemplatesInfo: templatesInfo });
  }).with({ type: APP_INFO_ACTIONS.UPSERT_WAITING_TEMPLATE_KEYS }, function(_a) {
    var payload = _a.payload;
    var keys = payload.keys, requestedAt = payload.requestedAt;
    var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);
    keys.forEach(function(key) {
      var _a2, _b;
      waitingTemplateKeysMap[key] = {
        erroredMessageIds: (_b = (_a2 = waitingTemplateKeysMap[key]) === null || _a2 === void 0 ? void 0 : _a2.erroredMessageIds) !== null && _b !== void 0 ? _b : [],
        requestedAt
      };
    });
    return __assign(__assign({}, state), { waitingTemplateKeysMap });
  }).with({ type: APP_INFO_ACTIONS.MARK_ERROR_WAITING_TEMPLATE_KEYS }, function(_a) {
    var payload = _a.payload;
    var keys = payload.keys, messageId = payload.messageId;
    var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);
    keys.forEach(function(key) {
      var waitingTemplateKeyData = waitingTemplateKeysMap[key];
      if (waitingTemplateKeyData && waitingTemplateKeyData.erroredMessageIds.indexOf(messageId) === -1) {
        waitingTemplateKeyData.erroredMessageIds.push(messageId);
      }
    });
    return __assign(__assign({}, state), { waitingTemplateKeysMap });
  }).otherwise(function() {
    return state;
  });
}
var initialState = {
  waitingTemplateKeysMap: {}
};
function disconnectSdk(_a) {
  return __awaiter(this, arguments, void 0, function(_b) {
    var sdkDispatcher = _b.sdkDispatcher, userDispatcher = _b.userDispatcher, sdk = _b.sdk;
    return __generator(this, function(_c) {
      return [2, new Promise(function(resolve) {
        sdkDispatcher({ type: SDK_ACTIONS.SET_SDK_LOADING, payload: true });
        if (sdk === null || sdk === void 0 ? void 0 : sdk.disconnect) {
          sdk.disconnect().then(function() {
            sdkDispatcher({ type: SDK_ACTIONS.RESET_SDK });
            userDispatcher({ type: USER_ACTIONS.RESET_USER });
          }).finally(function() {
            resolve(true);
          });
        } else {
          resolve(true);
        }
      })];
    });
  });
}
var APP_VERSION_STRING = "3.14.14";
var INIT_SDK = SDK_ACTIONS.INIT_SDK;
var SET_SDK_LOADING = SDK_ACTIONS.SET_SDK_LOADING;
var RESET_SDK = SDK_ACTIONS.RESET_SDK;
var SDK_ERROR = SDK_ACTIONS.SDK_ERROR;
var INIT_USER = USER_ACTIONS.INIT_USER;
var UPDATE_USER_INFO = USER_ACTIONS.UPDATE_USER_INFO;
var RESET_USER = USER_ACTIONS.RESET_USER;
function getMissingParamError(_a) {
  var userId = _a.userId, appId = _a.appId;
  return "SendbirdProvider | useConnect/setupConnection/Connection failed UserId: ".concat(userId, " or appId: ").concat(appId, " missing");
}
function getConnectSbError(error) {
  return "SendbirdProvider | useConnect/setupConnection/Connection failed. ".concat((error === null || error === void 0 ? void 0 : error.code) || "", " ").concat((error === null || error === void 0 ? void 0 : error.message) || "");
}
function setUpConnection(_a) {
  return __awaiter(this, arguments, void 0, function(_b) {
    var errorMessage;
    var _this = this;
    var _c, _d;
    var logger = _b.logger, sdkDispatcher = _b.sdkDispatcher, userDispatcher = _b.userDispatcher, initDashboardConfigs = _b.initDashboardConfigs, userId = _b.userId, appId = _b.appId, isNewApp = _b.isNewApp, customApiHost = _b.customApiHost, customWebSocketHost = _b.customWebSocketHost, configureSession = _b.configureSession, nickname = _b.nickname, profileUrl = _b.profileUrl, accessToken = _b.accessToken, isUserIdUsedForNickname = _b.isUserIdUsedForNickname, sdkInitParams = _b.sdkInitParams, customExtensionParams = _b.customExtensionParams, _e = _b.isMobile, isMobile = _e === void 0 ? false : _e, eventHandlers = _b.eventHandlers, initializeMessageTemplatesInfo = _b.initializeMessageTemplatesInfo;
    return __generator(this, function(_f) {
      (_c = logger.info) === null || _c === void 0 ? void 0 : _c.call(logger, "SendbirdProvider | useConnect/setupConnection/init", { userId, appId });
      sdkDispatcher({ type: SET_SDK_LOADING, payload: true });
      if (!userId || !appId) {
        errorMessage = getMissingParamError({ userId, appId });
        (_d = logger.error) === null || _d === void 0 ? void 0 : _d.call(logger, errorMessage);
        sdkDispatcher({ type: SDK_ERROR });
        return [2, Promise.reject(errorMessage)];
      }
      return [2, new Promise(function(resolve, reject) {
        var _a2;
        (_a2 = logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "SendbirdProvider | useConnect/setupConnection/connect connecting using ".concat(accessToken !== null && accessToken !== void 0 ? accessToken : userId));
        var sdk = initSDK({ appId, customApiHost, customWebSocketHost, isNewApp, sdkInitParams });
        var sessionHandler = typeof configureSession === "function" ? configureSession(sdk) : void 0;
        setupSDK(sdk, { logger, sessionHandler, customExtensionParams, isMobile });
        sdk.connect(userId, accessToken).then(function(user) {
          return onConnected(user);
        }).catch(function(error) {
          return __awaiter(_this, void 0, void 0, function() {
            var sessionToken, user, error_1;
            var _a3;
            return __generator(this, function(_b2) {
              switch (_b2.label) {
                case 0:
                  if (!(shouldRetryWithValidSessionToken(error) && sessionHandler)) return [3, 6];
                  _b2.label = 1;
                case 1:
                  _b2.trys.push([1, 5, , 6]);
                  return [4, new Promise(sessionHandler.onSessionTokenRequired)];
                case 2:
                  sessionToken = _b2.sent();
                  if (!sessionToken) return [3, 4];
                  (_a3 = logger.info) === null || _a3 === void 0 ? void 0 : _a3.call(logger, "SendbirdProvider | useConnect/setupConnection/connect retry connect with valid session token: ".concat(sessionToken.slice(0, 10) + "..."));
                  return [4, sdk.connect(userId, sessionToken)];
                case 3:
                  user = _b2.sent();
                  return [2, onConnected(user)];
                case 4:
                  return [3, 6];
                case 5:
                  error_1 = _b2.sent();
                  if (error_1 instanceof v) {
                    return [2, onConnectFailed(error_1)];
                  }
                  return [3, 6];
                case 6:
                  return [2, onConnectFailed(error)];
              }
            });
          });
        });
        var onConnected = function(user) {
          return __awaiter(_this, void 0, void 0, function() {
            var error_2, error_3, updateParams, updatedUser;
            var _b2, _c2, _d2, _e2, _f2, _g, _h, _j;
            return __generator(this, function(_k) {
              switch (_k.label) {
                case 0:
                  (_b2 = logger.info) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "SendbirdProvider | useConnect/setupConnection/onConnected", user);
                  sdkDispatcher({ type: INIT_SDK, payload: sdk });
                  userDispatcher({ type: INIT_USER, payload: user });
                  _k.label = 1;
                case 1:
                  _k.trys.push([1, 3, , 4]);
                  return [4, initializeMessageTemplatesInfo(sdk)];
                case 2:
                  _k.sent();
                  return [3, 4];
                case 3:
                  error_2 = _k.sent();
                  (_c2 = logger.error) === null || _c2 === void 0 ? void 0 : _c2.call(logger, "SendbirdProvider | useConnect/setupConnection/upsertMessageTemplateListInLocalStorage failed", { error: error_2 });
                  return [3, 4];
                case 4:
                  _k.trys.push([4, 6, , 7]);
                  return [4, initDashboardConfigs(sdk)];
                case 5:
                  _k.sent();
                  (_d2 = logger.info) === null || _d2 === void 0 ? void 0 : _d2.call(logger, "SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration success");
                  return [3, 7];
                case 6:
                  error_3 = _k.sent();
                  (_e2 = logger.error) === null || _e2 === void 0 ? void 0 : _e2.call(logger, "SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration failed", { error: error_3 });
                  return [3, 7];
                case 7:
                  _k.trys.push([7, 10, , 11]);
                  if (!((nickname !== user.nickname || profileUrl !== user.profileUrl) && !(isTextuallyNull(nickname) && isTextuallyNull(profileUrl)))) return [3, 9];
                  (_f2 = logger.info) === null || _f2 === void 0 ? void 0 : _f2.call(logger, "SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo", { nickname, profileUrl });
                  updateParams = {
                    nickname: nickname || user.nickname || (isUserIdUsedForNickname ? user.userId : ""),
                    profileUrl: profileUrl || user.profileUrl
                  };
                  return [4, sdk.updateCurrentUserInfo(updateParams)];
                case 8:
                  updatedUser = _k.sent();
                  (_g = logger.info) === null || _g === void 0 ? void 0 : _g.call(logger, "SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo success", updateParams);
                  userDispatcher({ type: UPDATE_USER_INFO, payload: updatedUser });
                  _k.label = 9;
                case 9:
                  return [3, 11];
                case 10:
                  _k.sent();
                  return [3, 11];
                case 11:
                  resolve();
                  (_j = (_h = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.connection) === null || _h === void 0 ? void 0 : _h.onConnected) === null || _j === void 0 ? void 0 : _j.call(_h, user);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        var onConnectFailed = function(e) {
          return __awaiter(_this, void 0, void 0, function() {
            var errorMessage2;
            var _a3, _b2, _c2, _d2;
            return __generator(this, function(_e2) {
              switch (_e2.label) {
                case 0:
                  if (!(sdk.isCacheEnabled && shouldClearCache(e))) return [3, 2];
                  (_a3 = logger.error) === null || _a3 === void 0 ? void 0 : _a3.call(logger, "SendbirdProvider | useConnect/setupConnection/connect clear cache [".concat(e.code, "/").concat(e.message, "]"));
                  return [4, sdk.clearCachedData()];
                case 1:
                  _e2.sent();
                  _e2.label = 2;
                case 2:
                  errorMessage2 = getConnectSbError(e);
                  (_b2 = logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, errorMessage2, { e, appId, userId });
                  userDispatcher({ type: RESET_USER });
                  sdkDispatcher({ type: RESET_SDK });
                  sdkDispatcher({ type: SDK_ERROR });
                  reject(errorMessage2);
                  (_d2 = (_c2 = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.connection) === null || _c2 === void 0 ? void 0 : _c2.onFailed) === null || _d2 === void 0 ? void 0 : _d2.call(_c2, e);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
      })];
    });
  });
}
function initSDK(_a) {
  var appId = _a.appId, _b = _a.isNewApp, isNewApp = _b === void 0 ? false : _b, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, _c = _a.sdkInitParams, sdkInitParams = _c === void 0 ? {} : _c;
  var params = Object.assign(sdkInitParams, {
    appId,
    modules: [new $e(), new ke()],
    newInstance: isNewApp,
    localCacheEnabled: true
  });
  if (customApiHost)
    params.customApiHost = customApiHost;
  if (customWebSocketHost)
    params.customWebSocketHost = customWebSocketHost;
  return In.init(params);
}
function setupSDK(sdk, params) {
  var _a, _b;
  var logger = params.logger, sessionHandler = params.sessionHandler, isMobile = params.isMobile, customExtensionParams = params.customExtensionParams;
  (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, "SendbirdProvider | useConnect/setupConnection/setVersion", { version: APP_VERSION_STRING });
  sdk.addExtension("sb_uikit", APP_VERSION_STRING);
  sdk.addSendbirdExtensions([{ product: Be.UIKIT_CHAT, version: APP_VERSION_STRING, platform: Qe === null || Qe === void 0 ? void 0 : Qe.JS }], { platform: isMobile ? We.MOBILE_WEB : We.WEB }, customExtensionParams);
  if (sessionHandler) {
    (_b = logger.info) === null || _b === void 0 ? void 0 : _b.call(logger, "SendbirdProvider | useConnect/setupConnection/configureSession", sessionHandler);
    sdk.setSessionHandler(sessionHandler);
  }
}
function shouldClearCache(error) {
  if (!(error instanceof v))
    return false;
  return [
    u.USER_AUTH_DEACTIVATED,
    u.USER_AUTH_DELETED_OR_NOT_FOUND,
    u.SESSION_TOKEN_EXPIRED,
    u.SESSION_REVOKED
  ].includes(error.code);
}
function shouldRetryWithValidSessionToken(error) {
  if (!(error instanceof v))
    return false;
  return [
    u.SESSION_TOKEN_EXPIRED,
    /**
     * Note: INVALID_TOKEN has been added arbitrarily due to legacy constraints
     *
     * In the useEffect of the useConnect hook, authentication is being performed
     * but changes of the `accessToken` is not being detected.
     * `disconnectSdk` is called when connect is called redundantly for the same user ID, causing issues, so `accessToken` has been excluded form the deps.
     *
     * In case the `accessToken` is missed, an additional attempt to connect is made
     * */
    u.INVALID_TOKEN
  ].includes(error.code);
}
function connect(_a) {
  return __awaiter(this, arguments, void 0, function(_b) {
    var logger = _b.logger, sdkDispatcher = _b.sdkDispatcher, userDispatcher = _b.userDispatcher, appInfoDispatcher = _b.appInfoDispatcher, initDashboardConfigs = _b.initDashboardConfigs, userId = _b.userId, appId = _b.appId, _c = _b.isNewApp, isNewApp = _c === void 0 ? false : _c, customApiHost = _b.customApiHost, customWebSocketHost = _b.customWebSocketHost, configureSession = _b.configureSession, nickname = _b.nickname, profileUrl = _b.profileUrl, accessToken = _b.accessToken, sdk = _b.sdk, sdkInitParams = _b.sdkInitParams, customExtensionParams = _b.customExtensionParams, isMobile = _b.isMobile, eventHandlers = _b.eventHandlers, isUserIdUsedForNickname = _b.isUserIdUsedForNickname, initializeMessageTemplatesInfo = _b.initializeMessageTemplatesInfo;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, disconnectSdk({
            logger,
            sdkDispatcher,
            userDispatcher,
            sdk
          })];
        case 1:
          _d.sent();
          return [4, setUpConnection({
            logger,
            sdkDispatcher,
            userDispatcher,
            appInfoDispatcher,
            initDashboardConfigs,
            userId,
            appId,
            isNewApp,
            customApiHost,
            customWebSocketHost,
            configureSession,
            nickname,
            profileUrl,
            accessToken,
            sdkInitParams,
            customExtensionParams,
            isMobile,
            eventHandlers,
            isUserIdUsedForNickname,
            initializeMessageTemplatesInfo
          })];
        case 2:
          _d.sent();
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function useConnect(triggerTypes, staticTypes) {
  var _this = this;
  var userId = triggerTypes.userId, appId = triggerTypes.appId, accessToken = triggerTypes.accessToken, isMobile = triggerTypes.isMobile, isUserIdUsedForNickname = triggerTypes.isUserIdUsedForNickname;
  var logger = staticTypes.logger, nickname = staticTypes.nickname, profileUrl = staticTypes.profileUrl, configureSession = staticTypes.configureSession, customApiHost = staticTypes.customApiHost, customWebSocketHost = staticTypes.customWebSocketHost, sdk = staticTypes.sdk, sdkDispatcher = staticTypes.sdkDispatcher, userDispatcher = staticTypes.userDispatcher, appInfoDispatcher = staticTypes.appInfoDispatcher, initDashboardConfigs = staticTypes.initDashboardConfigs, sdkInitParams = staticTypes.sdkInitParams, customExtensionParams = staticTypes.customExtensionParams, eventHandlers = staticTypes.eventHandlers, initializeMessageTemplatesInfo = staticTypes.initializeMessageTemplatesInfo;
  var connectDeps = (0, import_react.useRef)({
    appId: "",
    userId: ""
  });
  (0, import_react.useEffect)(function() {
    var _a;
    (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, "SendbirdProvider | useConnect/useEffect", { userId, appId, accessToken });
    var isNewApp = connectDeps.current.appId !== appId;
    if (connectDeps.current.appId === appId && connectDeps.current.userId === userId) {
      return;
    } else {
      connectDeps.current = { appId, userId };
    }
    connect({
      userId,
      appId,
      isNewApp,
      accessToken,
      logger,
      nickname,
      profileUrl,
      configureSession,
      customApiHost,
      customWebSocketHost,
      sdk,
      sdkDispatcher,
      userDispatcher,
      appInfoDispatcher,
      initDashboardConfigs,
      isUserIdUsedForNickname,
      sdkInitParams,
      customExtensionParams,
      isMobile,
      eventHandlers,
      initializeMessageTemplatesInfo
    }).catch(function(error) {
      var _a2;
      (_a2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "SendbirdProvider | useConnect/useEffect", error);
    });
  }, [userId, appId]);
  var reconnect = (0, import_react.useCallback)(function() {
    return __awaiter(_this, void 0, void 0, function() {
      var error_1;
      var _a, _b;
      return __generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, "SendbirdProvider | useConnect/reconnect/useCallback", { sdk });
            _c.label = 1;
          case 1:
            _c.trys.push([1, 3, , 4]);
            return [4, connect({
              userId,
              appId,
              accessToken,
              logger,
              nickname,
              profileUrl,
              configureSession,
              customApiHost,
              customWebSocketHost,
              sdk,
              sdkDispatcher,
              userDispatcher,
              appInfoDispatcher,
              initDashboardConfigs,
              isUserIdUsedForNickname,
              sdkInitParams,
              customExtensionParams,
              isMobile,
              eventHandlers,
              initializeMessageTemplatesInfo
            })];
          case 2:
            _c.sent();
            return [3, 4];
          case 3:
            error_1 = _c.sent();
            (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, "SendbirdProvider | useConnect/reconnect/useCallback", error_1);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [sdk]);
  return reconnect;
}
var LOG_LEVELS = {
  DEBUG: "debug",
  WARNING: "warning",
  ERROR: "error",
  INFO: "info",
  ALL: "all"
};
var colorLog = function(level) {
  switch (level) {
    case LOG_LEVELS.WARNING:
      return "color: Orange";
    case LOG_LEVELS.ERROR:
      return "color: Red";
    default:
      return "color: Gray";
  }
};
var printLog = function(_a) {
  var level = _a.level, title = _a.title, _b = _a.description, description = _b === void 0 ? "" : _b, _c = _a.payload, payload = _c === void 0 ? [] : _c;
  console.log.apply(console, __spreadArray(["%c SendbirdUIKit | ".concat(level, " | ").concat((/* @__PURE__ */ new Date()).toISOString(), " | ").concat(title, " ").concat(description && "|"), colorLog(level), description], payload, false));
};
var getDefaultLogger = function() {
  return {
    info: noop,
    error: noop,
    warning: noop
  };
};
var LoggerFactory = function(lvl, customInterface) {
  var logInterface = customInterface || printLog;
  var lvlArray = Array.isArray(lvl) ? lvl : [lvl];
  var applyLog = function(lgLvl) {
    return function(title, description) {
      var payload = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        payload[_i - 2] = arguments[_i];
      }
      return logInterface({
        level: lgLvl,
        title,
        description,
        payload
      });
    };
  };
  return lvlArray.reduce(function(accumulator, currentLvl) {
    if (currentLvl === LOG_LEVELS.DEBUG || currentLvl === LOG_LEVELS.ALL) {
      return __assign(__assign({}, accumulator), { info: applyLog(LOG_LEVELS.INFO), error: applyLog(LOG_LEVELS.ERROR), warning: applyLog(LOG_LEVELS.WARNING) });
    }
    if (currentLvl === LOG_LEVELS.INFO) {
      return __assign(__assign({}, accumulator), { info: applyLog(LOG_LEVELS.INFO) });
    }
    if (currentLvl === LOG_LEVELS.ERROR) {
      return __assign(__assign({}, accumulator), { error: applyLog(LOG_LEVELS.ERROR) });
    }
    if (currentLvl === LOG_LEVELS.WARNING) {
      return __assign(__assign({}, accumulator), { warning: applyLog(LOG_LEVELS.WARNING) });
    }
    return __assign({}, accumulator);
  }, getDefaultLogger());
};
var VoiceMessageProvider = function(_a) {
  var children = _a.children;
  return import_react.default.createElement(
    VoicePlayerProvider,
    null,
    import_react.default.createElement(VoiceRecorderProvider, null, children)
  );
};
function uikitConfigMapper(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
  var legacyConfig = _a.legacyConfig, _8 = _a.uikitOptions, uikitOptions = _8 === void 0 ? {} : _8;
  var replyType = legacyConfig.replyType, isMentionEnabled = legacyConfig.isMentionEnabled, isReactionEnabled = legacyConfig.isReactionEnabled, disableUserProfile = legacyConfig.disableUserProfile, isVoiceMessageEnabled = legacyConfig.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = legacyConfig.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = legacyConfig.isMessageReceiptStatusEnabledOnChannelList, showSearchIcon = legacyConfig.showSearchIcon;
  return {
    common: {
      enableUsingDefaultUserProfile: (_c = (_b = uikitOptions.common) === null || _b === void 0 ? void 0 : _b.enableUsingDefaultUserProfile) !== null && _c !== void 0 ? _c : typeof disableUserProfile === "boolean" ? !disableUserProfile : void 0
    },
    groupChannel: {
      enableOgtag: (_d = uikitOptions.groupChannel) === null || _d === void 0 ? void 0 : _d.enableOgtag,
      enableMention: (_f = (_e = uikitOptions.groupChannel) === null || _e === void 0 ? void 0 : _e.enableMention) !== null && _f !== void 0 ? _f : isMentionEnabled,
      enableReactions: (_h = (_g = uikitOptions.groupChannel) === null || _g === void 0 ? void 0 : _g.enableReactions) !== null && _h !== void 0 ? _h : isReactionEnabled,
      enableReactionsSupergroup: (_j = uikitOptions.groupChannel) === null || _j === void 0 ? void 0 : _j.enableReactionsSupergroup,
      enableTypingIndicator: (_k = uikitOptions.groupChannel) === null || _k === void 0 ? void 0 : _k.enableTypingIndicator,
      enableVoiceMessage: (_m = (_l = uikitOptions.groupChannel) === null || _l === void 0 ? void 0 : _l.enableVoiceMessage) !== null && _m !== void 0 ? _m : isVoiceMessageEnabled,
      replyType: (_p = (_o = uikitOptions.groupChannel) === null || _o === void 0 ? void 0 : _o.replyType) !== null && _p !== void 0 ? _p : replyType != null ? getCaseResolvedReplyType(replyType).lowerCase : void 0,
      threadReplySelectType: (_q = uikitOptions.groupChannel) === null || _q === void 0 ? void 0 : _q.threadReplySelectType,
      input: {
        enableDocument: (_s = (_r = uikitOptions.groupChannel) === null || _r === void 0 ? void 0 : _r.input) === null || _s === void 0 ? void 0 : _s.enableDocument
      },
      typingIndicatorTypes: (_t = uikitOptions.groupChannel) === null || _t === void 0 ? void 0 : _t.typingIndicatorTypes,
      enableFeedback: (_u = uikitOptions.groupChannel) === null || _u === void 0 ? void 0 : _u.enableFeedback,
      enableSuggestedReplies: (_v = uikitOptions.groupChannel) === null || _v === void 0 ? void 0 : _v.enableSuggestedReplies,
      showSuggestedRepliesFor: (_w = uikitOptions.groupChannel) === null || _w === void 0 ? void 0 : _w.showSuggestedRepliesFor,
      suggestedRepliesDirection: (_x = uikitOptions.groupChannel) === null || _x === void 0 ? void 0 : _x.suggestedRepliesDirection,
      enableMarkdownForUserMessage: (_y = uikitOptions.groupChannel) === null || _y === void 0 ? void 0 : _y.enableMarkdownForUserMessage
    },
    groupChannelList: {
      enableTypingIndicator: (_0 = (_z = uikitOptions.groupChannelList) === null || _z === void 0 ? void 0 : _z.enableTypingIndicator) !== null && _0 !== void 0 ? _0 : isTypingIndicatorEnabledOnChannelList,
      enableMessageReceiptStatus: (_2 = (_1 = uikitOptions.groupChannelList) === null || _1 === void 0 ? void 0 : _1.enableMessageReceiptStatus) !== null && _2 !== void 0 ? _2 : isMessageReceiptStatusEnabledOnChannelList
    },
    groupChannelSettings: {
      enableMessageSearch: (_4 = (_3 = uikitOptions.groupChannelSettings) === null || _3 === void 0 ? void 0 : _3.enableMessageSearch) !== null && _4 !== void 0 ? _4 : showSearchIcon
    },
    openChannel: {
      enableOgtag: (_5 = uikitOptions.openChannel) === null || _5 === void 0 ? void 0 : _5.enableOgtag,
      input: {
        enableDocument: (_7 = (_6 = uikitOptions.openChannel) === null || _6 === void 0 ? void 0 : _6.input) === null || _7 === void 0 ? void 0 : _7.enableDocument
      }
    }
  };
}
function useMarkAsReadScheduler(_a, _b) {
  var isConnected = _a.isConnected;
  var logger = _b.logger;
  var markAsReadScheduler = (0, import_react.useMemo)(function() {
    return schedulerFactory({
      logger,
      cb: function(channel) {
        try {
          channel.markAsRead();
        } catch (error) {
          logger.warning("Channel: Mark as delivered failed", { channel, error });
        }
      }
    });
  }, []);
  (0, import_react.useEffect)(function() {
    if (!isConnected) {
      markAsReadScheduler.clear();
    }
  }, [isConnected]);
  useUnmount(function() {
    markAsReadScheduler.clear();
  });
  return markAsReadScheduler;
}
var uikitConfigStorage = {
  getItem: function(key) {
    return __awaiter(this, void 0, void 0, function() {
      var _a;
      return __generator(this, function(_b) {
        return [2, (_a = localStorage.getItem(key)) !== null && _a !== void 0 ? _a : null];
      });
    });
  },
  setItem: function(key, value) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        return [2, localStorage.setItem(key, value)];
      });
    });
  }
};
var getProcessedTemplate = function(parsedTemplate) {
  return {
    version: Number(parsedTemplate.ui_template.version),
    uiTemplate: JSON.stringify(parsedTemplate.ui_template.body.items),
    colorVariables: parsedTemplate.color_variables
  };
};
var getProcessedTemplatesMap = function(parsedTemplates) {
  var processedTemplates = {};
  parsedTemplates.forEach(function(template) {
    processedTemplates[template.key] = getProcessedTemplate(template);
  });
  return processedTemplates;
};
var MESSAGE_TEMPLATES_FETCH_LIMIT = 20;
var INITIALIZE_MESSAGE_TEMPLATES_INFO = APP_INFO_ACTIONS.INITIALIZE_MESSAGE_TEMPLATES_INFO;
var UPSERT_MESSAGE_TEMPLATES = APP_INFO_ACTIONS.UPSERT_MESSAGE_TEMPLATES;
var UPSERT_WAITING_TEMPLATE_KEYS = APP_INFO_ACTIONS.UPSERT_WAITING_TEMPLATE_KEYS;
var MARK_ERROR_WAITING_TEMPLATE_KEYS = APP_INFO_ACTIONS.MARK_ERROR_WAITING_TEMPLATE_KEYS;
function useMessageTemplateUtils(_a) {
  var _this = this;
  var sdk = _a.sdk, logger = _a.logger, appInfoStore = _a.appInfoStore, appInfoDispatcher = _a.appInfoDispatcher;
  var messageTemplatesInfo = appInfoStore === null || appInfoStore === void 0 ? void 0 : appInfoStore.messageTemplatesInfo;
  var getCachedTemplate = function(key) {
    var _a2, _b;
    if (!messageTemplatesInfo)
      return null;
    var cachedTemplate = null;
    var cachedMessageTemplates = (_a2 = messageTemplatesInfo === null || messageTemplatesInfo === void 0 ? void 0 : messageTemplatesInfo.templatesMap) !== null && _a2 !== void 0 ? _a2 : null;
    if (cachedMessageTemplates) {
      cachedTemplate = (_b = cachedMessageTemplates[key]) !== null && _b !== void 0 ? _b : null;
    }
    return cachedTemplate;
  };
  var fetchAllMessageTemplates = function(readySdk) {
    return __awaiter(_this, void 0, void 0, function() {
      var hasMore, paginationToken, fetchedTemplates, res;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            hasMore = true;
            paginationToken = null;
            fetchedTemplates = [];
            _a2.label = 1;
          case 1:
            if (!hasMore) return [3, 3];
            return [4, readySdk.message.getMessageTemplatesByToken(paginationToken, { limit: MESSAGE_TEMPLATES_FETCH_LIMIT })];
          case 2:
            res = _a2.sent();
            hasMore = res.hasMore;
            paginationToken = res.token;
            res.templates.forEach(function(messageTemplate) {
              fetchedTemplates.push(JSON.parse(messageTemplate.template));
            });
            return [3, 1];
          case 3:
            return [2, fetchedTemplates];
        }
      });
    });
  };
  var initializeMessageTemplatesInfo = function(readySdk) {
    return __awaiter(_this, void 0, void 0, function() {
      var sdkMessageTemplateToken, cachedMessageTemplatesToken, cachedMessageTemplates, parsedTemplates, newMessageTemplatesInfo, parsedTemplates, newMessageTemplatesInfo;
      var _a2;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            sdkMessageTemplateToken = (_a2 = readySdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.messageTemplateInfo.token;
            if (!sdkMessageTemplateToken) {
              localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);
              localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_KEY);
              return [
                2
                /*return*/
              ];
            }
            cachedMessageTemplatesToken = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);
            cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);
            if (!(!cachedMessageTemplatesToken || cachedMessageTemplatesToken !== sdkMessageTemplateToken)) return [3, 2];
            return [4, fetchAllMessageTemplates(readySdk)];
          case 1:
            parsedTemplates = _b.sent();
            newMessageTemplatesInfo = {
              token: sdkMessageTemplateToken,
              templatesMap: getProcessedTemplatesMap(parsedTemplates)
            };
            appInfoDispatcher({ type: INITIALIZE_MESSAGE_TEMPLATES_INFO, payload: newMessageTemplatesInfo });
            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY, sdkMessageTemplateToken);
            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates));
            return [3, 3];
          case 2:
            if (cachedMessageTemplatesToken && cachedMessageTemplatesToken === sdkMessageTemplateToken && cachedMessageTemplates) {
              parsedTemplates = JSON.parse(cachedMessageTemplates);
              newMessageTemplatesInfo = {
                token: sdkMessageTemplateToken,
                templatesMap: getProcessedTemplatesMap(parsedTemplates)
              };
              appInfoDispatcher({ type: INITIALIZE_MESSAGE_TEMPLATES_INFO, payload: newMessageTemplatesInfo });
            }
            _b.label = 3;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var updateMessageTemplatesInfo = function(templateKeys, messageId, requestedAt) {
    return __awaiter(_this, void 0, void 0, function() {
      var newParsedTemplates_1, hasMore, token, result, e_1, cachedMessageTemplates, parsedTemplates_1, existingKeys_1;
      var _a2;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!appInfoDispatcher) return [3, 7];
            appInfoDispatcher({
              type: UPSERT_WAITING_TEMPLATE_KEYS,
              payload: {
                keys: templateKeys,
                requestedAt
              }
            });
            newParsedTemplates_1 = [];
            _b.label = 1;
          case 1:
            _b.trys.push([1, 5, , 6]);
            hasMore = true;
            token = null;
            _b.label = 2;
          case 2:
            if (!hasMore) return [3, 4];
            return [4, sdk.message.getMessageTemplatesByToken(token, {
              keys: templateKeys
            })];
          case 3:
            result = _b.sent();
            result.templates.forEach(function(newTemplate) {
              newParsedTemplates_1.push(JSON.parse(newTemplate.template));
            });
            hasMore = result.hasMore;
            token = result.token;
            return [3, 2];
          case 4:
            return [3, 6];
          case 5:
            e_1 = _b.sent();
            (_a2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "Sendbird | fetchProcessedMessageTemplates failed", e_1, templateKeys);
            return [3, 6];
          case 6:
            if (newParsedTemplates_1.length > 0) {
              cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);
              if (cachedMessageTemplates) {
                parsedTemplates_1 = JSON.parse(cachedMessageTemplates);
                existingKeys_1 = parsedTemplates_1.map(function(parsedTemplate) {
                  return parsedTemplate.key;
                });
                newParsedTemplates_1.forEach(function(newParsedTemplate) {
                  if (!existingKeys_1.includes(newParsedTemplate.key)) {
                    parsedTemplates_1.push(newParsedTemplate);
                  }
                });
                localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates_1));
              } else {
                localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify([newParsedTemplates_1]));
              }
              appInfoDispatcher({
                type: UPSERT_MESSAGE_TEMPLATES,
                payload: newParsedTemplates_1.map(function(newParsedTemplate) {
                  return {
                    key: newParsedTemplate.key,
                    template: getProcessedTemplate(newParsedTemplate)
                  };
                })
              });
            } else {
              appInfoDispatcher({
                type: MARK_ERROR_WAITING_TEMPLATE_KEYS,
                payload: {
                  keys: templateKeys,
                  messageId
                }
              });
            }
            _b.label = 7;
          case 7:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  return {
    getCachedTemplate,
    updateMessageTemplatesInfo,
    initializeMessageTemplatesInfo
  };
}
function SendbirdProvider(props) {
  var localConfigs = uikitConfigMapper({
    legacyConfig: {
      replyType: props.replyType,
      isMentionEnabled: props.isMentionEnabled,
      isReactionEnabled: props.isReactionEnabled,
      disableUserProfile: props.disableUserProfile,
      isVoiceMessageEnabled: props.isVoiceMessageEnabled,
      isTypingIndicatorEnabledOnChannelList: props.isTypingIndicatorEnabledOnChannelList,
      isMessageReceiptStatusEnabledOnChannelList: props.isMessageReceiptStatusEnabledOnChannelList,
      showSearchIcon: props.showSearchIcon
    },
    uikitOptions: props.uikitOptions
  });
  return import_react.default.createElement(
    UIKitConfigProvider,
    { storage: uikitConfigStorage, localConfigs: {
      common: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.common,
      groupChannel: {
        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannel,
        channelList: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelList,
        setting: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelSettings
      },
      openChannel: {
        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.openChannel
      }
    } },
    import_react.default.createElement(SendbirdSDK, __assign({}, props))
  );
}
var SendbirdSDK = function(_a) {
  var _b, _c, _d;
  var appId = _a.appId, userId = _a.userId, children = _a.children, accessToken = _a.accessToken, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, configureSession = _a.configureSession, _e = _a.theme, theme = _e === void 0 ? "light" : _e, _f = _a.config, config = _f === void 0 ? {} : _f, _g = _a.nickname, nickname = _g === void 0 ? "" : _g, colorSet = _a.colorSet, stringSet = _a.stringSet, dateLocale = _a.dateLocale, _h = _a.profileUrl, profileUrl = _h === void 0 ? "" : _h, voiceRecord = _a.voiceRecord, userListQuery = _a.userListQuery, _j = _a.imageCompression, imageCompression = _j === void 0 ? {} : _j, _k = _a.allowProfileEdit, allowProfileEdit = _k === void 0 ? false : _k, _l = _a.disableMarkAsDelivered, disableMarkAsDelivered = _l === void 0 ? false : _l, renderUserProfile = _a.renderUserProfile, onUserProfileMessage = _a.onUserProfileMessage, _m = _a.breakpoint, breakpoint = _m === void 0 ? false : _m, _o = _a.isUserIdUsedForNickname, isUserIdUsedForNickname = _o === void 0 ? true : _o, sdkInitParams = _a.sdkInitParams, customExtensionParams = _a.customExtensionParams, _p = _a.isMultipleFilesMessageEnabled, isMultipleFilesMessageEnabled = _p === void 0 ? false : _p, eventHandlers = _a.eventHandlers, _q = _a.htmlTextDirection, htmlTextDirection = _q === void 0 ? "ltr" : _q, _r = _a.forceLeftToRightMessageLayout, forceLeftToRightMessageLayout = _r === void 0 ? false : _r;
  var _s = config.logLevel, logLevel = _s === void 0 ? "" : _s, _t = config.userMention, userMention = _t === void 0 ? {} : _t, _u = config.isREMUnitEnabled, isREMUnitEnabled = _u === void 0 ? false : _u, customPubSub = config.pubSub;
  var isMobile = useMediaQueryContext().isMobile;
  var _v = (0, import_react.useState)(LoggerFactory(logLevel)), logger = _v[0], setLogger = _v[1];
  var pubSub = (0, import_react.useState)(function() {
    return customPubSub !== null && customPubSub !== void 0 ? customPubSub : pubSubFactory();
  })[0];
  var _w = (0, import_react.useReducer)(reducer$2, initialState$2), sdkStore = _w[0], sdkDispatcher = _w[1];
  var _x = (0, import_react.useReducer)(reducer$1, initialState$1), userStore = _x[0], userDispatcher = _x[1];
  var _y = (0, import_react.useReducer)(reducer, initialState), appInfoStore = _y[0], appInfoDispatcher = _y[1];
  var _z = useUIKitConfig(), configs = _z.configs, configsWithAppAttr = _z.configsWithAppAttr, initDashboardConfigs = _z.initDashboardConfigs;
  var sdkInitialized = sdkStore.initialized;
  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;
  var _0 = (_b = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _b !== void 0 ? _b : {}, uploadSizeLimit = _0.uploadSizeLimit, multipleFilesMessageFileCountLimit = _0.multipleFilesMessageFileCountLimit;
  useTheme(colorSet);
  var _1 = useMessageTemplateUtils({
    sdk,
    logger,
    appInfoStore,
    appInfoDispatcher
  }), getCachedTemplate = _1.getCachedTemplate, updateMessageTemplatesInfo = _1.updateMessageTemplatesInfo, initializeMessageTemplatesInfo = _1.initializeMessageTemplatesInfo;
  var utils = {
    updateMessageTemplatesInfo,
    getCachedTemplate
  };
  var reconnect = useConnect({
    appId,
    userId,
    accessToken,
    isUserIdUsedForNickname,
    isMobile
  }, {
    logger,
    nickname,
    profileUrl,
    configureSession,
    customApiHost,
    customWebSocketHost,
    sdkInitParams,
    customExtensionParams,
    sdk,
    sdkDispatcher,
    userDispatcher,
    appInfoDispatcher,
    initDashboardConfigs,
    eventHandlers,
    initializeMessageTemplatesInfo
  });
  useUnmount(function() {
    if (typeof sdk.disconnect === "function") {
      disconnectSdk({
        logger,
        sdkDispatcher,
        userDispatcher,
        sdk
      });
    }
  }, [sdk.disconnect]);
  (0, import_react.useEffect)(function() {
    setLogger(LoggerFactory(logLevel));
  }, [logLevel]);
  var _2 = (0, import_react.useState)(theme), currentTheme = _2[0], setCurrentTheme = _2[1];
  (0, import_react.useEffect)(function() {
    setCurrentTheme(theme);
  }, [theme]);
  (0, import_react.useEffect)(function() {
    var body = document.querySelector("body");
    body === null || body === void 0 ? void 0 : body.classList.remove("sendbird-experimental__rem__units");
    if (isREMUnitEnabled) {
      body === null || body === void 0 ? void 0 : body.classList.add("sendbird-experimental__rem__units");
    }
  }, [isREMUnitEnabled]);
  (0, import_react.useEffect)(function() {
    logger.info("Setup theme", "Theme: ".concat(currentTheme));
    try {
      var body = document.querySelector("body");
      body === null || body === void 0 ? void 0 : body.classList.remove("sendbird-theme--light");
      body === null || body === void 0 ? void 0 : body.classList.remove("sendbird-theme--dark");
      body === null || body === void 0 ? void 0 : body.classList.add("sendbird-theme--".concat(currentTheme || "light"));
      logger.info("Finish setup theme");
    } catch (e) {
      logger.warning("Setup theme failed", "".concat(e));
    }
    return function() {
      try {
        var body2 = document.querySelector("body");
        body2 === null || body2 === void 0 ? void 0 : body2.classList.remove("sendbird-theme--light");
        body2 === null || body2 === void 0 ? void 0 : body2.classList.remove("sendbird-theme--dark");
      } catch (_a2) {
      }
    };
  }, [currentTheme]);
  useHTMLTextDirection(htmlTextDirection);
  var isOnline = useOnlineStatus(sdkStore.sdk, logger);
  var markAsReadScheduler = useMarkAsReadScheduler({ isConnected: isOnline }, { logger });
  var markAsDeliveredScheduler = useMarkAsDeliveredScheduler({ isConnected: isOnline }, { logger });
  var localeStringSet = import_react.default.useMemo(function() {
    return __assign(__assign({}, getStringSet("en")), stringSet);
  }, [stringSet]);
  var uikitMultipleFilesMessageLimit = (0, import_react.useMemo)(function() {
    return Math.min(DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, multipleFilesMessageFileCountLimit !== null && multipleFilesMessageFileCountLimit !== void 0 ? multipleFilesMessageFileCountLimit : Number.MAX_SAFE_INTEGER);
  }, [multipleFilesMessageFileCountLimit]);
  var emojiManager = (0, import_react.useMemo)(function() {
    return new EmojiManager({
      sdk,
      logger
    });
  }, [sdkStore.initialized]);
  return import_react.default.createElement(
    SendbirdSdkContext.Provider,
    { value: {
      stores: {
        sdkStore,
        userStore,
        appInfoStore
      },
      dispatchers: {
        sdkDispatcher,
        userDispatcher,
        appInfoDispatcher,
        reconnect
      },
      config: {
        disableMarkAsDelivered,
        renderUserProfile,
        onUserProfileMessage,
        allowProfileEdit,
        isOnline,
        userId,
        appId,
        accessToken,
        theme: currentTheme,
        setCurrentTheme,
        setCurrenttheme: setCurrentTheme,
        // deprecated: typo
        isMultipleFilesMessageEnabled,
        uikitUploadSizeLimit: uploadSizeLimit !== null && uploadSizeLimit !== void 0 ? uploadSizeLimit : DEFAULT_UPLOAD_SIZE_LIMIT,
        uikitMultipleFilesMessageLimit,
        userListQuery,
        logger,
        pubSub,
        imageCompression: __assign({ compressionRate: 0.7, outputFormat: "preserve" }, imageCompression),
        voiceRecord: {
          maxRecordingTime: (_c = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime) !== null && _c !== void 0 ? _c : VOICE_RECORDER_DEFAULT_MAX,
          minRecordingTime: (_d = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.minRecordingTime) !== null && _d !== void 0 ? _d : VOICE_RECORDER_DEFAULT_MIN
        },
        userMention: {
          maxMentionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10,
          maxSuggestionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15
        },
        markAsReadScheduler,
        markAsDeliveredScheduler,
        // Remote configs set from dashboard by UIKit feature configuration
        common: configs.common,
        groupChannel: {
          enableOgtag: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableOgtag,
          enableTypingIndicator: configs.groupChannel.channel.enableTypingIndicator,
          enableReactions: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,
          enableMention: configs.groupChannel.channel.enableMention,
          replyType: configs.groupChannel.channel.replyType,
          threadReplySelectType: configs.groupChannel.channel.threadReplySelectType,
          enableVoiceMessage: configs.groupChannel.channel.enableVoiceMessage,
          enableDocument: configs.groupChannel.channel.input.enableDocument,
          typingIndicatorTypes: configs.groupChannel.channel.typingIndicatorTypes,
          enableFeedback: configs.groupChannel.channel.enableFeedback,
          enableSuggestedReplies: configs.groupChannel.channel.enableSuggestedReplies,
          showSuggestedRepliesFor: configs.groupChannel.channel.showSuggestedRepliesFor,
          suggestedRepliesDirection: configs.groupChannel.channel.suggestedRepliesDirection,
          enableMarkdownForUserMessage: configs.groupChannel.channel.enableMarkdownForUserMessage,
          enableReactionsSupergroup: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactionsSupergroup
        },
        groupChannelList: {
          enableTypingIndicator: configs.groupChannel.channelList.enableTypingIndicator,
          enableMessageReceiptStatus: configs.groupChannel.channelList.enableMessageReceiptStatus
        },
        groupChannelSettings: {
          enableMessageSearch: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch
        },
        openChannel: {
          enableOgtag: sdkInitialized && configsWithAppAttr(sdk).openChannel.channel.enableOgtag,
          enableDocument: configs.openChannel.channel.input.enableDocument
        },
        // deprecated configs
        disableUserProfile: !configs.common.enableUsingDefaultUserProfile,
        isReactionEnabled: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,
        isMentionEnabled: configs.groupChannel.channel.enableMention,
        isVoiceMessageEnabled: configs.groupChannel.channel.enableVoiceMessage,
        replyType: getCaseResolvedReplyType(configs.groupChannel.channel.replyType).upperCase,
        isTypingIndicatorEnabledOnChannelList: configs.groupChannel.channelList.enableTypingIndicator,
        isMessageReceiptStatusEnabledOnChannelList: configs.groupChannel.channelList.enableMessageReceiptStatus,
        showSearchIcon: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch,
        htmlTextDirection,
        forceLeftToRightMessageLayout
      },
      eventHandlers,
      emojiManager,
      utils
    } },
    import_react.default.createElement(
      MediaQueryProvider,
      { logger, breakpoint },
      import_react.default.createElement(
        LocalizationProvider,
        { stringSet: localeStringSet, dateLocale },
        import_react.default.createElement(
          VoiceMessageProvider,
          null,
          import_react.default.createElement(GlobalModalProvider, null, children)
        )
      )
    ),
    import_react.default.createElement(EmojiReactionListRoot, null),
    import_react.default.createElement(ModalRoot, null),
    import_react.default.createElement(MenuRoot, null)
  );
};

// node_modules/@sendbird/uikit-react/App.js
var import_react50 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/context.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CwpgCadZ.js
var RESET_MESSAGES = "RESET_MESSAGES";
var FETCH_INITIAL_MESSAGES_START = "FETCH_INITIAL_MESSAGES_START";
var FETCH_INITIAL_MESSAGES_SUCCESS = "FETCH_INITIAL_MESSAGES_SUCCESS";
var FETCH_INITIAL_MESSAGES_FAILURE = "FETCH_INITIAL_MESSAGES_FAILURE";
var FETCH_PREV_MESSAGES_SUCCESS = "FETCH_PREV_MESSAGES_SUCCESS";
var FETCH_PREV_MESSAGES_FAILURE = "FETCH_PREV_MESSAGES_FAILURE";
var FETCH_NEXT_MESSAGES_SUCCESS = "FETCH_NEXT_MESSAGES_SUCCESS";
var FETCH_NEXT_MESSAGES_FAILURE = "FETCH_NEXT_MESSAGES_FAILURE";
var SEND_MESSAGE_START = "SEND_MESSAGE_START";
var SEND_MESSAGE_SUCCESS = "SEND_MESSAGE_SUCCESS";
var SEND_MESSAGE_FAILURE = "SEND_MESSAGE_FAILURE";
var RESEND_MESSAGE_START = "RESEND_MESSAGE_START";
var ON_MESSAGE_RECEIVED = "ON_MESSAGE_RECEIVED";
var ON_MESSAGE_UPDATED = "ON_MESSAGE_UPDATED";
var ON_MESSAGE_THREAD_INFO_UPDATED = "ON_MESSAGE_THREAD_INFO_UPDATED";
var ON_MESSAGE_DELETED = "ON_MESSAGE_DELETED";
var ON_MESSAGE_DELETED_BY_REQ_ID = "ON_MESSAGE_DELETED_BY_REQ_ID";
var SET_CURRENT_CHANNEL = "SET_CURRENT_CHANNEL";
var SET_CHANNEL_INVALID = "SET_CHANNEL_INVALID";
var MARK_AS_READ = "MARK_AS_READ";
var ON_REACTION_UPDATED = "ON_REACTION_UPDATED";
var SET_EMOJI_CONTAINER = "SET_EMOJI_CONTAINER";
var MESSAGE_LIST_PARAMS_CHANGED = "MESSAGE_LIST_PARAMS_CHANGED";
var ON_FILE_INFO_UPLOADED = "ON_FILE_INFO_UPLOADED";
var ON_TYPING_STATUS_UPDATED = "ON_TYPING_STATUS_UPDATED";
var channelActions = Object.freeze({
  __proto__: null,
  FETCH_INITIAL_MESSAGES_FAILURE,
  FETCH_INITIAL_MESSAGES_START,
  FETCH_INITIAL_MESSAGES_SUCCESS,
  FETCH_NEXT_MESSAGES_FAILURE,
  FETCH_NEXT_MESSAGES_SUCCESS,
  FETCH_PREV_MESSAGES_FAILURE,
  FETCH_PREV_MESSAGES_SUCCESS,
  MARK_AS_READ,
  MESSAGE_LIST_PARAMS_CHANGED,
  ON_FILE_INFO_UPLOADED,
  ON_MESSAGE_DELETED,
  ON_MESSAGE_DELETED_BY_REQ_ID,
  ON_MESSAGE_RECEIVED,
  ON_MESSAGE_THREAD_INFO_UPDATED,
  ON_MESSAGE_UPDATED,
  ON_REACTION_UPDATED,
  ON_TYPING_STATUS_UPDATED,
  RESEND_MESSAGE_START,
  RESET_MESSAGES,
  SEND_MESSAGE_FAILURE,
  SEND_MESSAGE_START,
  SEND_MESSAGE_SUCCESS,
  SET_CHANNEL_INVALID,
  SET_CURRENT_CHANNEL,
  SET_EMOJI_CONTAINER
});

// node_modules/@sendbird/uikit-react/chunks/bundle-BKe5KBuS.js
var isEmpty2 = function(val) {
  return val === null || val === void 0;
};
function compareIds(a, b) {
  if (isEmpty2(a) || isEmpty2(b)) {
    return false;
  }
  var aString = a.toString();
  var bString = b.toString();
  return aString === bString;
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CSRcmLyk.js
var import_react2 = __toESM(require_react(), 1);
var PREV_RESULT_SIZE = 30;
var NEXT_RESULT_SIZE = 15;
function useInitialMessagesFetch(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, initialTimeStamp = _a.initialTimeStamp, userFilledMessageListQuery = _a.userFilledMessageListQuery, replyType = _a.replyType, setIsScrolled = _a.setIsScrolled;
  var logger = _b.logger, scrollRef = _b.scrollRef, messagesDispatcher = _b.messagesDispatcher;
  var channelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;
  var fetchMessages = (0, import_react2.useCallback)(function() {
    logger.info("Channel useInitialMessagesFetch: Setup started", currentGroupChannel);
    setIsScrolled(false);
    messagesDispatcher({
      type: RESET_MESSAGES,
      payload: null
    });
    if (currentGroupChannel && (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.getMessagesByTimestamp)) {
      var messageListParams_1 = {
        prevResultSize: PREV_RESULT_SIZE,
        isInclusive: true,
        includeReactions: true,
        includeMetaArray: true
      };
      if (initialTimeStamp) {
        messageListParams_1.nextResultSize = NEXT_RESULT_SIZE;
      }
      if (replyType === "QUOTE_REPLY" || replyType === "THREAD") {
        messageListParams_1.includeThreadInfo = true;
        messageListParams_1.includeParentMessageInfo = true;
        messageListParams_1.replyType = B.ONLY_REPLY_TO_CHANNEL;
      }
      if (userFilledMessageListQuery) {
        Object.keys(userFilledMessageListQuery).forEach(function(key) {
          messageListParams_1[key] = userFilledMessageListQuery[key];
        });
      }
      if (replyType && (replyType === "QUOTE_REPLY" || replyType === "THREAD") || userFilledMessageListQuery) {
        logger.info("Channel useInitialMessagesFetch: Setup messageListParams", messageListParams_1);
        messagesDispatcher({
          type: MESSAGE_LIST_PARAMS_CHANGED,
          payload: messageListParams_1
        });
      }
      logger.info("Channel: Fetching messages", { currentGroupChannel, userFilledMessageListQuery });
      messagesDispatcher({
        type: FETCH_INITIAL_MESSAGES_START,
        payload: null
      });
      currentGroupChannel.getMessagesByTimestamp(initialTimeStamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams_1).then(function(messages) {
        messagesDispatcher({
          type: FETCH_INITIAL_MESSAGES_SUCCESS,
          payload: {
            currentGroupChannel,
            messages
          }
        });
      }).catch(function(error) {
        logger.error("Channel: Fetching messages failed", error);
        messagesDispatcher({
          type: FETCH_INITIAL_MESSAGES_FAILURE,
          payload: { currentGroupChannel }
        });
      }).finally(function() {
        if (!initialTimeStamp) {
          setTimeout(function() {
            return scrollIntoLast(0, scrollRef, setIsScrolled);
          }, SCROLL_BOTTOM_DELAY_FOR_FETCH);
        } else {
          setTimeout(function() {
            scrollToRenderedMessage(scrollRef, initialTimeStamp, setIsScrolled);
          }, 500);
        }
      });
    }
  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);
  (0, import_react2.useEffect)(function() {
    fetchMessages();
  }, [fetchMessages]);
  return fetchMessages;
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DPf4rz9k.js
var import_react3 = __toESM(require_react(), 1);
function useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle) {
  if (reconnectOnIdle === void 0) {
    reconnectOnIdle = true;
  }
  var _a = (0, import_react3.useState)(false), isTabHidden = _a[0], setIsTabHidden = _a[1];
  var wasOffline = !isOnline;
  (0, import_react3.useEffect)(function() {
    var handleVisibilityChange = function() {
      if (reconnectOnIdle) {
        setIsTabHidden(document.hidden);
      }
    };
    document.addEventListener("visibilitychange", handleVisibilityChange);
    return function() {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [reconnectOnIdle, document.hidden]);
  var shouldReconnect = wasOffline && !!currentGroupChannel && !isTabHidden;
  return { shouldReconnect };
}

// node_modules/@sendbird/uikit-react/chunks/bundle-D8esR1WH.js
var import_react4 = __toESM(require_react(), 1);
var getNicknamesMapFromMembers2 = function(members) {
  if (members === void 0) {
    members = [];
  }
  var nicknamesMap = /* @__PURE__ */ new Map();
  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {
    var _a = members[memberIndex], userId = _a.userId, nickname = _a.nickname;
    nicknamesMap.set(userId, nickname);
  }
  return nicknamesMap;
};
var getParentMessageFrom = function(message) {
  if (!message) {
    return null;
  }
  if (isParentMessage(message)) {
    return message;
  }
  if (isThreadMessage(message)) {
    return (message === null || message === void 0 ? void 0 : message.parentMessage) || null;
  }
  return null;
};
var isParentMessage = function(message) {
  return (message === null || message === void 0 ? void 0 : message.parentMessage) === null && typeof (message === null || message === void 0 ? void 0 : message.parentMessageId) === "number" && !(message === null || message === void 0 ? void 0 : message.parentMessageId);
};
var isThreadMessage = function(message) {
  return (message === null || message === void 0 ? void 0 : message.parentMessage) !== null && typeof (message === null || message === void 0 ? void 0 : message.parentMessageId) === "number" && (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0 && (message === null || message === void 0 ? void 0 : message.threadInfo) === null;
};
var isAboutSame2 = function(a, b, px) {
  return Math.abs(a - b) <= px;
};
var isEmpty3 = function(val) {
  return val === null || val === void 0;
};
function compareIds2(a, b) {
  if (isEmpty3(a) || isEmpty3(b)) {
    return false;
  }
  var aString = a.toString();
  var bString = b.toString();
  return aString === bString;
}
var scrollIntoLast2 = function(intialTry) {
  if (intialTry === void 0) {
    intialTry = 0;
  }
  var MAX_TRIES = 10;
  var currentTry = intialTry;
  if (currentTry > MAX_TRIES) {
    return;
  }
  try {
    var scrollDOM = document.querySelector(".sendbird-thread-ui--scroll");
    if (scrollDOM) {
      scrollDOM.scrollTop = scrollDOM.scrollHeight;
    }
  } catch (error) {
    setTimeout(function() {
      scrollIntoLast2(currentTry + 1);
    }, 500 * currentTry);
  }
};
var useSendMultipleFilesMessage = function(_a, _b) {
  var currentChannel = _a.currentChannel, onBeforeSendMultipleFilesMessage = _a.onBeforeSendMultipleFilesMessage, publishingModules = _a.publishingModules;
  var logger = _b.logger, pubSub = _b.pubSub, scrollRef = _b.scrollRef;
  var sendMessage = (0, import_react4.useCallback)(function(files, quoteMessage) {
    return new Promise(function(resolve, reject) {
      if (!currentChannel) {
        logger.warning("Channel: Sending MFm failed, because currentChannel is null.", { currentChannel });
        reject();
      }
      if (files.length <= 1) {
        logger.warning("Channel: Sending MFM failed, because there are no multiple files.", { files });
        reject();
      }
      var messageParams = {
        fileInfoList: files.map(function(file) {
          return {
            file,
            fileName: file.name,
            fileSize: file.size,
            mimeType: file.type
          };
        })
      };
      if (quoteMessage) {
        messageParams.isReplyToChannel = true;
        messageParams.parentMessageId = quoteMessage.messageId;
      }
      if (typeof onBeforeSendMultipleFilesMessage === "function") {
        messageParams = onBeforeSendMultipleFilesMessage(files, quoteMessage);
      }
      logger.info("Channel: Start sending MFM", { messageParams });
      try {
        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendMultipleFilesMessage(messageParams).onFileUploaded(function(requestId, index, uploadableFileInfo, error) {
          logger.info("Channel: onFileUploaded during sending MFM", {
            requestId,
            index,
            error,
            uploadableFileInfo
          });
          pubSub.publish(pubSubTopics.ON_FILE_INFO_UPLOADED, {
            response: {
              channelUrl: currentChannel.url,
              requestId,
              index,
              uploadableFileInfo,
              error
            },
            publishingModules
          });
        }).onPending(function(pendingMessage) {
          logger.info("Channel: in progress of sending MFM", { pendingMessage, fileInfoList: messageParams.fileInfoList });
          pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
            message: pendingMessage,
            channel: currentChannel,
            publishingModules
          });
          setTimeout(function() {
            if (scrollRef && shouldPubSubPublishToChannel(publishingModules)) {
              scrollIntoLast(0, scrollRef);
            }
            if (shouldPubSubPublishToThread(publishingModules)) {
              scrollIntoLast2(0);
            }
          }, SCROLL_BOTTOM_DELAY_FOR_SEND);
        }).onFailed(function(error, failedMessage) {
          logger.error("Channel: Sending MFM failed.", { error, failedMessage });
          pubSub.publish(pubSubTopics.SEND_MESSAGE_FAILED, {
            channel: currentChannel,
            message: failedMessage,
            publishingModules
          });
          reject(error);
        }).onSucceeded(function(succeededMessage) {
          logger.info("Channel: Sending voice message success!", { succeededMessage });
          pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {
            channel: currentChannel,
            message: succeededMessage,
            publishingModules
          });
          resolve(succeededMessage);
        });
      } catch (error) {
        logger.error("Channel: Sending MFM failed.", { error });
        reject(error);
      }
    });
  }, [
    currentChannel,
    onBeforeSendMultipleFilesMessage,
    publishingModules
  ]);
  return [sendMessage];
};

// node_modules/@sendbird/uikit-react/Channel/context.js
var initialState2 = {
  initialized: false,
  loading: true,
  allMessages: [],
  /**
   * localMessages: pending & failed messages
   */
  localMessages: [],
  currentGroupChannel: null,
  // for scrollup
  hasMorePrev: false,
  oldestMessageTimeStamp: 0,
  // for scroll down
  // onScrollDownCallback is added for navigation to different timestamps on messageSearch
  // hasMorePrev, onScrollCallback -> scroll up(default behavior)
  // hasMoreNext, onScrollDownCallback -> scroll down
  hasMoreNext: false,
  latestMessageTimeStamp: 0,
  emojiContainer: { emojiCategories: [], emojiHash: "" },
  /** @deprecated Please use `unreadSinceDate` instead. * */
  unreadSince: null,
  /**
   * unreadSinceDate is a date information about message unread.
   * It's used only for the {unreadSinceDate && <UnreadCount unreadSinceDate={unreadSinceDate} />}
   */
  unreadSinceDate: null,
  isInvalid: false,
  readStatus: null,
  messageListParams: null,
  typingMembers: []
};
var getOldestMessageTimeStamp = function(messages) {
  if (messages === void 0) {
    messages = [];
  }
  var oldestMessage = messages[0];
  return oldestMessage && oldestMessage.createdAt || null;
};
var getLatestMessageTimeStamp = function(messages) {
  if (messages === void 0) {
    messages = [];
  }
  var latestMessage = messages[messages.length - 1];
  return latestMessage && latestMessage.createdAt || null;
};
function hasReqId(message) {
  return "reqId" in message;
}
function channelReducer(state, action) {
  return K(action).with({ type: RESET_MESSAGES }, function() {
    return __assign(__assign({}, state), {
      // when user switches channel, if the previous channel `hasMorePrev`
      // the onScroll gets called twice, setting hasMorePrev false prevents this
      hasMorePrev: false,
      hasMoreNext: false,
      allMessages: [],
      localMessages: []
    });
  }).with({ type: FETCH_INITIAL_MESSAGES_START }, function() {
    return __assign(__assign({}, state), { loading: true, allMessages: state.allMessages.filter(function(m) {
      return isSendableMessage(m) ? m.sendingStatus !== W.SUCCEEDED : true;
    }), localMessages: [] });
  }).with({ type: FETCH_INITIAL_MESSAGES_SUCCESS }, function(action2) {
    var _a;
    var _b = action2.payload, currentGroupChannel = _b.currentGroupChannel, messages = _b.messages;
    if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_a = state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url))) {
      return state;
    }
    var oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);
    var latestMessageTimeStamp = getLatestMessageTimeStamp(messages);
    return __assign(__assign({}, state), { loading: false, initialized: true, hasMorePrev: true, hasMoreNext: true, oldestMessageTimeStamp, latestMessageTimeStamp, allMessages: __spreadArray([], messages, true) });
  }).with({ type: FETCH_PREV_MESSAGES_SUCCESS }, function(action2) {
    var _a, _b, _c, _d;
    var _e = action2.payload, currentGroupChannel = _e.currentGroupChannel, messages = _e.messages;
    if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_a = state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url))) {
      return state;
    }
    var hasMorePrev = ((_b = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _b !== void 0 ? _b : 0) >= ((_d = (_c = state === null || state === void 0 ? void 0 : state.messageListParams) === null || _c === void 0 ? void 0 : _c.prevResultSize) !== null && _d !== void 0 ? _d : PREV_RESULT_SIZE) + 1;
    var oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);
    var duplicatedMessageIds = [];
    var updatedOldMessages = state.allMessages.map(function(msg) {
      var duplicatedMessage = messages.find(function(_a2) {
        var messageId = _a2.messageId;
        return compareIds(messageId, msg.messageId);
      });
      if (!duplicatedMessage) {
        return msg;
      }
      duplicatedMessageIds.push(duplicatedMessage.messageId);
      return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;
    });
    var filteredNewMessages = duplicatedMessageIds.length > 0 ? messages.filter(function(msg) {
      return !duplicatedMessageIds.find(function(messageId) {
        return compareIds(messageId, msg.messageId);
      });
    }) : messages;
    return __assign(__assign({}, state), { hasMorePrev, oldestMessageTimeStamp, allMessages: __spreadArray(__spreadArray([], filteredNewMessages, true), updatedOldMessages, true) });
  }).with({ type: FETCH_NEXT_MESSAGES_SUCCESS }, function(action2) {
    var _a, _b, _c, _d;
    var _e = action2.payload, currentGroupChannel = _e.currentGroupChannel, messages = _e.messages;
    if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_a = state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url))) {
      return state;
    }
    var hasMoreNext = ((_b = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _b !== void 0 ? _b : 0) === ((_d = (_c = state === null || state === void 0 ? void 0 : state.messageListParams) === null || _c === void 0 ? void 0 : _c.nextResultSize) !== null && _d !== void 0 ? _d : NEXT_RESULT_SIZE) + 1;
    var latestMessageTimeStamp = getLatestMessageTimeStamp(messages);
    var sortedMessages = mergeAndSortMessages(state.allMessages, messages);
    return __assign(__assign({}, state), { hasMoreNext, latestMessageTimeStamp, allMessages: sortedMessages });
  }).with({
    type: S.union(FETCH_INITIAL_MESSAGES_FAILURE, FETCH_PREV_MESSAGES_FAILURE, FETCH_NEXT_MESSAGES_FAILURE)
  }, function(action2) {
    var _a;
    var currentGroupChannel = action2.payload.currentGroupChannel;
    if ((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) !== ((_a = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url))
      return state;
    var shouldInvalid = [FETCH_INITIAL_MESSAGES_FAILURE].includes(action2.type);
    return __assign(__assign({}, state), { loading: false, isInvalid: shouldInvalid, initialized: false, allMessages: [], hasMorePrev: false, hasMoreNext: false, oldestMessageTimeStamp: null, latestMessageTimeStamp: null });
  }).with({ type: SEND_MESSAGE_START }, function(action2) {
    return __assign(__assign({}, state), { localMessages: __spreadArray(__spreadArray([], state.localMessages, true), [action2.payload], false) });
  }).with({ type: SEND_MESSAGE_SUCCESS }, function(action2) {
    var message = action2.payload;
    var filteredMessages = state.allMessages.filter(function(m) {
      return !hasReqId(m) || (m === null || m === void 0 ? void 0 : m.reqId) !== (message === null || message === void 0 ? void 0 : message.reqId);
    });
    return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], filteredMessages, true), [message], false), localMessages: state.localMessages.filter(function(m) {
      return hasReqId(m) && (m === null || m === void 0 ? void 0 : m.reqId) !== (message === null || message === void 0 ? void 0 : message.reqId);
    }) });
  }).with({ type: SEND_MESSAGE_FAILURE }, function(action2) {
    action2.payload.failed = true;
    return __assign(__assign({}, state), { localMessages: state.localMessages.map(function(m) {
      return compareIds(hasReqId(m) && m.reqId, action2.payload.reqId) ? action2.payload : m;
    }) });
  }).with({ type: SET_CURRENT_CHANNEL }, function(action2) {
    return __assign(__assign({}, state), { currentGroupChannel: action2.payload, isInvalid: false });
  }).with({ type: SET_CHANNEL_INVALID }, function() {
    return __assign(__assign({}, state), { currentGroupChannel: null, allMessages: [], localMessages: [], isInvalid: true });
  }).with({ type: ON_MESSAGE_RECEIVED }, function(action2) {
    var _a, _b;
    var _c = action2.payload, channel = _c.channel, message = _c.message;
    var members = channel.members;
    var sender = message.sender;
    var currentGroupChannel = state.currentGroupChannel;
    var currentGroupChannelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;
    if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl)) {
      return state;
    }
    if (state.allMessages.some(function(msg) {
      return msg.messageId === message.messageId;
    })) {
      return state;
    }
    if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {
      return state;
    }
    if (message.isAdminMessage && message.isAdminMessage()) {
      return __assign(__assign({}, state), { allMessages: passUnsuccessfullMessages(state.allMessages, message) });
    }
    var senderMember = members === null || members === void 0 ? void 0 : members.find(function(m) {
      return (m === null || m === void 0 ? void 0 : m.userId) === (sender === null || sender === void 0 ? void 0 : sender.userId);
    });
    if ((senderMember === null || senderMember === void 0 ? void 0 : senderMember.profileUrl) !== (sender === null || sender === void 0 ? void 0 : sender.profileUrl) || (senderMember === null || senderMember === void 0 ? void 0 : senderMember.friendName) !== (sender === null || sender === void 0 ? void 0 : sender.friendName) || (senderMember === null || senderMember === void 0 ? void 0 : senderMember.nickname) !== (sender === null || sender === void 0 ? void 0 : sender.nickname)) {
      channel.members = members.map(function(member) {
        if (member.userId === sender.userId) {
          return sender;
        }
        return member;
      });
    }
    return __assign(__assign({}, state), { currentGroupChannel: channel, unreadSince: (_a = state.unreadSince) !== null && _a !== void 0 ? _a : format(/* @__PURE__ */ new Date(), "p MMM dd"), unreadSinceDate: (_b = state.unreadSinceDate) !== null && _b !== void 0 ? _b : /* @__PURE__ */ new Date(), allMessages: passUnsuccessfullMessages(state.allMessages, message) });
  }).with({ type: ON_MESSAGE_UPDATED }, function(action2) {
    var _a;
    var _b = action2.payload, channel = _b.channel, message = _b.message;
    var currentGroupChannelUrl = ((_a = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url) || "";
    if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl)) {
      return state;
    }
    if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {
      return __assign(__assign({}, state), { allMessages: state.allMessages.filter(function(m) {
        return !compareIds(m.messageId, message === null || message === void 0 ? void 0 : message.messageId);
      }) });
    }
    return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m) {
      if (compareIds(m.messageId, message.messageId)) {
        return message;
      }
      if (compareIds(m.parentMessageId, message.messageId)) {
        m.parentMessage = message;
      }
      return m;
    }) });
  }).with({ type: ON_MESSAGE_THREAD_INFO_UPDATED }, function(action2) {
    var _a;
    var _b = action2.payload, channel = _b.channel, event = _b.event;
    var channelUrl = event.channelUrl, threadInfo = event.threadInfo, targetMessageId = event.targetMessageId;
    var currentGroupChannelUrl = ((_a = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url) || "";
    if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl) || !compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
      return state;
    }
    return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m) {
      if (compareIds(m.messageId, targetMessageId)) {
        m.threadInfo = threadInfo;
      }
      return m;
    }) });
  }).with({ type: RESEND_MESSAGE_START }, function(action2) {
    return __assign(__assign({}, state), { localMessages: state.localMessages.map(function(m) {
      return compareIds(hasReqId(m) && m.reqId, action2.payload.reqId) ? action2.payload : m;
    }) });
  }).with({ type: MARK_AS_READ }, function(action2) {
    var _a, _b, _c;
    if (((_a = state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url) !== ((_c = (_b = action2.payload) === null || _b === void 0 ? void 0 : _b.channel) === null || _c === void 0 ? void 0 : _c.url)) {
      return state;
    }
    return __assign(__assign({}, state), { unreadSince: null, unreadSinceDate: null });
  }).with({ type: ON_MESSAGE_DELETED }, function(action2) {
    return __assign(__assign({}, state), { allMessages: state.allMessages.filter(function(m) {
      return !compareIds(m.messageId, action2.payload);
    }) });
  }).with({ type: ON_MESSAGE_DELETED_BY_REQ_ID }, function(action2) {
    return __assign(__assign({}, state), { localMessages: state.localMessages.filter(function(m) {
      return !compareIds(hasReqId(m) && m.reqId, action2.payload);
    }) });
  }).with({ type: SET_EMOJI_CONTAINER }, function(action2) {
    return __assign(__assign({}, state), { emojiContainer: action2.payload });
  }).with({ type: ON_REACTION_UPDATED }, function(action2) {
    return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m) {
      if (compareIds(m.messageId, action2.payload.messageId)) {
        if (m.applyReactionEvent && typeof m.applyReactionEvent === "function") {
          m.applyReactionEvent(action2.payload);
        }
        return m;
      }
      return m;
    }) });
  }).with({ type: MESSAGE_LIST_PARAMS_CHANGED }, function(action2) {
    return __assign(__assign({}, state), { messageListParams: action2.payload });
  }).with({ type: ON_FILE_INFO_UPLOADED }, function(action2) {
    var _a, _b;
    var _c = action2.payload, channelUrl = _c.channelUrl, requestId = _c.requestId, index = _c.index, uploadableFileInfo = _c.uploadableFileInfo, error = _c.error;
    if (!compareIds(channelUrl, (_a = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url)) {
      return state;
    }
    if (error)
      return state;
    var localMessages = state.localMessages;
    var messageToUpdate = localMessages.find(function(message) {
      return compareIds(hasReqId(message) && message.reqId, requestId);
    });
    var fileInfoList = (_b = messageToUpdate.messageParams) === null || _b === void 0 ? void 0 : _b.fileInfoList;
    if (Array.isArray(fileInfoList)) {
      fileInfoList[index] = uploadableFileInfo;
    }
    return __assign(__assign({}, state), { localMessages });
  }).with({ type: ON_TYPING_STATUS_UPDATED }, function(action2) {
    var _a;
    var _b = action2.payload, channel = _b.channel, typingMembers = _b.typingMembers;
    if (!compareIds(channel.url, (_a = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a === void 0 ? void 0 : _a.url)) {
      return state;
    }
    return __assign(__assign({}, state), { typingMembers });
  }).otherwise(function() {
    return state;
  });
}
var DELIVERY_RECEIPT2 = "delivery_receipt";
function useHandleChannelEvents(_a, _b) {
  var _c, _d, _e;
  var sdkInit = _a.sdkInit, currentGroupChannel = _a.currentGroupChannel, disableMarkAsRead = _a.disableMarkAsRead;
  var sdk = _b.sdk, logger = _b.logger, scrollRef = _b.scrollRef, setQuoteMessage = _b.setQuoteMessage, messagesDispatcher = _b.messagesDispatcher;
  var store = useSendbirdStateContext();
  var _f = store.config, markAsReadScheduler = _f.markAsReadScheduler, markAsDeliveredScheduler = _f.markAsDeliveredScheduler, disableMarkAsDelivered = _f.disableMarkAsDelivered;
  var canSetMarkAsDelivered = (_e = (_d = (_c = store.stores.sdkStore.sdk) === null || _c === void 0 ? void 0 : _c.appInfo) === null || _d === void 0 ? void 0 : _d.premiumFeatureList) === null || _e === void 0 ? void 0 : _e.find(function(feature) {
    return feature === DELIVERY_RECEIPT2;
  });
  (0, import_react5.useEffect)(function() {
    var _a2;
    var channelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;
    var channelHandlerId = uuidv4();
    if (channelUrl && sdkInit) {
      var channelHandler = {
        onMessageReceived: function(channel, message) {
          var _a3, _b2;
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            var scrollToEnd = false;
            try {
              var current = scrollRef.current;
              if (current) {
                scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight - 10;
              }
            } catch (error) {
            }
            logger.info("Channel | useHandleChannelEvents: onMessageReceived", message);
            messagesDispatcher({
              type: ON_MESSAGE_RECEIVED,
              payload: { channel, message }
            });
            if (scrollToEnd && ((_a3 = document.getElementById("sendbird-dropdown-portal")) === null || _a3 === void 0 ? void 0 : _a3.childElementCount) === 0 && ((_b2 = document.getElementById("sendbird-emoji-list-portal")) === null || _b2 === void 0 ? void 0 : _b2.childElementCount) === 0) {
              try {
                setTimeout(function() {
                  return scrollIntoLast(0, scrollRef);
                });
                if (!disableMarkAsRead) {
                  markAsReadScheduler.push(currentGroupChannel);
                }
                if (canSetMarkAsDelivered && !disableMarkAsDelivered) {
                  markAsDeliveredScheduler.push(currentGroupChannel);
                }
              } catch (error) {
                logger.warning("Channel | onMessageReceived | scroll to end failed");
              }
            }
          }
        },
        onUnreadMemberStatusUpdated: function(channel) {
          logger.info("Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated", channel);
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        // before(onDeliveryReceiptUpdated)
        onUndeliveredMemberStatusUpdated: function(channel) {
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onDeliveryReceiptUpdated", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onMessageUpdated: function(channel, message) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onMessageUpdated", message);
            messagesDispatcher({
              type: ON_MESSAGE_UPDATED,
              payload: { channel, message }
            });
          }
        },
        onThreadInfoUpdated: function(channel, threadInfoUpdateEvent) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onThreadInfoUpdated", { channel, threadInfoUpdateEvent });
            messagesDispatcher({
              type: ON_MESSAGE_THREAD_INFO_UPDATED,
              payload: { channel, event: threadInfoUpdateEvent }
            });
          }
        },
        onMessageDeleted: function(channel, messageId) {
          logger.info("Channel | useHandleChannelEvents: onMessageDeleted", { channel, messageId });
          setQuoteMessage(null);
          messagesDispatcher({
            type: ON_MESSAGE_DELETED,
            payload: messageId
          });
        },
        onReactionUpdated: function(channel, reactionEvent) {
          logger.info("Channel | useHandleChannelEvents: onReactionUpdated", { channel, reactionEvent });
          messagesDispatcher({
            type: ON_REACTION_UPDATED,
            payload: reactionEvent
          });
        },
        onChannelChanged: function(channel) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onChannelChanged", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onChannelFrozen: function(channel) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onChannelFrozen", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onChannelUnfrozen: function(channel) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onChannelUnFrozen", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserMuted: function(channel, user) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onUserMuted", { channel, user });
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserUnmuted: function(channel, user) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onUserUnmuted", { channel, user });
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserBanned: function(channel, user) {
          var _a3;
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl) && channel.isGroupChannel()) {
            logger.info("Channel | useHandleChannelEvents: onUserBanned", { channel, user });
            var isByMe = (user === null || user === void 0 ? void 0 : user.userId) === ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a3 === void 0 ? void 0 : _a3.userId);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: isByMe ? null : channel
            });
          }
        },
        onOperatorUpdated: function(channel, users) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onOperatorUpdated", { channel, users });
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserLeft: function(channel, user) {
          var _a3;
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onUserLeft", { channel, user });
            var isByMe = (user === null || user === void 0 ? void 0 : user.userId) === ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a3 === void 0 ? void 0 : _a3.userId);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: isByMe ? null : channel
            });
          }
        },
        onTypingStatusUpdated: function(channel) {
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | onTypingStatusUpdated", { channel });
            var typingMembers = channel.getTypingUsers();
            messagesDispatcher({
              type: ON_TYPING_STATUS_UPDATED,
              payload: {
                channel,
                typingMembers
              }
            });
          }
        }
      };
      logger.info("Channel | useHandleChannelEvents: Setup event handler", { channelHandlerId, channelHandler });
      (_a2 = sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.addGroupChannelHandler(channelHandlerId, new Ye(channelHandler));
    }
    return function() {
      var _a3;
      if ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler) {
        logger.info("Channel | useHandleChannelEvents: Removing message reciver handler", channelHandlerId);
        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);
      } else if (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) {
        logger.error("Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler");
      }
    };
  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url, sdkInit]);
}
function useGetChannel(_a, _b) {
  var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit, disableMarkAsRead = _a.disableMarkAsRead;
  var messagesDispatcher = _b.messagesDispatcher, sdk = _b.sdk, logger = _b.logger, markAsReadScheduler = _b.markAsReadScheduler;
  (0, import_react5.useEffect)(function() {
    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {
      logger.info("Channel | useSetChannel fetching channel", channelUrl);
      sdk.groupChannel.getChannel(channelUrl).then(function(groupChannel) {
        logger.info("Channel | useSetChannel fetched channel", groupChannel);
        messagesDispatcher({
          type: SET_CURRENT_CHANNEL,
          payload: groupChannel
        });
        logger.info("Channel: Mark as read", groupChannel);
        if (!disableMarkAsRead) {
          markAsReadScheduler.push(groupChannel);
        }
      }).catch(function(e) {
        logger.warning("Channel | useSetChannel fetch channel failed", { channelUrl, e });
        messagesDispatcher({
          type: SET_CHANNEL_INVALID
        });
      });
      sdk.getAllEmoji().then(function(emojiContainer_) {
        logger.info("Channel: Getting emojis success", emojiContainer_);
        messagesDispatcher({
          type: SET_EMOJI_CONTAINER,
          payload: emojiContainer_
        });
      }).catch(function(err) {
        logger.error("Channel: Getting emojis failed", err);
      });
    }
  }, [channelUrl, sdkInit]);
}
function useHandleReconnect(_a, _b) {
  var isOnline = _a.isOnline, replyType = _a.replyType, disableMarkAsRead = _a.disableMarkAsRead, reconnectOnIdle = _a.reconnectOnIdle;
  var logger = _b.logger, sdk = _b.sdk, scrollRef = _b.scrollRef, currentGroupChannel = _b.currentGroupChannel, messagesDispatcher = _b.messagesDispatcher, markAsReadScheduler = _b.markAsReadScheduler, userFilledMessageListQuery = _b.userFilledMessageListQuery;
  var shouldReconnect = useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle).shouldReconnect;
  (0, import_react5.useEffect)(function() {
    return function() {
      var _a2, _b2, _c;
      if (shouldReconnect) {
        logger.info("Refreshing conversation state");
        var isReactionEnabled = ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.useReaction) || false;
        var messageListParams_1 = {
          prevResultSize: PREV_RESULT_SIZE,
          isInclusive: true,
          includeReactions: isReactionEnabled,
          includeMetaArray: true,
          nextResultSize: NEXT_RESULT_SIZE
        };
        if (replyType && replyType === "QUOTE_REPLY") {
          messageListParams_1.includeThreadInfo = true;
          messageListParams_1.includeParentMessageInfo = true;
          messageListParams_1.replyType = B.ONLY_REPLY_TO_CHANNEL;
        }
        if (userFilledMessageListQuery) {
          Object.keys(userFilledMessageListQuery).forEach(function(key) {
            messageListParams_1[key] = userFilledMessageListQuery[key];
          });
        }
        logger.info("Channel: Fetching messages", { currentGroupChannel, userFilledMessageListQuery });
        messagesDispatcher({
          type: FETCH_INITIAL_MESSAGES_START,
          payload: null
        });
        (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.getChannel((_c = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) !== null && _c !== void 0 ? _c : "").then(function(groupChannel) {
          var lastMessageTime = (/* @__PURE__ */ new Date()).getTime();
          groupChannel.getMessagesByTimestamp(lastMessageTime, messageListParams_1).then(function(messages) {
            messagesDispatcher({
              type: FETCH_INITIAL_MESSAGES_SUCCESS,
              payload: {
                currentGroupChannel: groupChannel,
                messages
              }
            });
            setTimeout(function() {
              return scrollIntoLast(0, scrollRef);
            }, SCROLL_BOTTOM_DELAY_FOR_FETCH);
          }).catch(function(error) {
            logger.error("Channel: Fetching messages failed", error);
            messagesDispatcher({
              type: FETCH_INITIAL_MESSAGES_FAILURE,
              payload: { currentGroupChannel: groupChannel }
            });
          });
          if (!disableMarkAsRead) {
            markAsReadScheduler.push(groupChannel);
          }
        });
      }
    };
  }, [shouldReconnect, replyType]);
}
function useScrollCallback(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, oldestMessageTimeStamp = _a.oldestMessageTimeStamp, userFilledMessageListQuery = _a.userFilledMessageListQuery, replyType = _a.replyType;
  var hasMorePrev = _b.hasMorePrev, logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, sdk = _b.sdk;
  return (0, import_react5.useCallback)(function(callback) {
    var _a2, _b2;
    if (!hasMorePrev) {
      return;
    }
    var messageListParams = {
      prevResultSize: PREV_RESULT_SIZE,
      isInclusive: true,
      includeMetaArray: true,
      includeReactions: (_b2 = (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.useReaction) !== null && _b2 !== void 0 ? _b2 : false
    };
    if (replyType === "QUOTE_REPLY" || replyType === "THREAD") {
      messageListParams.includeThreadInfo = true;
      messageListParams.includeParentMessageInfo = true;
      messageListParams.replyType = B.ONLY_REPLY_TO_CHANNEL;
    }
    if (userFilledMessageListQuery) {
      Object.keys(userFilledMessageListQuery).forEach(function(key) {
        messageListParams[key] = userFilledMessageListQuery[key];
      });
    }
    logger.info("Channel: Fetching messages", {
      currentGroupChannel,
      userFilledMessageListQuery
    });
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.getMessagesByTimestamp(oldestMessageTimeStamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams).then(function(messages) {
      messagesDispatcher({
        type: FETCH_PREV_MESSAGES_SUCCESS,
        payload: { currentGroupChannel, messages }
      });
      if (callback)
        setTimeout(function() {
          return callback();
        });
    }).catch(function() {
      messagesDispatcher({
        type: FETCH_PREV_MESSAGES_FAILURE,
        payload: { currentGroupChannel }
      });
    });
  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);
}
function useScrollDownCallback(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, latestMessageTimeStamp = _a.latestMessageTimeStamp, userFilledMessageListQuery = _a.userFilledMessageListQuery, hasMoreNext = _a.hasMoreNext, replyType = _a.replyType;
  var logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, sdk = _b.sdk;
  return (0, import_react5.useCallback)(function(cb) {
    var _a2, _b2;
    if (!hasMoreNext) {
      return;
    }
    var isReactionEnabled = (_b2 = (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.useReaction) !== null && _b2 !== void 0 ? _b2 : false;
    var messageListParams = {
      nextResultSize: NEXT_RESULT_SIZE,
      isInclusive: true,
      includeReactions: isReactionEnabled,
      includeMetaArray: true
    };
    if (replyType && (replyType === "QUOTE_REPLY" || replyType === "THREAD")) {
      messageListParams.includeThreadInfo = true;
      messageListParams.includeParentMessageInfo = true;
      messageListParams.replyType = B.ONLY_REPLY_TO_CHANNEL;
    }
    if (userFilledMessageListQuery) {
      Object.keys(userFilledMessageListQuery).forEach(function(key) {
        messageListParams[key] = userFilledMessageListQuery[key];
      });
    }
    logger.info("Channel: Fetching later messages", { currentGroupChannel, userFilledMessageListQuery });
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.getMessagesByTimestamp(latestMessageTimeStamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams).then(function(messages) {
      messagesDispatcher({
        type: FETCH_NEXT_MESSAGES_SUCCESS,
        payload: { currentGroupChannel, messages }
      });
      setTimeout(function() {
        return cb([messages, null]);
      });
    }).catch(function(error) {
      logger.error("Channel: Fetching later messages failed", error);
      messagesDispatcher({
        type: FETCH_NEXT_MESSAGES_FAILURE,
        payload: { currentGroupChannel }
      });
      setTimeout(function() {
        return cb([null, error]);
      });
    });
  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);
}
function useDeleteMessageCallback(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, messagesDispatcher = _a.messagesDispatcher;
  var logger = _b.logger;
  return (0, import_react5.useCallback)(function(message) {
    logger.info("Channel | useDeleteMessageCallback: Deleting message", message);
    var sendingStatus = isSendableMessage(message) ? message.sendingStatus : void 0;
    return new Promise(function(resolve, reject) {
      logger.info("Channel | useDeleteMessageCallback: Deleting message requestState:", sendingStatus);
      if ((sendingStatus === W.FAILED || sendingStatus === W.PENDING) && "reqId" in message) {
        logger.info("Channel | useDeleteMessageCallback: Deleted message from local:", message);
        messagesDispatcher({
          type: ON_MESSAGE_DELETED_BY_REQ_ID,
          payload: message.reqId
        });
        resolve();
      } else {
        logger.info("Channel | useDeleteMessageCallback: Deleting message from remote:", sendingStatus);
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.deleteMessage(message).then(function() {
          logger.info("Channel | useDeleteMessageCallback: Deleting message success!", message);
          messagesDispatcher({
            type: ON_MESSAGE_DELETED,
            payload: message.messageId
          });
          resolve();
        }).catch(function(err) {
          logger.warning("Channel | useDeleteMessageCallback: Deleting message failed!", err);
          reject(err);
        });
      }
    });
  }, [currentGroupChannel, messagesDispatcher]);
}
function useUpdateMessageCallback(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, messagesDispatcher = _a.messagesDispatcher, onBeforeUpdateUserMessage = _a.onBeforeUpdateUserMessage, isMentionEnabled = _a.isMentionEnabled;
  var logger = _b.logger, pubSub = _b.pubSub;
  return (0, import_react5.useCallback)(function(props, callback) {
    var messageId = props.messageId, message = props.message, mentionedUsers = props.mentionedUsers, mentionTemplate = props.mentionTemplate;
    var createParamsDefault = function(message2) {
      var params2 = {
        message: message2
      };
      if (isMentionEnabled && mentionedUsers && mentionedUsers.length > 0) {
        params2.mentionedUsers = mentionedUsers;
      }
      if (isMentionEnabled && mentionTemplate) {
        params2.mentionedMessageTemplate = mentionTemplate;
      } else {
        params2.mentionedMessageTemplate = message2;
      }
      return params2;
    };
    var shouldCreateCustomParams = onBeforeUpdateUserMessage && typeof onBeforeUpdateUserMessage === "function";
    if (shouldCreateCustomParams) {
      logger.info("Channel: creating params using onBeforeUpdateUserMessage", onBeforeUpdateUserMessage);
    }
    var params = shouldCreateCustomParams ? onBeforeUpdateUserMessage(message) : createParamsDefault(message);
    logger.info("Channel: Updating message!", params);
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.updateUserMessage(messageId, params).then(function(msg) {
      if (callback) {
        callback(null, msg);
      }
      logger.info("Channel: Updating message success!", msg);
      messagesDispatcher({
        type: ON_MESSAGE_UPDATED,
        payload: {
          channel: currentGroupChannel,
          message: msg
        }
      });
      pubSub.publish(pubSubTopics.UPDATE_USER_MESSAGE, {
        message: msg,
        channel: currentGroupChannel,
        publishingModules: [PublishingModuleType.CHANNEL]
      });
    }).catch(function(err) {
      if (callback) {
        callback(err, null);
      }
    });
  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);
}
function useResendMessageCallback(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, messagesDispatcher = _a.messagesDispatcher;
  var logger = _b.logger, pubSub = _b.pubSub;
  return (0, import_react5.useCallback)(function(failedMessage) {
    logger.info("Channel: Resending message has started", failedMessage);
    if (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isResendable) {
      if (failedMessage.isUserMessage()) {
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.resendMessage(failedMessage).onPending(function(message) {
          logger.info("Channel: Resending message start!", message);
          messagesDispatcher({
            type: RESEND_MESSAGE_START,
            payload: message
          });
        }).onSucceeded(function(message) {
          logger.info("Channel: Resending message success!", message);
          messagesDispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
        }).onFailed(function(e, message) {
          logger.warning("Channel: Resending message failed!", e);
          messagesDispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        });
      } else if (failedMessage.isFileMessage()) {
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.resendMessage(failedMessage).onPending(function(message) {
          logger.info("Channel: Resending file message start!", message);
          messagesDispatcher({
            type: RESEND_MESSAGE_START,
            payload: message
          });
        }).onSucceeded(function(message) {
          logger.info("Channel: Resending file message success!", message);
          messagesDispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
        }).onFailed(function(e, message) {
          logger.warning("Channel: Resending file message failed!", e);
          messagesDispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        });
      } else if (failedMessage.isMultipleFilesMessage()) {
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.resendMessage(failedMessage).onPending(function(message) {
          logger.info("Channel: Resending multiple files message start!", message);
          messagesDispatcher({
            type: RESEND_MESSAGE_START,
            payload: message
          });
        }).onFileUploaded(function(requestId, index, uploadableFileInfo, error) {
          var _a2;
          logger.info("Channel: Resending multiple files message file uploaded!", {
            requestId,
            index,
            error,
            uploadableFileInfo
          });
          pubSub.publish(pubSubTopics.ON_FILE_INFO_UPLOADED, {
            response: {
              channelUrl: (_a2 = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) !== null && _a2 !== void 0 ? _a2 : "",
              requestId,
              index,
              uploadableFileInfo,
              error
            },
            publishingModules: [PublishingModuleType.CHANNEL]
          });
        }).onSucceeded(function(message) {
          logger.info("Channel: Resending multiple files message success!", message);
          messagesDispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
        }).onFailed(function(e, message) {
          logger.warning("Channel: Resending multiple files message failed!", e);
          messagesDispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        });
      }
    } else {
      logger.error("Message is not resendable", failedMessage);
    }
  }, [currentGroupChannel, messagesDispatcher]);
}
function useSendMessageCallback(_a, _b) {
  var isMentionEnabled = _a.isMentionEnabled, currentGroupChannel = _a.currentGroupChannel, onBeforeSendUserMessage = _a.onBeforeSendUserMessage;
  var logger = _b.logger, pubSub = _b.pubSub, scrollRef = _b.scrollRef, messagesDispatcher = _b.messagesDispatcher;
  var messageInputRef = (0, import_react5.useRef)(null);
  var sendMessage = (0, import_react5.useCallback)(function(_a2) {
    var quoteMessage = _a2.quoteMessage, message = _a2.message, mentionTemplate = _a2.mentionTemplate, mentionedUsers = _a2.mentionedUsers;
    var createParamsDefault = function() {
      var params2 = {
        message
      };
      if (isMentionEnabled && mentionedUsers && mentionedUsers.length > 0) {
        params2.mentionedUsers = mentionedUsers;
      }
      if (isMentionEnabled && mentionTemplate && mentionedUsers && mentionedUsers.length > 0) {
        params2.mentionedMessageTemplate = mentionTemplate;
      }
      if (quoteMessage) {
        params2.isReplyToChannel = true;
        params2.parentMessageId = quoteMessage.messageId;
      }
      return params2;
    };
    var shouldCreateCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === "function";
    if (shouldCreateCustomParams) {
      logger.info("Channel: creating params using onBeforeSendUserMessage", onBeforeSendUserMessage);
    }
    var params = shouldCreateCustomParams ? onBeforeSendUserMessage(message, quoteMessage) : createParamsDefault();
    logger.info("Channel: Sending message has started", params);
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.sendUserMessage(params).onPending(function(pendingMsg) {
      pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
        /* pubSub is used instead of messagesDispatcher
          to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
        message: pendingMsg,
        channel: currentGroupChannel,
        publishingModules: [PublishingModuleType.CHANNEL]
      });
      setTimeout(function() {
        return scrollIntoLast(0, scrollRef);
      }, SCROLL_BOTTOM_DELAY_FOR_SEND);
    }).onFailed(function(err, msg) {
      logger.warning("Channel: Sending message failed!", { message: msg, error: err });
      messagesDispatcher({
        type: SEND_MESSAGE_FAILURE,
        payload: msg
      });
    }).onSucceeded(function(msg) {
      logger.info("Channel: Sending message success!", msg);
      messagesDispatcher({
        type: SEND_MESSAGE_SUCCESS,
        payload: msg
      });
    });
  }, [currentGroupChannel, onBeforeSendUserMessage]);
  return [messageInputRef, sendMessage];
}
function useSendFileMessageCallback(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, onBeforeSendFileMessage = _a.onBeforeSendFileMessage, imageCompression = _a.imageCompression;
  var logger = _b.logger, pubSub = _b.pubSub, scrollRef = _b.scrollRef, messagesDispatcher = _b.messagesDispatcher;
  var sendMessage = (0, import_react5.useCallback)(function(compressedFile, quoteMessage) {
    return new Promise(function(resolve, reject) {
      var params = onBeforeSendFileMessage === null || onBeforeSendFileMessage === void 0 ? void 0 : onBeforeSendFileMessage(compressedFile, quoteMessage);
      if (!params) {
        params = { file: compressedFile };
        if (quoteMessage) {
          params.isReplyToChannel = true;
          params.parentMessageId = quoteMessage.messageId;
        }
      }
      logger.info("Channel: Uploading file message start!", params);
      currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.sendFileMessage(params).onPending(function(pendingMessage) {
        pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
          /* pubSub is used instead of messagesDispatcher
            to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
          // TODO: remove data pollution
          message: __assign(__assign({}, pendingMessage), {
            url: URL.createObjectURL(compressedFile),
            // pending thumbnail message seems to be failed
            requestState: "pending",
            isUserMessage: pendingMessage.isUserMessage,
            isFileMessage: pendingMessage.isFileMessage,
            isAdminMessage: pendingMessage.isAdminMessage,
            isMultipleFilesMessage: pendingMessage.isMultipleFilesMessage
          }),
          channel: currentGroupChannel,
          publishingModules: [PublishingModuleType.CHANNEL]
        });
        setTimeout(function() {
          return scrollIntoLast(0, scrollRef);
        }, SCROLL_BOTTOM_DELAY_FOR_SEND);
      }).onFailed(function(err, failedMessage) {
        logger.error("Channel: Sending file message failed!", { failedMessage, err });
        failedMessage.localUrl = URL.createObjectURL(compressedFile);
        failedMessage.file = compressedFile;
        messagesDispatcher({
          type: SEND_MESSAGE_FAILURE,
          payload: failedMessage
        });
        reject(err);
      }).onSucceeded(function(succeededMessage) {
        logger.info("Channel: Sending file message success!", succeededMessage);
        messagesDispatcher({
          type: SEND_MESSAGE_SUCCESS,
          payload: succeededMessage
        });
        resolve(succeededMessage);
      });
    });
  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);
  return [sendMessage];
}
function deactivateClick(scrollRef) {
  var element = scrollRef.current;
  var parentNode = element === null || element === void 0 ? void 0 : element.parentNode;
  if (element && parentNode) {
    element.style.pointerEvents = "none";
    parentNode.style.cursor = "wait";
  }
}
function activateClick(scrollRef) {
  var element = scrollRef.current;
  var parentNode = element === null || element === void 0 ? void 0 : element.parentNode;
  if (element && parentNode) {
    element.style.pointerEvents = "auto";
    parentNode.style.cursor = "auto";
  }
}
function useScrollToMessage(_a, _b) {
  var setInitialTimeStamp = _a.setInitialTimeStamp, setAnimatedMessageId = _a.setAnimatedMessageId, allMessages = _a.allMessages, scrollRef = _a.scrollRef;
  var logger = _b.logger;
  return (0, import_react5.useCallback)(function(createdAt, messageId) {
    var isPresent = allMessages.find(function(m) {
      return m.messageId === messageId;
    });
    setAnimatedMessageId(null);
    setTimeout(function() {
      try {
        logger.info("Channel: scroll to message - disabling mouse events");
        deactivateClick(scrollRef);
        if (isPresent) {
          logger.info("Channel: scroll to message - message is present");
          setAnimatedMessageId(messageId);
          scrollToRenderedMessage(scrollRef, createdAt);
        } else {
          logger.info("Channel: scroll to message - fetching older messages");
          setInitialTimeStamp(null);
          setInitialTimeStamp(createdAt);
          setAnimatedMessageId(messageId);
        }
      } finally {
        logger.info("Channel: scroll to message - enabled mouse events");
        activateClick(scrollRef);
      }
    });
  }, [
    setInitialTimeStamp,
    setAnimatedMessageId,
    allMessages
  ]);
}
var useSendVoiceMessageCallback = function(_a, _b) {
  var currentGroupChannel = _a.currentGroupChannel, onBeforeSendVoiceMessage = _a.onBeforeSendVoiceMessage;
  var logger = _b.logger, pubSub = _b.pubSub, scrollRef = _b.scrollRef, messagesDispatcher = _b.messagesDispatcher;
  var sendMessage = (0, import_react5.useCallback)(function(file, duration, quoteMessage) {
    return new Promise(function(resolve, reject) {
      if (!currentGroupChannel) {
        return;
      }
      var messageParams = onBeforeSendVoiceMessage && typeof onBeforeSendVoiceMessage === "function" ? onBeforeSendVoiceMessage(file, quoteMessage) : {
        file,
        fileName: VOICE_MESSAGE_FILE_NAME,
        mimeType: VOICE_MESSAGE_MIME_TYPE,
        metaArrays: [
          new je({
            key: META_ARRAY_VOICE_DURATION_KEY,
            value: ["".concat(duration)]
          }),
          new je({
            key: META_ARRAY_MESSAGE_TYPE_KEY,
            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE]
          })
        ]
      };
      if (quoteMessage) {
        messageParams.isReplyToChannel = true;
        messageParams.parentMessageId = quoteMessage.messageId;
      }
      logger.info("Channel: Start sending voice message", messageParams);
      currentGroupChannel.sendFileMessage(messageParams).onPending(function(pendingMessage) {
        pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
          /* pubSub is used instead of messagesDispatcher
            to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
          message: pendingMessage,
          channel: currentGroupChannel,
          publishingModules: [PublishingModuleType.CHANNEL]
        });
        setTimeout(function() {
          return scrollIntoLast(0, scrollRef);
        }, SCROLL_BOTTOM_DELAY_FOR_SEND);
      }).onFailed(function(err, failedMessage) {
        logger.error("Channel: Sending voice message failed!", { failedMessage, err });
        messagesDispatcher({
          type: SEND_MESSAGE_FAILURE,
          payload: failedMessage
        });
        reject(err);
      }).onSucceeded(function(succeededMessage) {
        logger.info("Channel: Sending voice message success!", succeededMessage);
        messagesDispatcher({
          type: SEND_MESSAGE_SUCCESS,
          payload: succeededMessage
        });
        resolve(succeededMessage);
      });
    });
  }, [
    currentGroupChannel,
    onBeforeSendVoiceMessage
  ]);
  return [sendMessage];
};
var useHandleChannelPubsubEvents = function(_a) {
  var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit, pubSub = _a.pubSub, dispatcher = _a.dispatcher, scrollRef = _a.scrollRef;
  (0, import_react5.useEffect)(function() {
    var subscriber = /* @__PURE__ */ new Map();
    if (pubSub === null || pubSub === void 0 ? void 0 : pubSub.subscribe) {
      subscriber.set(PUBSUB_TOPICS.SEND_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_USER_MESSAGE, function(props) {
        var channel = props.channel, message = props.message;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          dispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
          setTimeout(function() {
            return scrollIntoLast(0, scrollRef);
          }, SCROLL_BOTTOM_DELAY_FOR_SEND);
        }
      }));
      subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_START, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_START, function(props) {
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url) && shouldPubSubPublishToChannel(publishingModules)) {
          dispatcher({
            type: SEND_MESSAGE_START,
            payload: message
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, pubSub.subscribe(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, function(props) {
        var response = props.response, publishingModules = props.publishingModules;
        if (channelUrl === response.channelUrl && shouldPubSubPublishToChannel(publishingModules)) {
          dispatcher({
            type: ON_FILE_INFO_UPLOADED,
            payload: response
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_FAILED, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_FAILED, function(props) {
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url) && shouldPubSubPublishToChannel(publishingModules)) {
          dispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.SEND_FILE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_FILE_MESSAGE, function(props) {
        var channel = props.channel, message = props.message;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          dispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
          setTimeout(function() {
            return scrollIntoLast(0, scrollRef);
          }, SCROLL_BOTTOM_DELAY_FOR_SEND);
        }
      }));
      subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, function(props) {
        var channel = props.channel, message = props.message, fromSelector = props.fromSelector;
        if (fromSelector && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url) && channel.isGroupChannel()) {
          dispatcher({
            type: ON_MESSAGE_UPDATED,
            payload: { channel, message }
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.DELETE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.DELETE_MESSAGE, function(props) {
        var channel = props.channel, messageId = props.messageId;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          dispatcher({
            type: ON_MESSAGE_DELETED,
            payload: messageId
          });
        }
      }));
    }
    return function() {
      subscriber.forEach(function(s) {
        try {
          s.remove();
        } catch (_a2) {
        }
      });
    };
  }, [
    channelUrl,
    sdkInit
  ]);
};
var ChannelContext = import_react5.default.createContext(null);
var ChannelProvider = function(props) {
  var _a, _b, _c, _d, _e, _f, _g;
  var channelUrl = props.channelUrl, children = props.children, isReactionEnabled = props.isReactionEnabled, _h = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _h === void 0 ? true : _h, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, showSearchIcon = props.showSearchIcon, animatedMessage = props.animatedMessage, highlightedMessage = props.highlightedMessage, startingPoint = props.startingPoint, onBeforeSendUserMessage = props.onBeforeSendUserMessage, onBeforeSendFileMessage = props.onBeforeSendFileMessage, onBeforeUpdateUserMessage = props.onBeforeUpdateUserMessage, onBeforeSendVoiceMessage = props.onBeforeSendVoiceMessage, onBeforeSendMultipleFilesMessage = props.onBeforeSendMultipleFilesMessage, onChatHeaderActionClick = props.onChatHeaderActionClick, onSearchClick = props.onSearchClick, onBackClick = props.onBackClick, threadReplySelectType = props.threadReplySelectType, queries = props.queries, filterMessageList = props.filterMessageList, _j = props.disableMarkAsRead, disableMarkAsRead = _j === void 0 ? false : _j, onReplyInThread = props.onReplyInThread, onQuoteMessageClick = props.onQuoteMessageClick, onMessageAnimated = props.onMessageAnimated, onMessageHighlighted = props.onMessageHighlighted, _k = props.scrollBehavior, scrollBehavior = _k === void 0 ? "auto" : _k, _l = props.reconnectOnIdle, reconnectOnIdle = _l === void 0 ? true : _l;
  var globalStore = useSendbirdStateContext();
  var config = globalStore.config;
  var replyType = (_a = props.replyType) !== null && _a !== void 0 ? _a : getCaseResolvedReplyType(config.groupChannel.replyType).upperCase;
  var pubSub = config.pubSub, logger = config.logger, userId = config.userId, isOnline = config.isOnline, imageCompression = config.imageCompression, onUserProfileMessage = config.onUserProfileMessage, markAsReadScheduler = config.markAsReadScheduler, groupChannel = config.groupChannel, htmlTextDirection = config.htmlTextDirection, forceLeftToRightMessageLayout = config.forceLeftToRightMessageLayout;
  var sdk = (_c = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var sdkInit = (_e = (_d = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _d === void 0 ? void 0 : _d.sdkStore) === null || _e === void 0 ? void 0 : _e.initialized;
  var globalConfigs = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config;
  var _m = (0, import_react5.useState)(startingPoint), initialTimeStamp = _m[0], setInitialTimeStamp = _m[1];
  (0, import_react5.useEffect)(function() {
    setInitialTimeStamp(startingPoint);
  }, [startingPoint, channelUrl]);
  var _o = (0, import_react5.useState)(null), animatedMessageId = _o[0], setAnimatedMessageId = _o[1];
  var _p = (0, import_react5.useState)(highlightedMessage), highLightedMessageId = _p[0], setHighLightedMessageId = _p[1];
  (0, import_react5.useEffect)(function() {
    setHighLightedMessageId(highlightedMessage);
  }, [highlightedMessage]);
  var userFilledMessageListQuery = queries === null || queries === void 0 ? void 0 : queries.messageListParams;
  var _q = (0, import_react5.useState)(null), quoteMessage = _q[0], setQuoteMessage = _q[1];
  var _r = (0, import_react5.useState)(false), isScrolled = _r[0], setIsScrolled = _r[1];
  var _s = (0, import_react5.useReducer)(channelReducer, initialState2), messagesStore = _s[0], messagesDispatcher = _s[1];
  var scrollRef = (0, import_react5.useRef)(null);
  var isMentionEnabled = groupChannel.enableMention;
  var allMessages = messagesStore.allMessages, localMessages = messagesStore.localMessages, loading = messagesStore.loading, initialized = messagesStore.initialized, unreadSince = messagesStore.unreadSince, unreadSinceDate = messagesStore.unreadSinceDate, isInvalid = messagesStore.isInvalid, currentGroupChannel = messagesStore.currentGroupChannel, hasMorePrev = messagesStore.hasMorePrev, oldestMessageTimeStamp = messagesStore.oldestMessageTimeStamp, hasMoreNext = messagesStore.hasMoreNext, latestMessageTimeStamp = messagesStore.latestMessageTimeStamp, emojiContainer = messagesStore.emojiContainer, readStatus = messagesStore.readStatus, typingMembers = messagesStore.typingMembers;
  var usingReaction = getIsReactionEnabled({
    channel: currentGroupChannel,
    config,
    moduleLevel: isReactionEnabled
  });
  var emojiAllMap = (0, import_react5.useMemo)(function() {
    return usingReaction ? getAllEmojisMapFromEmojiContainer(emojiContainer) : /* @__PURE__ */ new Map();
  }, [emojiContainer]);
  var nicknamesMap = (0, import_react5.useMemo)(function() {
    return usingReaction && currentGroupChannel ? getNicknamesMapFromMembers(currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members) : /* @__PURE__ */ new Map();
  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members]);
  (0, import_react5.useEffect)(function() {
    if (animatedMessage) {
      setAnimatedMessageId(animatedMessage);
    }
  }, [animatedMessage]);
  var onScrollCallback = useScrollCallback({
    currentGroupChannel,
    oldestMessageTimeStamp,
    userFilledMessageListQuery,
    replyType
  }, {
    hasMorePrev,
    logger,
    messagesDispatcher,
    sdk
  });
  var scrollToMessage = useScrollToMessage({
    setInitialTimeStamp,
    setAnimatedMessageId,
    allMessages,
    scrollRef
  }, { logger });
  var onScrollDownCallback = useScrollDownCallback({
    currentGroupChannel,
    latestMessageTimeStamp,
    userFilledMessageListQuery,
    hasMoreNext,
    replyType
  }, {
    logger,
    messagesDispatcher,
    sdk
  });
  var toggleReaction = useToggleReactionCallback(currentGroupChannel, logger);
  useGetChannel({ channelUrl, sdkInit, disableMarkAsRead }, { messagesDispatcher, sdk, logger, markAsReadScheduler });
  (0, import_react5.useEffect)(function() {
    setQuoteMessage(null);
  }, [channelUrl]);
  useHandleChannelEvents({
    currentGroupChannel,
    sdkInit,
    currentUserId: userId,
    disableMarkAsRead
  }, {
    messagesDispatcher,
    sdk,
    logger,
    scrollRef,
    setQuoteMessage
  });
  useInitialMessagesFetch({
    currentGroupChannel,
    userFilledMessageListQuery,
    initialTimeStamp,
    replyType,
    setIsScrolled
  }, {
    logger,
    scrollRef,
    messagesDispatcher
  });
  useHandleChannelPubsubEvents({
    channelUrl,
    sdkInit,
    pubSub,
    dispatcher: messagesDispatcher,
    scrollRef
  });
  useHandleReconnect({ isOnline, replyType, disableMarkAsRead, reconnectOnIdle }, {
    logger,
    sdk,
    scrollRef,
    currentGroupChannel,
    messagesDispatcher,
    userFilledMessageListQuery,
    markAsReadScheduler
  });
  useMessageLayoutDirection(htmlTextDirection, forceLeftToRightMessageLayout, loading);
  var deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger });
  var updateMessage = useUpdateMessageCallback({ currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled }, { logger, pubSub });
  var resendMessage = useResendMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger, pubSub });
  var _t = useSendMessageCallback({
    currentGroupChannel,
    isMentionEnabled,
    onBeforeSendUserMessage
  }, {
    logger,
    pubSub,
    scrollRef,
    messagesDispatcher
  }), messageInputRef = _t[0], sendMessage = _t[1];
  var sendFileMessage = useSendFileMessageCallback({
    currentGroupChannel,
    imageCompression,
    onBeforeSendFileMessage
  }, {
    logger,
    pubSub,
    scrollRef,
    messagesDispatcher
  })[0];
  var sendVoiceMessage = useSendVoiceMessageCallback({
    currentGroupChannel,
    onBeforeSendVoiceMessage
  }, {
    logger,
    pubSub,
    scrollRef,
    messagesDispatcher
  })[0];
  var sendMultipleFilesMessage = useSendMultipleFilesMessage({
    currentChannel: currentGroupChannel,
    onBeforeSendMultipleFilesMessage,
    publishingModules: [PublishingModuleType.CHANNEL]
  }, {
    logger,
    pubSub,
    scrollRef
  })[0];
  return import_react5.default.createElement(
    ChannelContext.Provider,
    { value: {
      // props
      channelUrl,
      isReactionEnabled: usingReaction,
      isMessageGroupingEnabled,
      isMultipleFilesMessageEnabled,
      showSearchIcon: showSearchIcon !== null && showSearchIcon !== void 0 ? showSearchIcon : globalConfigs.groupChannelSettings.enableMessageSearch,
      highlightedMessage,
      startingPoint,
      onBeforeSendUserMessage,
      onBeforeSendFileMessage,
      onBeforeUpdateUserMessage,
      onChatHeaderActionClick,
      onSearchClick,
      onBackClick,
      replyType,
      threadReplySelectType: (_f = threadReplySelectType !== null && threadReplySelectType !== void 0 ? threadReplySelectType : getCaseResolvedThreadReplySelectType(groupChannel.threadReplySelectType).upperCase) !== null && _f !== void 0 ? _f : ThreadReplySelectType.THREAD,
      queries,
      filterMessageList,
      disableMarkAsRead,
      onReplyInThread,
      onQuoteMessageClick,
      onMessageAnimated,
      onMessageHighlighted,
      // messagesStore
      allMessages,
      localMessages,
      loading,
      initialized,
      unreadSince,
      unreadSinceDate,
      isInvalid,
      currentGroupChannel,
      hasMorePrev,
      hasMoreNext,
      oldestMessageTimeStamp,
      latestMessageTimeStamp,
      emojiContainer,
      readStatus,
      typingMembers,
      // utils
      scrollToMessage,
      quoteMessage,
      setQuoteMessage,
      deleteMessage,
      updateMessage,
      resendMessage,
      messageInputRef,
      sendMessage,
      sendFileMessage,
      sendVoiceMessage,
      sendMultipleFilesMessage,
      initialTimeStamp,
      messageActionTypes: channelActions,
      messagesDispatcher,
      setInitialTimeStamp,
      setAnimatedMessageId,
      setHighLightedMessageId,
      animatedMessageId,
      highLightedMessageId,
      nicknamesMap,
      emojiAllMap,
      onScrollCallback,
      onScrollDownCallback,
      scrollRef,
      scrollBehavior,
      toggleReaction,
      isScrolled,
      setIsScrolled
    } },
    import_react5.default.createElement(UserProfileProvider, { disableUserProfile: (_g = props === null || props === void 0 ? void 0 : props.disableUserProfile) !== null && _g !== void 0 ? _g : !config.common.enableUsingDefaultUserProfile, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile, onUserProfileMessage }, children)
  );
};
var useChannelContext = function() {
  var context = import_react5.default.useContext(ChannelContext);
  if (!context)
    throw new Error("ChannelContext not found. Use within the Channel module.");
  return context;
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelUI.js
var import_react12 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/components/ChannelHeader.js
var import_react6 = __toESM(require_react(), 1);
var ChannelHeader = function(_a) {
  var className = _a.className;
  var context = useChannelContext();
  return import_react6.default.createElement(GroupChannelHeaderView, __assign({}, context, { className, currentChannel: context.currentGroupChannel }));
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageList.js
var import_react10 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/components/Message.js
var import_react9 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/components/FileViewer.js
var import_react7 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var FileViewer2 = function(props) {
  var deleteMessage = useChannelContext().deleteMessage;
  return import_react7.default.createElement(FileViewerView, __assign({}, props, { deleteMessage }));
};

// node_modules/@sendbird/uikit-react/Channel/components/RemoveMessageModal.js
var import_react8 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var RemoveMessageModal = function(props) {
  var deleteMessage = useChannelContext().deleteMessage;
  return import_react8.default.createElement(RemoveMessageModalView, __assign({}, props, { deleteMessage }));
};

// node_modules/@sendbird/uikit-react/Channel/components/Message.js
var import_react_dom4 = __toESM(require_react_dom(), 1);
var Message = function(props) {
  var _a, _b, _c;
  var config = useSendbirdStateContext().config;
  var _d = useChannelContext(), initialized = _d.initialized, currentGroupChannel = _d.currentGroupChannel, animatedMessageId = _d.animatedMessageId, setAnimatedMessageId = _d.setAnimatedMessageId, updateMessage = _d.updateMessage, scrollToMessage = _d.scrollToMessage, replyType = _d.replyType, threadReplySelectType = _d.threadReplySelectType, isReactionEnabled = _d.isReactionEnabled, toggleReaction = _d.toggleReaction, emojiContainer = _d.emojiContainer, nicknamesMap = _d.nicknamesMap, setQuoteMessage = _d.setQuoteMessage, resendMessage = _d.resendMessage, deleteMessage = _d.deleteMessage, renderUserMentionItem = _d.renderUserMentionItem, onReplyInThread = _d.onReplyInThread, onQuoteMessageClick = _d.onQuoteMessageClick, onMessageAnimated = _d.onMessageAnimated, sendMessage = _d.sendMessage, localMessages = _d.localMessages;
  var message = props.message;
  if (!currentGroupChannel)
    return null;
  return import_react9.default.createElement(MessageView, __assign({}, props, { channel: currentGroupChannel, emojiContainer, editInputDisabled: !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !config.isOnline, shouldRenderSuggestedReplies: ((_a = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a === void 0 ? void 0 : _a.enableSuggestedReplies) && (((_b = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b === void 0 ? void 0 : _b.showSuggestedRepliesFor) === "all_messages" ? true : message.messageId === ((_c = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.lastMessage) === null || _c === void 0 ? void 0 : _c.messageId)) && (localMessages === null || localMessages === void 0 ? void 0 : localMessages.length) === 0 && getSuggestedReplies(message).length > 0, isReactionEnabled, replyType, threadReplySelectType, nicknamesMap, renderUserMentionItem, scrollToMessage, toggleReaction, setQuoteMessage, onQuoteMessageClick, onReplyInThreadClick: onReplyInThread, sendUserMessage: function(params) {
    sendMessage({
      message: params.message,
      mentionedUsers: params.mentionedUsers,
      mentionTemplate: params.mentionedMessageTemplate
    });
  }, updateUserMessage: function(messageId, params) {
    var _a2;
    updateMessage({
      messageId,
      message: (_a2 = params.message) !== null && _a2 !== void 0 ? _a2 : "",
      mentionedUsers: params.mentionedUsers,
      mentionTemplate: params.mentionedMessageTemplate
    });
  }, resendMessage, deleteMessage, animatedMessageId, setAnimatedMessageId, onMessageAnimated, renderFileViewer: function(props2) {
    return import_react9.default.createElement(FileViewer2, __assign({}, props2));
  }, renderRemoveMessageModal: function(props2) {
    return import_react9.default.createElement(RemoveMessageModal, __assign({}, props2));
  } }));
};

// node_modules/@sendbird/uikit-react/chunks/bundle-Cn1EBKt6.js
var DELAY = 100;
function calcScrollBottom(scrollHeight, scrollTop) {
  return scrollHeight - scrollTop;
}
function useHandleOnScrollCallback(_a) {
  var hasMore = _a.hasMore, hasNext = _a.hasNext, onScroll = _a.onScroll, scrollRef = _a.scrollRef, setShowScrollDownButton = _a.setShowScrollDownButton;
  var scrollCb = usePreservedCallback(function() {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null)
      return;
    var scrollTop = element.scrollTop, scrollHeight = element.scrollHeight, clientHeight = element.clientHeight;
    var scrollBottom = calcScrollBottom(scrollHeight, scrollTop);
    if (typeof setShowScrollDownButton === "function") {
      setShowScrollDownButton(scrollHeight > scrollTop + clientHeight + 1);
    }
    if (hasMore && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
      onScroll(function() {
        var messagesAreAddedToView = element.scrollHeight > scrollHeight;
        if (messagesAreAddedToView)
          element.scrollTop = element.scrollHeight - scrollBottom;
      });
    }
    if (hasNext && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {
      onScroll(function() {
        var messagesAreAddedToView = element.scrollHeight > scrollHeight;
        if (messagesAreAddedToView)
          element.scrollTop = scrollTop;
      });
    }
  });
  return useThrottleCallback(scrollCb, DELAY, { trailing: true });
}

// node_modules/@sendbird/uikit-react/Channel/components/MessageList.js
var import_react_dom5 = __toESM(require_react_dom(), 1);
var DELAY2 = 100;
function useSetScrollToBottom(_a) {
  var loading = _a.loading;
  var _b = (0, import_react10.useState)(0), scrollBottom = _b[0], setScrollBottom = _b[1];
  (0, import_react10.useEffect)(function() {
    if (loading) {
      setScrollBottom(0);
    }
  }, [loading]);
  var scrollCb = function(e) {
    var element = e.target;
    try {
      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);
    } catch (_a2) {
    }
  };
  return {
    scrollBottom,
    scrollToBottomHandler: useThrottleCallback(scrollCb, DELAY2, { trailing: true })
  };
}
function useScrollBehavior() {
  var _a = useChannelContext(), scrollRef = _a.scrollRef, _b = _a.scrollBehavior, scrollBehavior = _b === void 0 ? "auto" : _b;
  (0, import_react10.useEffect)(function() {
    if (scrollRef.current) {
      scrollRef.current.style.scrollBehavior = scrollBehavior;
    }
  }, [scrollRef.current]);
  return null;
}
var SCROLL_BOTTOM_PADDING = 50;
var MessageList = function(props) {
  var _a, _b, _c, _d, _e;
  var _f = props.className, className = _f === void 0 ? "" : _f;
  var _g = deleteNullish(props), renderMessage = _g.renderMessage, renderMessageContent = _g.renderMessageContent, renderSuggestedReplies = _g.renderSuggestedReplies, renderCustomSeparator = _g.renderCustomSeparator, _h = _g.renderPlaceholderLoader, renderPlaceholderLoader = _h === void 0 ? function() {
    return import_react10.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
  } : _h, _j = _g.renderPlaceholderEmpty, renderPlaceholderEmpty = _j === void 0 ? function() {
    return import_react10.default.createElement(PlaceHolder, { className: "sendbird-conversation__no-messages", type: PlaceHolderTypes.NO_MESSAGES });
  } : _j, _k = _g.renderFrozenNotification, renderFrozenNotification = _k === void 0 ? function() {
    return import_react10.default.createElement(FrozenNotification, { className: "sendbird-conversation__messages__notification" });
  } : _k;
  var _l = useChannelContext(), allMessages = _l.allMessages, localMessages = _l.localMessages, hasMorePrev = _l.hasMorePrev, hasMoreNext = _l.hasMoreNext, setInitialTimeStamp = _l.setInitialTimeStamp, setAnimatedMessageId = _l.setAnimatedMessageId, setHighLightedMessageId = _l.setHighLightedMessageId, isMessageGroupingEnabled = _l.isMessageGroupingEnabled, scrollRef = _l.scrollRef, onScrollCallback = _l.onScrollCallback, onScrollDownCallback = _l.onScrollDownCallback, messagesDispatcher = _l.messagesDispatcher, messageActionTypes = _l.messageActionTypes, currentGroupChannel = _l.currentGroupChannel, disableMarkAsRead = _l.disableMarkAsRead, filterMessageList = _l.filterMessageList, replyType = _l.replyType, loading = _l.loading, isScrolled = _l.isScrolled, unreadSince = _l.unreadSince, unreadSinceDate = _l.unreadSinceDate, typingMembers = _l.typingMembers;
  var store = useSendbirdStateContext();
  var allMessagesFiltered = typeof filterMessageList === "function" ? allMessages.filter(filterMessageList) : allMessages;
  var markAsReadScheduler = store.config.markAsReadScheduler;
  var _m = (0, import_react10.useState)(false), isScrollBottom = _m[0], setIsScrollBottom = _m[1];
  useScrollBehavior();
  var onScroll = function(callback) {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null) {
      return;
    }
    var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;
    if (hasMorePrev && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
      onScrollCallback(callback);
    }
    if (hasMoreNext && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {
      onScrollDownCallback(callback);
    }
    if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {
      messagesDispatcher({
        type: messageActionTypes.MARK_AS_READ,
        payload: { channel: currentGroupChannel }
      });
      markAsReadScheduler.push(currentGroupChannel);
    }
  };
  var onClickScrollBot = function() {
    var _a2, _b2;
    setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);
    setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);
    setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);
    if (scrollRef.current && scrollRef.current.scrollTop > -1) {
      scrollRef.current.scrollTop = ((_a2 = scrollRef.current.scrollHeight) !== null && _a2 !== void 0 ? _a2 : 0) - ((_b2 = scrollRef.current.offsetHeight) !== null && _b2 !== void 0 ? _b2 : 0);
    }
  };
  var moveScroll = function(isBottomMessageAffected) {
    if (isBottomMessageAffected === void 0) {
      isBottomMessageAffected = false;
    }
    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (current) {
      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
      if (scrollBottom < bottom && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {
        current.scrollTop += bottom - scrollBottom;
      }
    }
  };
  var handleOnScroll = useHandleOnScrollCallback({
    hasMore: hasMorePrev,
    hasNext: hasMoreNext,
    onScroll,
    scrollRef
  });
  var onScrollReachedEndDetector = useOnScrollPositionChangeDetector({
    onReachedBottom: function() {
      if (!hasMoreNext && !disableMarkAsRead && !!currentGroupChannel) {
        messagesDispatcher({
          type: messageActionTypes.MARK_AS_READ,
          payload: { channel: currentGroupChannel }
        });
        markAsReadScheduler.push(currentGroupChannel);
      }
      setIsScrollBottom(true);
    },
    onReachedTop: function() {
      setIsScrollBottom(false);
    },
    onInBetween: function() {
      setIsScrollBottom(false);
    }
  });
  var _o = useSetScrollToBottom({ loading }), scrollToBottomHandler = _o.scrollToBottomHandler, scrollBottom = _o.scrollBottom;
  if (loading) {
    return renderPlaceholderLoader();
  }
  if (allMessagesFiltered.length < 1) {
    return renderPlaceholderEmpty();
  }
  return import_react10.default.createElement(
    import_react10.default.Fragment,
    null,
    !isScrolled && import_react10.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }),
    import_react10.default.createElement(
      "div",
      { className: "sendbird-conversation__messages ".concat(className) },
      import_react10.default.createElement(
        "div",
        { className: "sendbird-conversation__scroll-container" },
        import_react10.default.createElement("div", { className: "sendbird-conversation__padding" }),
        import_react10.default.createElement(
          "div",
          { className: "sendbird-conversation__messages-padding", "data-testid": "sendbird-message-list-container", ref: scrollRef, onScroll: function(e) {
            handleOnScroll();
            scrollToBottomHandler(e);
            onScrollReachedEndDetector(e);
          } },
          allMessagesFiltered.map(function(m, idx) {
            var _a2, _b2;
            var _c2 = getMessagePartsInfo({
              allMessages: allMessagesFiltered,
              replyType,
              isMessageGroupingEnabled,
              currentIndex: idx,
              currentMessage: m,
              currentChannel: currentGroupChannel
            }), chainTop = _c2.chainTop, chainBottom = _c2.chainBottom, hasSeparator = _c2.hasSeparator;
            var isByMe = ((_a2 = m === null || m === void 0 ? void 0 : m.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === ((_b2 = store === null || store === void 0 ? void 0 : store.config) === null || _b2 === void 0 ? void 0 : _b2.userId);
            return import_react10.default.createElement(
              MessageProvider,
              { message: m, key: m === null || m === void 0 ? void 0 : m.messageId, isByMe },
              import_react10.default.createElement(Message, {
                handleScroll: moveScroll,
                message: m,
                hasSeparator,
                chainTop,
                chainBottom,
                renderMessageContent,
                renderSuggestedReplies,
                renderCustomSeparator,
                // backward compatibility
                renderMessage
              })
            );
          }),
          localMessages.map(function(m, idx) {
            var _a2, _b2;
            var _c2 = getMessagePartsInfo({
              allMessages: allMessagesFiltered,
              replyType,
              isMessageGroupingEnabled,
              currentIndex: idx,
              currentMessage: m,
              currentChannel: currentGroupChannel
            }), chainTop = _c2.chainTop, chainBottom = _c2.chainBottom;
            var isByMe = ((_a2 = m === null || m === void 0 ? void 0 : m.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === ((_b2 = store === null || store === void 0 ? void 0 : store.config) === null || _b2 === void 0 ? void 0 : _b2.userId);
            return import_react10.default.createElement(
              MessageProvider,
              { message: m, key: m === null || m === void 0 ? void 0 : m.messageId, isByMe },
              import_react10.default.createElement(Message, {
                handleScroll: moveScroll,
                message: m,
                chainTop,
                chainBottom,
                renderMessageContent,
                renderSuggestedReplies,
                renderCustomSeparator,
                // backward compatibility
                renderMessage
              })
            );
          }),
          !hasMoreNext && ((_b = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_e = (_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.typingIndicatorTypes) === null || _e === void 0 ? void 0 : _e.has(TypingIndicatorType.Bubble)) && import_react10.default.createElement(TypingIndicatorBubble, { typingMembers, handleScroll: moveScroll })
        )
      ),
      (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && renderFrozenNotification(),
      /**
       * Show unread count IFF scroll is not bottom or is bottom but hasNext is true.
       */
      (!isScrollBottom || hasMoreNext) && (unreadSince || unreadSinceDate) && import_react10.default.createElement(UnreadCount, { className: "sendbird-conversation__messages__notification", count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount, time: unreadSince, lastReadAt: unreadSinceDate, onClick: function() {
        if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)
          scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
        if (!disableMarkAsRead && !!currentGroupChannel) {
          markAsReadScheduler.push(currentGroupChannel);
          messagesDispatcher({
            type: messageActionTypes.MARK_AS_READ,
            payload: { channel: currentGroupChannel }
          });
        }
        setInitialTimeStamp(null);
        setAnimatedMessageId(null);
        setHighLightedMessageId(null);
      } }),
      // This flag is an unmatched variable
      scrollBottom > SCROLL_BOTTOM_PADDING && import_react10.default.createElement(
        "div",
        { className: "sendbird-conversation__scroll-bottom-button", onClick: onClickScrollBot, onKeyDown: onClickScrollBot, tabIndex: 0, role: "button" },
        import_react10.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.PRIMARY })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageInput.js
var import_react11 = __toESM(require_react(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
var MessageInputWrapper = function(props) {
  var context = useChannelContext();
  var quoteMessage = context.quoteMessage, currentGroupChannel = context.currentGroupChannel, sendMessage = context.sendMessage, sendFileMessage = context.sendFileMessage, sendVoiceMessage = context.sendVoiceMessage, sendMultipleFilesMessage = context.sendMultipleFilesMessage;
  return import_react11.default.createElement(MessageInputWrapperView, __assign({}, props, context, { currentChannel: currentGroupChannel, sendUserMessage: function(params) {
    return sendMessage({
      message: params.message,
      mentionTemplate: params.mentionedMessageTemplate,
      mentionedUsers: params.mentionedUsers,
      quoteMessage: quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0
    });
  }, sendFileMessage: function(params) {
    return sendFileMessage(params.file, quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0);
  }, sendVoiceMessage: function(_a, duration) {
    var file = _a.file;
    return sendVoiceMessage(file, duration, quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0);
  }, sendMultipleFilesMessage: function(_a) {
    var fileInfoList = _a.fileInfoList;
    return sendMultipleFilesMessage(fileInfoList.map(function(fileInfo) {
      return fileInfo.file;
    }), quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0);
  } }));
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelUI.js
var import_react_dom7 = __toESM(require_react_dom(), 1);
var ChannelUI = function(props) {
  var context = useChannelContext();
  var channelUrl = context.channelUrl, isInvalid = context.isInvalid;
  var _a = deleteNullish(props), _b = _a.renderChannelHeader, renderChannelHeader = _b === void 0 ? function(p) {
    return import_react12.default.createElement(ChannelHeader, __assign({}, p));
  } : _b, _c = _a.renderMessageList, renderMessageList = _c === void 0 ? function(p) {
    return import_react12.default.createElement(MessageList, __assign({}, p, { className: "sendbird-conversation__message-list" }));
  } : _c, _d = _a.renderMessageInput, renderMessageInput = _d === void 0 ? function() {
    return import_react12.default.createElement(MessageInputWrapper, __assign({}, props));
  } : _d;
  return import_react12.default.createElement(GroupChannelUIView, __assign({}, props, context, { isLoading: props === null || props === void 0 ? void 0 : props.isLoading, isInvalid, channelUrl, renderChannelHeader, renderMessageList, renderMessageInput }));
};

// node_modules/@sendbird/uikit-react/Channel.js
var import_react_dom8 = __toESM(require_react_dom(), 1);
var Channel = function(props) {
  return import_react13.default.createElement(
    ChannelProvider,
    __assign({}, props),
    import_react13.default.createElement(ChannelUI, __assign({}, props))
  );
};

// node_modules/@sendbird/uikit-react/ChannelList.js
var import_react18 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CQgNYKRd.js
var import_react14 = __toESM(require_react(), 1);
var RESET_CHANNEL_LIST = "RESET_CHANNEL_LIST";
var CREATE_CHANNEL = "CREATE_CHANNEL";
var LEAVE_CHANNEL_SUCCESS = "LEAVE_CHANNEL_SUCCESS";
var SET_CURRENT_CHANNEL2 = "SET_CURRENT_CHANNEL";
var FETCH_CHANNELS_START = "FETCH_CHANNELS_START";
var FETCH_CHANNELS_SUCCESS = "FETCH_CHANNELS_SUCCESS";
var FETCH_CHANNELS_FAILURE = "FETCH_CHANNELS_FAILURE";
var INIT_CHANNELS_START = "INIT_CHANNELS_START";
var INIT_CHANNELS_SUCCESS = "INIT_CHANNELS_SUCCESS";
var REFRESH_CHANNELS_SUCCESS = "REFRESH_CHANNELS_SUCCESS";
var INIT_CHANNELS_FAILURE = "INIT_CHANNELS_FAILURE";
var ON_USER_JOINED = "ON_USER_JOINED";
var ON_CHANNEL_DELETED = "ON_CHANNEL_DELETED";
var ON_LAST_MESSAGE_UPDATED = "ON_LAST_MESSAGE_UPDATED";
var ON_USER_LEFT = "ON_USER_LEFT";
var ON_CHANNEL_CHANGED = "ON_CHANNEL_CHANGED";
var ON_CHANNEL_ARCHIVED = "ON_CHANNEL_ARCHIVED";
var ON_CHANNEL_FROZEN = "ON_CHANNEL_FROZEN";
var ON_CHANNEL_UNFROZEN = "ON_CHANNEL_UNFROZEN";
var ON_READ_RECEIPT_UPDATED = "ON_READ_RECEIPT_UPDATED";
var ON_DELIVERY_RECEIPT_UPDATED = "ON_DELIVERY_RECEIPT_UPDATED";
var CHANNEL_LIST_PARAMS_UPDATED = "CHANNEL_LIST_PARAMS_UPDATED";
var DELIVERY_RECEIPT3 = "delivery_receipt";
var createEventHandler = function(_a) {
  var sdk = _a.sdk, sdkChannelHandlerId = _a.sdkChannelHandlerId, channelListDispatcher = _a.channelListDispatcher, logger = _a.logger;
  var ChannelHandler = new Ye({
    onChannelChanged: function(channel) {
      if (channel.isGroupChannel()) {
        logger.info("ChannelList: onChannelChanged", channel);
        channelListDispatcher({
          type: ON_CHANNEL_CHANGED,
          payload: channel
        });
      }
    },
    onChannelDeleted: function(channelUrl) {
      logger.info("ChannelList: onChannelDeleted", channelUrl);
      channelListDispatcher({
        type: ON_CHANNEL_DELETED,
        payload: channelUrl
      });
    },
    onUserJoined: function(channel) {
      logger.info("ChannelList: onUserJoined", channel);
      channelListDispatcher({
        type: ON_USER_JOINED,
        payload: channel
      });
    },
    onUserBanned: function(channel, user) {
      var _a2;
      if (channel.isGroupChannel()) {
        logger.info("Channel: onUserBanned", channel);
        var isMe = user.userId === ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId);
        channelListDispatcher({
          type: ON_USER_LEFT,
          payload: { channel, isMe }
        });
      }
    },
    onUserLeft: function(channel, user) {
      var _a2;
      logger.info("ChannelList: onUserLeft", channel);
      var isMe = user.userId === ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId);
      channelListDispatcher({
        type: ON_USER_LEFT,
        payload: { channel, isMe }
      });
    },
    onUnreadMemberStatusUpdated: function(channel) {
      logger.info("ChannelList: onUnreadMemberStatusUpdated", channel);
      channelListDispatcher({
        type: ON_READ_RECEIPT_UPDATED,
        payload: channel
      });
    },
    onUndeliveredMemberStatusUpdated: function(channel) {
      logger.info("ChannelList: onUndeliveredMemberStatusUpdated", channel);
      if (channel.lastMessage) {
        channelListDispatcher({
          type: ON_DELIVERY_RECEIPT_UPDATED,
          payload: channel
        });
      }
    },
    onMessageUpdated: function(channel, message) {
      var _a2;
      if (channel.isGroupChannel() && ((_a2 = channel.lastMessage) === null || _a2 === void 0 ? void 0 : _a2.isEqual(message))) {
        logger.info("ChannelList: onMessageUpdated", channel);
        channelListDispatcher({
          type: ON_LAST_MESSAGE_UPDATED,
          payload: channel
        });
      }
    },
    onChannelHidden: function(channel) {
      logger.info("ChannelList: onChannelHidden", channel);
      channelListDispatcher({
        type: ON_CHANNEL_ARCHIVED,
        payload: channel
      });
    },
    onChannelFrozen: function(channel) {
      if (channel.isGroupChannel()) {
        logger.info("ChannelList: onChannelFrozen", channel);
        channelListDispatcher({
          type: ON_CHANNEL_FROZEN,
          payload: channel
        });
      }
    },
    onChannelUnfrozen: function(channel) {
      if (channel.isGroupChannel()) {
        logger.info("ChannelList: onChannelUnfrozen", channel);
        channelListDispatcher({
          type: ON_CHANNEL_UNFROZEN,
          payload: channel
        });
      }
    }
  });
  logger.info("ChannelList: Added channelHandler");
  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);
};
var createChannelListQuery = function(_a) {
  var sdk = _a.sdk, _b = _a.userFilledChannelListQuery, userFilledChannelListQuery = _b === void 0 ? {} : _b;
  var params = {
    includeEmpty: false,
    limit: 20,
    // The value of pagination limit could be set up to 100.
    order: E.LATEST_LAST_MESSAGE
  };
  if (userFilledChannelListQuery) {
    Object.keys(userFilledChannelListQuery).forEach(function(key) {
      params[key] = userFilledChannelListQuery[key];
    });
  }
  return sdk.groupChannel.createMyGroupChannelListQuery(params);
};
function setupChannelList(_a) {
  var _b, _c, _d, _e;
  var sdk = _a.sdk, sdkChannelHandlerId = _a.sdkChannelHandlerId, channelListDispatcher = _a.channelListDispatcher, setChannelSource = _a.setChannelSource, onChannelSelect = _a.onChannelSelect, userFilledChannelListQuery = _a.userFilledChannelListQuery, logger = _a.logger, sortChannelList = _a.sortChannelList, disableAutoSelect = _a.disableAutoSelect, markAsDeliveredScheduler = _a.markAsDeliveredScheduler, disableMarkAsDelivered = _a.disableMarkAsDelivered;
  if (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) {
    createEventHandler({
      sdk,
      channelListDispatcher,
      sdkChannelHandlerId,
      logger
    });
  } else {
    logger.warning("ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist", sdk);
  }
  logger.info("ChannelList - creating query", { userFilledChannelListQuery });
  var channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });
  logger.info("ChannelList - created query", channelListQuery);
  setChannelSource(channelListQuery);
  channelListDispatcher({
    type: INIT_CHANNELS_START,
    payload: {
      currentUserId: (_c = (_b = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _b === void 0 ? void 0 : _b.userId) !== null && _c !== void 0 ? _c : ""
    }
  });
  if (userFilledChannelListQuery) {
    logger.info("ChannelList - setting up channelListQuery", channelListQuery);
    channelListDispatcher({
      type: CHANNEL_LIST_PARAMS_UPDATED,
      payload: {
        channelListQuery,
        currentUserId: (_e = (_d = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _d === void 0 ? void 0 : _d.userId) !== null && _e !== void 0 ? _e : ""
      }
    });
  }
  logger.info("ChannelList - fetching channels");
  if (channelListQuery.hasNext) {
    channelListQuery.next().then(function(channelList) {
      var _a2, _b2;
      logger.info("ChannelList - fetched channels", channelList);
      logger.info("ChannelList - highlight channel", channelList[0]);
      var sortedChannelList = channelList;
      if (sortChannelList && typeof sortChannelList === "function") {
        sortedChannelList = sortChannelList(channelList);
        logger.info("ChannelList - channel list sorted", sortedChannelList);
      }
      if (!disableAutoSelect) {
        onChannelSelect === null || onChannelSelect === void 0 ? void 0 : onChannelSelect(sortedChannelList[0]);
      }
      channelListDispatcher({
        type: INIT_CHANNELS_SUCCESS,
        payload: {
          channelList: sortedChannelList,
          disableAutoSelect
        }
      });
      var canSetMarkAsDelivered = (_b2 = (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.premiumFeatureList) === null || _b2 === void 0 ? void 0 : _b2.find(function(feature) {
        return feature === DELIVERY_RECEIPT3;
      });
      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {
        sortedChannelList.forEach(function(channel) {
          markAsDeliveredScheduler.push(channel);
        });
      }
    }).catch(function(err) {
      if (err) {
        logger.error("ChannelList - couldnt fetch channels", err);
        channelListDispatcher({
          type: INIT_CHANNELS_FAILURE
        });
      }
    });
  } else {
    logger.info("ChannelList - there are no more channels");
  }
}
var pubSubHandleRemover = function(subscriber) {
  subscriber.forEach(function(s) {
    try {
      s.remove();
    } catch (_a) {
    }
  });
};
var pubSubHandler = function(pubSub, channelListDispatcher) {
  var subscriber = /* @__PURE__ */ new Map();
  if (!pubSub)
    return subscriber;
  subscriber.set(pubSubTopics.CREATE_CHANNEL, pubSub.subscribe(pubSubTopics.CREATE_CHANNEL, function(_a) {
    var channel = _a.channel;
    channelListDispatcher({
      type: CREATE_CHANNEL,
      payload: channel
    });
  }));
  subscriber.set(pubSubTopics.UPDATE_USER_MESSAGE, pubSub.subscribe(pubSubTopics.UPDATE_USER_MESSAGE, function(_a) {
    var _b;
    var channel = _a.channel, message = _a.message;
    if (channel.isGroupChannel() && ((_b = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _b === void 0 ? void 0 : _b.messageId) === message.messageId) {
      channel.lastMessage = message;
      channelListDispatcher({
        type: ON_LAST_MESSAGE_UPDATED,
        payload: channel
      });
    }
  }));
  subscriber.set(pubSubTopics.LEAVE_CHANNEL, pubSub.subscribe(pubSubTopics.LEAVE_CHANNEL, function(msg) {
    var channel = msg.channel;
    channelListDispatcher({
      type: LEAVE_CHANNEL_SUCCESS,
      payload: channel === null || channel === void 0 ? void 0 : channel.url
    });
  }));
  return subscriber;
};
var getNextChannel = function(_a) {
  var channel = _a.channel, currentChannel = _a.currentChannel, allChannels = _a.allChannels, disableAutoSelect = _a.disableAutoSelect;
  var nextChannel = null;
  if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === channel.url) {
    if (!disableAutoSelect && allChannels.length > 0) {
      var firstChannel = allChannels[0], _b = allChannels[1], secondChannel = _b === void 0 ? null : _b;
      nextChannel = firstChannel.url === channel.url ? secondChannel : firstChannel;
    }
  } else {
    nextChannel = currentChannel;
  }
  return nextChannel;
};
var initialState3 = {
  // we might not need this initialized state -> should remove
  initialized: false,
  loading: true,
  allChannels: [],
  currentChannel: null,
  channelListQuery: null,
  currentUserId: "",
  disableAutoSelect: false
};
function channelListReducer(state, action) {
  return K(action).with({ type: INIT_CHANNELS_START }, function(_a) {
    var payload = _a.payload;
    return __assign(__assign({}, state), { loading: true, currentUserId: payload.currentUserId });
  }).with({ type: RESET_CHANNEL_LIST }, function() {
    return initialState3;
  }).with({ type: INIT_CHANNELS_SUCCESS }, function(action2) {
    var _a = action2.payload, channelList = _a.channelList, disableAutoSelect = _a.disableAutoSelect;
    return __assign(__assign({}, state), { initialized: true, loading: false, allChannels: channelList, disableAutoSelect, currentChannel: !disableAutoSelect && channelList && channelList.length && channelList.length > 0 ? channelList[0] : state.currentChannel });
  }).with({ type: REFRESH_CHANNELS_SUCCESS }, function(action2) {
    var _a = action2.payload, channelList = _a.channelList, currentChannel = _a.currentChannel;
    return __assign(__assign({}, state), { loading: false, allChannels: channelList, currentChannel });
  }).with({ type: FETCH_CHANNELS_SUCCESS }, function(action2) {
    var currentChannels = state.allChannels.map(function(c) {
      return c.url;
    });
    var filteredChannels = action2.payload.filter(function(_a) {
      var url = _a.url;
      return !currentChannels.find(function(c) {
        return c === url;
      });
    });
    return __assign(__assign({}, state), { allChannels: __spreadArray(__spreadArray([], state.allChannels, true), filteredChannels, true) });
  }).with({ type: CREATE_CHANNEL }, function(action2) {
    var _a;
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, channelListQuery = state.channelListQuery;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), { currentChannel: channel, allChannels: getChannelsWithUpsertedChannel(allChannels, channel, (_a = state.channelListQuery) === null || _a === void 0 ? void 0 : _a.order) });
      }
      return __assign(__assign({}, state), { currentChannel: channel });
    }
    return __assign(__assign({}, state), { currentChannel: channel, allChannels: __spreadArray([channel], allChannels.filter(function(ch) {
      return ch.url !== (channel === null || channel === void 0 ? void 0 : channel.url);
    }), true) });
  }).with({ type: ON_CHANNEL_ARCHIVED }, function(action2) {
    var _a;
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), { allChannels: getChannelsWithUpsertedChannel(allChannels, channel, (_a = state.channelListQuery) === null || _a === void 0 ? void 0 : _a.order) });
      }
    }
    var nextChannel = getNextChannel({
      channel,
      currentChannel,
      allChannels,
      disableAutoSelect
    });
    return __assign(__assign({}, state), { currentChannel: nextChannel, allChannels: allChannels.filter(function(_a2) {
      var url = _a2.url;
      return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
    }) });
  }).with({ type: S.union(LEAVE_CHANNEL_SUCCESS, ON_CHANNEL_DELETED) }, function(action2) {
    var _a;
    var channelUrl = action2.payload;
    var allChannels = state.allChannels.filter(function(_a2) {
      var url = _a2.url;
      return url !== channelUrl;
    });
    return __assign(__assign({}, state), { currentChannel: channelUrl === ((_a = state.currentChannel) === null || _a === void 0 ? void 0 : _a.url) ? allChannels[0] : state.currentChannel, allChannels });
  }).with({ type: ON_USER_LEFT }, function(action2) {
    var _a;
    var _b = action2.payload, channel = _b.channel, isMe = _b.isMe;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    var nextChannels = __spreadArray([], allChannels, true);
    var nextChannel = channel;
    if (isMe || channelListQuery && !filterChannelListParams(channelListQuery, channel, currentUserId)) {
      var channelAt = allChannels.findIndex(function(ch) {
        return ch.url === channel.url;
      });
      if (channelAt > -1) {
        nextChannels.splice(channelAt, 1);
        nextChannel = getNextChannel({
          channel,
          currentChannel,
          allChannels,
          disableAutoSelect
        });
      }
    } else {
      nextChannels = getChannelsWithUpsertedChannel(allChannels, channel, (_a = state.channelListQuery) === null || _a === void 0 ? void 0 : _a.order);
      if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === channel.url) {
        nextChannel = channel;
      }
    }
    return __assign(__assign({}, state), { currentChannel: nextChannel, allChannels: nextChannels });
  }).with({
    type: S.union(ON_USER_JOINED, ON_CHANNEL_CHANGED, ON_READ_RECEIPT_UPDATED, ON_DELIVERY_RECEIPT_UPDATED)
  }, function(action2) {
    var _a, _b, _c;
    var channel = action2.payload;
    var _d = state.allChannels, allChannels = _d === void 0 ? [] : _d, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    var unreadMessageCount = channel.unreadMessageCount;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), { allChannels: getChannelsWithUpsertedChannel(allChannels, channel, (_a = state.channelListQuery) === null || _a === void 0 ? void 0 : _a.order) });
      }
      if (isChannelJustCreated(channel)) {
        return state;
      }
      var nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
      return __assign(__assign({}, state), { currentChannel: nextChannel, allChannels: allChannels.filter(function(_a2) {
        var url = _a2.url;
        return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
      }) });
    }
    if (
      // When marking as read the channel
      unreadMessageCount === 0 && ((_c = (_b = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _b === void 0 ? void 0 : _b.sender) === null || _c === void 0 ? void 0 : _c.userId) !== currentUserId
    ) {
      return __assign(__assign({}, state), { allChannels: allChannels.map(function(ch) {
        return ch.url === (channel === null || channel === void 0 ? void 0 : channel.url) ? channel : ch;
      }) });
    }
    return __assign(__assign({}, state), { allChannels: __spreadArray([channel], allChannels.filter(function(_a2) {
      var url = _a2.url;
      return url !== channel.url;
    }), true) });
  }).with({ type: SET_CURRENT_CHANNEL2 }, function(action2) {
    return __assign(__assign({}, state), { currentChannel: action2.payload });
  }).with({ type: ON_LAST_MESSAGE_UPDATED }, function(action2) {
    return __assign(__assign({}, state), { allChannels: state.allChannels.map(function(channel) {
      return (channel === null || channel === void 0 ? void 0 : channel.url) === action2.payload.url ? action2.payload : channel;
    }) });
  }).with({ type: ON_CHANNEL_FROZEN }, function(action2) {
    var _a;
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), { allChannels: getChannelsWithUpsertedChannel(allChannels, channel, (_a = state.channelListQuery) === null || _a === void 0 ? void 0 : _a.order) });
      }
      var nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
      return __assign(__assign({}, state), { currentChannel: nextChannel, allChannels: allChannels.filter(function(_a2) {
        var url = _a2.url;
        return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
      }) });
    }
    return __assign(__assign({}, state), { allChannels: allChannels.map(function(ch) {
      if (ch.url === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        ch.isFrozen = true;
        return ch;
      }
      return ch;
    }) });
  }).with({ type: ON_CHANNEL_UNFROZEN }, function(action2) {
    var _a;
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), { allChannels: getChannelsWithUpsertedChannel(allChannels, channel, (_a = state.channelListQuery) === null || _a === void 0 ? void 0 : _a.order) });
      }
      var nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
      return __assign(__assign({}, state), { currentChannel: nextChannel, allChannels: allChannels.filter(function(_a2) {
        var url = _a2.url;
        return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
      }) });
    }
    return __assign(__assign({}, state), { allChannels: allChannels.map(function(ch) {
      if (ch.url === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        ch.isFrozen = false;
        return ch;
      }
      return ch;
    }) });
  }).with({ type: CHANNEL_LIST_PARAMS_UPDATED }, function(action2) {
    return __assign(__assign({}, state), { channelListQuery: action2.payload.channelListQuery, currentUserId: action2.payload.currentUserId });
  }).otherwise(function() {
    return state;
  });
}
function useActiveChannelUrl(_a, _b) {
  var activeChannelUrl = _a.activeChannelUrl, channels = _a.channels, sdk = _a.sdk;
  var logger = _b.logger, channelListDispatcher = _b.channelListDispatcher;
  return (0, import_react14.useEffect)(function() {
    var _a2;
    if (activeChannelUrl) {
      logger.info("ChannelListProvider: looking for active channel", { activeChannelUrl });
      var activeChannel = channels === null || channels === void 0 ? void 0 : channels.find(function(channel) {
        return channel.url === activeChannelUrl;
      });
      if (activeChannel) {
        channelListDispatcher({
          type: SET_CURRENT_CHANNEL2,
          payload: activeChannel
        });
      } else {
        logger.info("ChannelListProvider: searching backend for active channel", { activeChannelUrl });
        (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.getChannel(activeChannelUrl).then(function(channel) {
          channelListDispatcher({
            type: FETCH_CHANNELS_SUCCESS,
            payload: [channel]
          });
          channelListDispatcher({
            type: SET_CURRENT_CHANNEL2,
            payload: channel
          });
        }).catch(function() {
          logger.warning("ChannelListProvider: Active channel not found");
        });
      }
    }
  }, [activeChannelUrl]);
}
var useFetchChannelList = function(_a, _b) {
  var channelSource = _a.channelSource, disableMarkAsDelivered = _a.disableMarkAsDelivered;
  var channelListDispatcher = _b.channelListDispatcher, logger = _b.logger, markAsDeliveredScheduler = _b.markAsDeliveredScheduler;
  return (0, import_react14.useCallback)(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var channelList, error_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!(channelSource === null || channelSource === void 0 ? void 0 : channelSource.hasNext)) {
              logger.info("ChannelList: not able to fetch");
              return [
                2
                /*return*/
              ];
            }
            logger.info("ChannelList: starting fetch");
            channelListDispatcher({
              type: FETCH_CHANNELS_START,
              payload: null
            });
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, channelSource.next()];
          case 2:
            channelList = _a2.sent();
            logger.info("ChannelList: succeeded fetch", { channelList });
            channelListDispatcher({
              type: FETCH_CHANNELS_SUCCESS,
              payload: channelList
            });
            if (!disableMarkAsDelivered) {
              logger.info("ChannelList: mark as delivered to fetched channels");
              channelList === null || channelList === void 0 ? void 0 : channelList.forEach(function(channel) {
                if ((channel === null || channel === void 0 ? void 0 : channel.unreadMessageCount) > 0) {
                  markAsDeliveredScheduler.push(channel);
                }
              });
            }
            return [3, 4];
          case 3:
            error_1 = _a2.sent();
            logger.error("ChannelList: failed fetch", { error: error_1 });
            channelListDispatcher({
              type: FETCH_CHANNELS_FAILURE,
              payload: error_1
            });
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [
    channelSource,
    disableMarkAsDelivered
  ]);
};
function useHandleReconnectForChannelList(_a) {
  var isOnline = _a.isOnline, reconnectOnIdle = _a.reconnectOnIdle, logger = _a.logger, sdk = _a.sdk, currentGroupChannel = _a.currentGroupChannel, channelListDispatcher = _a.channelListDispatcher, setChannelSource = _a.setChannelSource, userFilledChannelListQuery = _a.userFilledChannelListQuery, sortChannelList = _a.sortChannelList, disableAutoSelect = _a.disableAutoSelect, markAsDeliveredScheduler = _a.markAsDeliveredScheduler, disableMarkAsDelivered = _a.disableMarkAsDelivered;
  var shouldReconnect = useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle).shouldReconnect;
  (0, import_react14.useEffect)(function() {
    return function() {
      var _a2, _b, _c, _d;
      if (shouldReconnect) {
        logger.info("ChannelList refresh - creating query", { userFilledChannelListQuery });
        var channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });
        logger.info("ChannelList refresh - created query", channelListQuery);
        setChannelSource(channelListQuery);
        channelListDispatcher({
          type: INIT_CHANNELS_START,
          payload: {
            currentUserId: (_b = (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId) !== null && _b !== void 0 ? _b : ""
          }
        });
        if (userFilledChannelListQuery) {
          logger.info("ChannelList refresh - setting up channelListQuery", channelListQuery);
          channelListDispatcher({
            type: CHANNEL_LIST_PARAMS_UPDATED,
            payload: {
              channelListQuery,
              currentUserId: (_d = (_c = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _c === void 0 ? void 0 : _c.userId) !== null && _d !== void 0 ? _d : ""
            }
          });
        }
        logger.info("ChannelList refresh - fetching channels");
        if (channelListQuery.hasNext) {
          channelListQuery.next().then(function(channelList) {
            var _a3, _b2;
            logger.info("ChannelList refresh - fetched channels", channelList);
            var sortedChannelList = channelList;
            if (sortChannelList && typeof sortChannelList === "function") {
              sortedChannelList = sortChannelList(channelList);
              logger.info("ChannelList refresh - channel list sorted", sortedChannelList);
            }
            var newCurrentChannel = !disableAutoSelect ? sortedChannelList[0] : null;
            if (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) {
              var foundChannel = sortedChannelList.find(function(channel) {
                return channel.url === currentGroupChannel.url;
              });
              if (foundChannel) {
                newCurrentChannel = foundChannel;
              }
            }
            logger.info("ChannelList refresh - highlight channel", newCurrentChannel);
            channelListDispatcher({
              type: REFRESH_CHANNELS_SUCCESS,
              payload: {
                channelList: sortedChannelList,
                currentChannel: newCurrentChannel
              }
            });
            var canSetMarkAsDelivered = (_b2 = (_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a3 === void 0 ? void 0 : _a3.premiumFeatureList) === null || _b2 === void 0 ? void 0 : _b2.find(function(feature) {
              return feature === DELIVERY_RECEIPT;
            });
            if (canSetMarkAsDelivered && !disableMarkAsDelivered) {
              sortedChannelList.forEach(function(channel) {
                markAsDeliveredScheduler.push(channel);
              });
            }
          }).catch(function(err) {
            if (err) {
              logger.error("ChannelList refresh - could not fetch channels", err);
              channelListDispatcher({
                type: INIT_CHANNELS_FAILURE
              });
            }
          });
        } else {
          logger.info("ChannelList refresh - there are no more channels");
        }
      }
    };
  }, [shouldReconnect]);
}
var ChannelListContext = import_react14.default.createContext(null);
var ChannelListProvider = function(props) {
  var _a, _b;
  var children = props.children, className = props.className, disableUserProfile = props.disableUserProfile, allowProfileEdit = props.allowProfileEdit, queries = props.queries, onProfileEditSuccess = props.onProfileEditSuccess, onThemeChange = props.onThemeChange, onBeforeCreateChannel = props.onBeforeCreateChannel, sortChannelList = props.sortChannelList, overrideInviteUser = props.overrideInviteUser, activeChannelUrl = props.activeChannelUrl, _c = props.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _c === void 0 ? null : _c, _d = props.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _d === void 0 ? null : _d, reconnectOnIdle = props.reconnectOnIdle;
  var disableAutoSelect = (props === null || props === void 0 ? void 0 : props.disableAutoSelect) || !!activeChannelUrl;
  var onChannelSelect = (props === null || props === void 0 ? void 0 : props.onChannelSelect) || noop;
  var globalStore = useSendbirdStateContext();
  var config = globalStore.config, stores = globalStore.stores;
  var sdkStore = stores.sdkStore;
  var pubSub = config.pubSub, logger = config.logger, onUserProfileMessage = config.onUserProfileMessage;
  var markAsDeliveredScheduler = config.markAsDeliveredScheduler, _e = config.disableMarkAsDelivered, disableMarkAsDelivered = _e === void 0 ? false : _e, isOnline = config.isOnline;
  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;
  var _f = ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _a !== void 0 ? _a : {}).premiumFeatureList, premiumFeatureList = _f === void 0 ? [] : _f;
  var userDefinedDisableUserProfile = disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile;
  var userDefinedRenderProfile = config === null || config === void 0 ? void 0 : config.renderUserProfile;
  var enableEditProfile = allowProfileEdit || config.allowProfileEdit;
  var userFilledChannelListQuery = queries === null || queries === void 0 ? void 0 : queries.channelListQuery;
  var userFilledApplicationUserListQuery = queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery;
  var sdkIntialized = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.initialized;
  var _g = (0, import_react14.useReducer)(channelListReducer, initialState3), channelListStore = _g[0], channelListDispatcher = _g[1];
  var currentChannel = channelListStore.currentChannel;
  var _h = (0, import_react14.useState)(null), channelSource = _h[0], setChannelSource = _h[1];
  var _j = (0, import_react14.useState)([]), typingChannels = _j[0], setTypingChannels = _j[1];
  (0, import_react14.useEffect)(function() {
    var subscriber = pubSubHandler(pubSub, channelListDispatcher);
    return function() {
      pubSubHandleRemover(subscriber);
    };
  }, [sdkIntialized]);
  (0, import_react14.useEffect)(function() {
    var _a2;
    var sdkChannelHandlerId = uuidv4();
    if (sdkIntialized) {
      logger.info("ChannelList: Setup channelHandlers");
      setupChannelList({
        sdk,
        sdkChannelHandlerId,
        channelListDispatcher,
        setChannelSource,
        onChannelSelect,
        userFilledChannelListQuery: __assign({}, userFilledChannelListQuery),
        logger,
        sortChannelList,
        disableAutoSelect,
        markAsDeliveredScheduler,
        disableMarkAsDelivered
      });
    } else {
      logger.info("ChannelList: Removing channelHandlers");
      if ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.removeGroupChannelHandler) {
        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);
      }
      setChannelSource(null);
      channelListDispatcher({
        type: RESET_CHANNEL_LIST,
        payload: null
      });
    }
    return function() {
      var _a3, _b2;
      logger.info("ChannelList: Removing channelHandlers");
      if ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler) {
        (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.removeGroupChannelHandler(sdkChannelHandlerId);
      }
    };
  }, [
    sdkIntialized,
    sortChannelList,
    Object.entries(userFilledChannelListQuery !== null && userFilledChannelListQuery !== void 0 ? userFilledChannelListQuery : {}).map(function(_a2) {
      var key = _a2[0], value = _a2[1];
      return key + value;
    }).join()
  ]);
  (0, import_react14.useEffect)(function() {
    var _a2, _b2;
    var typingHandlerId = "";
    if ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.addGroupChannelHandler) {
      typingHandlerId = uuidv4();
      var handler = new Ye({
        onTypingStatusUpdated: function(channel) {
          var _a3;
          var typingMemberCount = (_a3 = channel === null || channel === void 0 ? void 0 : channel.getTypingUsers()) === null || _a3 === void 0 ? void 0 : _a3.length;
          var channelList = typingChannels.filter(function(ch) {
            return ch.url !== channel.url;
          });
          if (typingMemberCount > 0) {
            setTypingChannels(__spreadArray(__spreadArray([], channelList, true), [channel], false));
          } else {
            setTypingChannels(channelList);
          }
        },
        onUnreadMemberStatusUpdated: function(channel) {
          channelListDispatcher({
            type: ON_LAST_MESSAGE_UPDATED,
            payload: channel
          });
        },
        onUndeliveredMemberStatusUpdated: function(channel) {
          channelListDispatcher({
            type: ON_LAST_MESSAGE_UPDATED,
            payload: channel
          });
        },
        onMessageUpdated: function(channel) {
          if (channel.isGroupChannel()) {
            channelListDispatcher({
              type: ON_LAST_MESSAGE_UPDATED,
              payload: channel
            });
            sdk.groupChannel.getChannelWithoutCache(channel.url).then(function(ch) {
              channelListDispatcher({
                type: ON_LAST_MESSAGE_UPDATED,
                payload: ch
              });
            });
          }
        },
        onMentionReceived: function(channel) {
          if (channel.isGroupChannel()) {
            channelListDispatcher({
              type: ON_LAST_MESSAGE_UPDATED,
              payload: channel
            });
            sdk.groupChannel.getChannelWithoutCache(channel.url).then(function(ch) {
              channelListDispatcher({
                type: ON_LAST_MESSAGE_UPDATED,
                payload: ch
              });
            });
          }
        }
      });
      (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.addGroupChannelHandler(typingHandlerId, handler);
    }
    return function() {
      var _a3;
      if (((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler) && typingHandlerId !== "") {
        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);
      }
    };
  }, [(_b = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _b === void 0 ? void 0 : _b.userId]);
  var queries_ = (0, import_react14.useMemo)(function() {
    return {
      applicationUserListQuery: userFilledApplicationUserListQuery,
      channelListQuery: userFilledChannelListQuery
    };
  }, [userFilledApplicationUserListQuery, userFilledChannelListQuery]);
  var allChannels = channelListStore.allChannels;
  var sortedChannels = sortChannelList && typeof sortChannelList === "function" ? sortChannelList(allChannels) : allChannels;
  if (sortedChannels.length !== allChannels.length) {
    var warning = "ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems";
    console.warn(warning, { before: allChannels, after: sortedChannels });
    logger.warning(warning, { before: allChannels, after: sortedChannels });
  }
  (0, import_react14.useEffect)(function() {
    if (!sdk || !sdk.groupChannel) {
      return;
    }
    if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
      onChannelSelect(null);
      return;
    }
    sdk.groupChannel.getChannel(currentChannel.url).then(function(groupChannel) {
      if (groupChannel) {
        onChannelSelect(groupChannel);
      } else {
        onChannelSelect(null);
      }
    });
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  useActiveChannelUrl({
    activeChannelUrl,
    channels: sortedChannels,
    sdk
  }, {
    logger,
    channelListDispatcher
  });
  useHandleReconnectForChannelList({
    isOnline,
    reconnectOnIdle,
    logger,
    sdk,
    currentGroupChannel: currentChannel,
    channelListDispatcher,
    setChannelSource,
    userFilledChannelListQuery,
    sortChannelList,
    disableAutoSelect,
    markAsDeliveredScheduler,
    disableMarkAsDelivered
  });
  var fetchChannelList = useFetchChannelList({
    channelSource,
    disableMarkAsDelivered: disableMarkAsDelivered || !premiumFeatureList.some(function(feature) {
      return feature === DELIVERY_RECEIPT;
    })
  }, {
    channelListDispatcher,
    logger,
    markAsDeliveredScheduler
  });
  return import_react14.default.createElement(
    ChannelListContext.Provider,
    { value: __assign(__assign({ className, disableUserProfile, queries: queries_, onProfileEditSuccess, onThemeChange, onBeforeCreateChannel, overrideInviteUser, onChannelSelect, sortChannelList, allowProfileEdit: enableEditProfile, channelListDispatcher, channelSource }, channelListStore), { allChannels: sortedChannels, typingChannels, isTypingIndicatorEnabled: isTypingIndicatorEnabled !== null && isTypingIndicatorEnabled !== void 0 ? isTypingIndicatorEnabled : config.groupChannelList.enableTypingIndicator, isMessageReceiptStatusEnabled: isMessageReceiptStatusEnabled !== null && isMessageReceiptStatusEnabled !== void 0 ? isMessageReceiptStatusEnabled : config.groupChannelList.enableMessageReceiptStatus, fetchChannelList }) },
    import_react14.default.createElement(
      UserProfileProvider,
      { disableUserProfile: userDefinedDisableUserProfile !== null && userDefinedDisableUserProfile !== void 0 ? userDefinedDisableUserProfile : !config.common.enableUsingDefaultUserProfile, renderUserProfile: userDefinedRenderProfile, onUserProfileMessage },
      import_react14.default.createElement("div", { className: "sendbird-channel-list ".concat(className) }, children)
    )
  );
};
function useChannelListContext() {
  var context = (0, import_react14.useContext)(ChannelListContext);
  if (!context)
    throw new Error("ChannelListContext not found. Use within the ChannelList module.");
  return context;
}

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelListUI.js
var import_react17 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelPreview.js
var import_react15 = __toESM(require_react(), 1);
var import_react_dom9 = __toESM(require_react_dom(), 1);
var ChannelPreview = function(_a) {
  var _b, _c, _d, _e;
  var channel = _a.channel, _f = _a.isActive, isActive = _f === void 0 ? false : _f, _g = _a.isSelected, isSelected = _g === void 0 ? false : _g, _h = _a.isTyping, isTyping = _h === void 0 ? false : _h, renderChannelAction = _a.renderChannelAction, onLeaveChannel = _a.onLeaveChannel, onClick = _a.onClick, tabIndex = _a.tabIndex;
  var config = useSendbirdStateContext().config;
  var stringSet = useLocalization().stringSet;
  var _j = useChannelListContext(), _k = _j.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _k === void 0 ? false : _k, _l = _j.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _l === void 0 ? false : _l;
  var userId = config.userId;
  var isMessageStatusEnabled = isMessageReceiptStatusEnabled && (((_b = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _b === void 0 ? void 0 : _b.messageType) === "user" || ((_c = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _c === void 0 ? void 0 : _c.messageType) === "file") && ((_e = (_d = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _d === void 0 ? void 0 : _d.sender) === null || _e === void 0 ? void 0 : _e.userId) === userId;
  return import_react15.default.createElement(GroupChannelListItemView, { channel, tabIndex, isTyping: isTypingIndicatorEnabled && isTyping, isSelected: isSelected !== null && isSelected !== void 0 ? isSelected : isActive, channelName: getChannelTitle(channel, userId, stringSet), isMessageStatusEnabled, onClick, onLeaveChannel, renderChannelAction });
};

// node_modules/@sendbird/uikit-react/ChannelList/components/AddChannel.js
var import_react16 = __toESM(require_react(), 1);
var import_react_dom10 = __toESM(require_react_dom(), 1);
var AddChannel = function() {
  var _a = (0, import_react16.useState)(false), showModal = _a[0], setShowModal = _a[1];
  var _b = useChannelListContext(), overrideInviteUser = _b.overrideInviteUser, onBeforeCreateChannel = _b.onBeforeCreateChannel, onChannelSelect = _b.onChannelSelect;
  return import_react16.default.createElement(AddGroupChannelView, { createChannelVisible: showModal, onChangeCreateChannelVisible: setShowModal, onCreateChannelClick: overrideInviteUser, onBeforeCreateChannel, onChannelCreated: function(it) {
    return onChannelSelect === null || onChannelSelect === void 0 ? void 0 : onChannelSelect(it);
  } });
};

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelListUI.js
var import_react_dom11 = __toESM(require_react_dom(), 1);
var ChannelListUI = function(props) {
  var renderHeader = props.renderHeader, renderChannelPreview = props.renderChannelPreview, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;
  var _a = useChannelListContext(), onThemeChange = _a.onThemeChange, allowProfileEdit = _a.allowProfileEdit, allChannels = _a.allChannels, currentChannel = _a.currentChannel, channelListDispatcher = _a.channelListDispatcher, typingChannels = _a.typingChannels, initialized = _a.initialized, fetchChannelList = _a.fetchChannelList, onProfileEditSuccess = _a.onProfileEditSuccess;
  var _b = useSendbirdStateContext(), stores = _b.stores, config = _b.config;
  var logger = config.logger, _c = config.isOnline, isOnline = _c === void 0 ? false : _c;
  var sdk = stores.sdkStore.sdk;
  var renderListItem = function(props2) {
    var channel = props2.item, index = props2.index;
    var previewProps = {
      channel,
      tabIndex: index,
      isSelected: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url),
      isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function(_a2) {
        var url = _a2.url;
        return url === (channel === null || channel === void 0 ? void 0 : channel.url);
      }),
      renderChannelAction: function(props3) {
        return import_react17.default.createElement(GroupChannelPreviewAction, __assign({}, props3));
      },
      onClick: function() {
        if (!isOnline && !(sdk === null || sdk === void 0 ? void 0 : sdk.isCacheEnabled)) {
          logger.warning("ChannelList: Inactivated clicking channel item during offline.");
          return;
        }
        logger.info("ChannelList: Clicked on channel:", channel);
        channelListDispatcher({
          type: SET_CURRENT_CHANNEL2,
          payload: channel
        });
      },
      onLeaveChannel: function(channel2, cb) {
        return __awaiter(this, void 0, void 0, function() {
          var response, err_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                logger.info("ChannelList: Leaving channel", channel2);
                if (!channel2) return [3, 4];
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 4]);
                return [4, channel2.leave()];
              case 2:
                response = _a2.sent();
                logger.info("ChannelList: Leaving channel success", response);
                if (cb && typeof cb === "function")
                  cb(channel2, null);
                channelListDispatcher({
                  type: LEAVE_CHANNEL_SUCCESS,
                  payload: channel2.url
                });
                return [3, 4];
              case 3:
                err_1 = _a2.sent();
                logger.error("ChannelList: Leaving channel failed", err_1);
                if (cb && typeof cb === "function")
                  cb(channel2, err_1);
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
    };
    if (renderChannelPreview) {
      return import_react17.default.createElement("div", { key: channel === null || channel === void 0 ? void 0 : channel.url, onClick: previewProps.onClick }, renderChannelPreview(previewProps));
    }
    return import_react17.default.createElement(ChannelPreview, __assign({ key: channel === null || channel === void 0 ? void 0 : channel.url }, previewProps));
  };
  return import_react17.default.createElement(GroupChannelListUIView, { renderHeader, renderChannel: renderListItem, renderPlaceHolderError, renderPlaceHolderLoading, renderPlaceHolderEmptyList, onChangeTheme: onThemeChange !== null && onThemeChange !== void 0 ? onThemeChange : noop, allowProfileEdit, onUserProfileUpdated: onProfileEditSuccess !== null && onProfileEditSuccess !== void 0 ? onProfileEditSuccess : noop, channels: allChannels, onLoadMore: fetchChannelList, initialized, renderAddChannel: function() {
    return import_react17.default.createElement(AddChannel, null);
  } });
};

// node_modules/@sendbird/uikit-react/ChannelList.js
var import_react_dom12 = __toESM(require_react_dom(), 1);
var ChannelList = function(props) {
  return import_react18.default.createElement(
    ChannelListProvider,
    __assign({}, props),
    import_react18.default.createElement(ChannelListUI, __assign({}, props))
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings.js
var import_react32 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsUI.js
var import_react31 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ChannelSettings/context.js
var import_react19 = __toESM(require_react(), 1);
function useAsyncRequest(request, options) {
  var _this = this;
  var _a;
  var _b = (0, import_react19.useState)({ loading: true, response: void 0, error: void 0 }), state = _b[0], setState = _b[1];
  var updateWithRequest = function() {
    return __awaiter(_this, void 0, void 0, function() {
      var response_1, error_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            _a2.trys.push([0, 2, , 3]);
            setState(function(prev) {
              return { loading: true, error: void 0, response: (options === null || options === void 0 ? void 0 : options.resetResponseOnRefresh) ? void 0 : prev.response };
            });
            return [4, request()];
          case 1:
            response_1 = _a2.sent();
            if (response_1) {
              setState(function(prev) {
                return __assign(__assign({}, prev), { response: response_1, loading: false });
              });
            } else {
              setState(function(prev) {
                return __assign(__assign({}, prev), { loading: Boolean(options === null || options === void 0 ? void 0 : options.persistLoadingIfNoResponse) });
              });
            }
            return [3, 3];
          case 2:
            error_1 = _a2.sent();
            setState(function(prev) {
              return __assign(__assign({}, prev), { error: error_1, loading: false });
            });
            return [3, 3];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  (0, import_react19.useEffect)(function() {
    updateWithRequest();
    return function() {
      if (request.cancel && typeof request.cancel === "function") {
        request.cancel();
      }
    };
  }, (_a = options === null || options === void 0 ? void 0 : options.deps) !== null && _a !== void 0 ? _a : []);
  return __assign(__assign({}, state), { refresh: updateWithRequest });
}
var ChannelSettingsContext = import_react19.default.createContext(null);
var ChannelSettingsProvider = function(_a) {
  var children = _a.children, className = _a.className, channelUrl = _a.channelUrl, onCloseClick = _a.onCloseClick, onLeaveChannel = _a.onLeaveChannel, onChannelModified = _a.onChannelModified, overrideInviteUser = _a.overrideInviteUser, onBeforeUpdateChannel = _a.onBeforeUpdateChannel, queries = _a.queries, renderUserProfile = _a.renderUserProfile, disableUserProfile = _a.disableUserProfile, renderUserListItem = _a.renderUserListItem;
  var _b = useSendbirdStateContext(), config = _b.config, stores = _b.stores;
  var sdkStore = stores.sdkStore;
  var logger = config.logger, onUserProfileMessage = config.onUserProfileMessage;
  var _c = (0, import_react19.useState)(), channelHandlerId = _c[0], setChannelHandlerId = _c[1];
  var _d = (0, import_react19.useState)(function() {
    return uuidv4();
  }), channelUpdateId = _d[0], setChannelUpdateId = _d[1];
  var forceUpdateUI = function() {
    return setChannelUpdateId(uuidv4());
  };
  var _e = useAsyncRequest(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var channel_1, channelHandler, newChannelHandlerId, error_1;
      var _a2, _b2, _c2, _d2;
      return __generator(this, function(_e2) {
        switch (_e2.label) {
          case 0:
            logger.info("ChannelSettings: fetching channel");
            if (!channelUrl) {
              logger.warning("ChannelSettings: channel url is required");
              return [
                2
                /*return*/
              ];
            } else if (!sdkStore.initialized || !sdkStore.sdk) {
              logger.warning("ChannelSettings: SDK is not initialized");
              return [
                2
                /*return*/
              ];
            } else if (!sdkStore.sdk.groupChannel) {
              logger.warning("ChannelSettings: GroupChannelModule is not specified in the SDK");
              return [
                2
                /*return*/
              ];
            }
            _e2.label = 1;
          case 1:
            _e2.trys.push([1, 3, , 4]);
            if (channelHandlerId) {
              if ((_b2 = (_a2 = sdkStore.sdk) === null || _a2 === void 0 ? void 0 : _a2.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.removeGroupChannelHandler) {
                logger.info("ChannelSettings: Removing message reciver handler", channelHandlerId);
                sdkStore.sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);
              } else if ((_c2 = sdkStore.sdk) === null || _c2 === void 0 ? void 0 : _c2.groupChannel) {
                logger.error("ChannelSettings: Not found the removeGroupChannelHandler");
              }
              setChannelHandlerId(void 0);
            }
            return [4, sdkStore.sdk.groupChannel.getChannel(channelUrl)];
          case 2:
            channel_1 = _e2.sent();
            channelHandler = {
              onUserLeft: function(channel2, user) {
                if (compareIds(channel2 === null || channel2 === void 0 ? void 0 : channel2.url, channelUrl)) {
                  logger.info("ChannelSettings: onUserLeft", { channel: channel2, user });
                  refresh();
                }
              },
              onUserBanned: function(channel2, user) {
                if (compareIds(channel2 === null || channel2 === void 0 ? void 0 : channel2.url, channelUrl) && channel2.isGroupChannel()) {
                  logger.info("ChannelSettings: onUserBanned", { channel: channel2, user });
                  refresh();
                }
              }
            };
            newChannelHandlerId = uuidv4();
            (_d2 = sdkStore.sdk.groupChannel) === null || _d2 === void 0 ? void 0 : _d2.addGroupChannelHandler(newChannelHandlerId, new Ye(channelHandler));
            setChannelHandlerId(newChannelHandlerId);
            return [2, channel_1];
          case 3:
            error_1 = _e2.sent();
            logger.error("ChannelSettings: fetching channel error:", error_1);
            throw error_1;
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, {
    resetResponseOnRefresh: true,
    persistLoadingIfNoResponse: true,
    deps: [sdkStore.initialized, sdkStore.sdk.groupChannel]
  }), _f = _e.response, channel = _f === void 0 ? null : _f, loading = _e.loading, error = _e.error, refresh = _e.refresh;
  (0, import_react19.useEffect)(function() {
    refresh();
  }, [channelUrl, channelUpdateId]);
  return import_react19.default.createElement(
    ChannelSettingsContext.Provider,
    { value: {
      channelUrl,
      onCloseClick,
      onLeaveChannel,
      onChannelModified,
      onBeforeUpdateChannel,
      queries,
      overrideInviteUser,
      setChannelUpdateId,
      forceUpdateUI,
      channel,
      loading,
      invalidChannel: Boolean(error),
      renderUserListItem
    } },
    import_react19.default.createElement(
      UserProfileProvider,
      { renderUserProfile, disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile, onUserProfileMessage },
      import_react19.default.createElement("div", { className: "sendbird-channel-settings ".concat(className) }, children)
    )
  );
};
var useChannelSettingsContext = function() {
  var context = import_react19.default.useContext(ChannelSettingsContext);
  if (!context)
    throw new Error("ChannelSettingsContext not found. Use within the ChannelSettings module");
  return context;
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsHeader.js
var import_react20 = __toESM(require_react(), 1);
var ChannelSettingsHeader = function(_a) {
  var onCloseClick = _a.onCloseClick, renderLeft = _a.renderLeft, renderMiddle = _a.renderMiddle, renderRight = _a.renderRight;
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var logger = config.logger;
  return import_react20.default.createElement(Header$1, { className: "sendbird-channel-settings__header", renderLeft, renderMiddle: renderMiddle !== null && renderMiddle !== void 0 ? renderMiddle : function() {
    return import_react20.default.createElement(Header$1.Title, { title: stringSet.CHANNEL_SETTING__HEADER__TITLE });
  }, renderRight: renderRight !== null && renderRight !== void 0 ? renderRight : function() {
    return import_react20.default.createElement(
      "div",
      { className: "sendbird-channel-settings__header-icon" },
      import_react20.default.createElement(Header$1.IconButton, { type: IconTypes.CLOSE, onClick: function(e) {
        logger.info("ChannelSettings: Click close");
        onCloseClick(e);
      } })
    );
  } });
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelProfile.js
var import_react22 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ChannelSettings/components/EditDetailsModal.js
var import_react21 = __toESM(require_react(), 1);
var import_react_dom13 = __toESM(require_react_dom(), 1);
var EditDetails = function(props) {
  var _a, _b, _c;
  var onSubmit = props.onSubmit, onCancel = props.onCancel;
  var _d = useChannelSettingsContext(), channel = _d.channel, onChannelModified = _d.onChannelModified, onBeforeUpdateChannel = _d.onBeforeUpdateChannel, setChannelUpdateId = _d.setChannelUpdateId;
  var title = channel === null || channel === void 0 ? void 0 : channel.name;
  var state = useSendbirdStateContext();
  var userId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var theme = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme;
  var logger = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.logger;
  var inputRef = (0, import_react21.useRef)(null);
  var formRef = (0, import_react21.useRef)(null);
  var hiddenInputRef = (0, import_react21.useRef)(null);
  var _e = (0, import_react21.useState)(null), currentImg = _e[0], setCurrentImg = _e[1];
  var _f = (0, import_react21.useState)(null), newFile = _f[0], setNewFile = _f[1];
  var stringSet = (0, import_react21.useContext)(LocalizationContext).stringSet;
  return import_react21.default.createElement(
    Modal,
    { isFullScreenOnMobile: true, titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE, submitText: stringSet.BUTTON__SAVE, onCancel, onSubmit: function() {
      var _a2, _b2, _c2;
      if (title !== "" && !((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.value)) {
        if ((_b2 = formRef.current) === null || _b2 === void 0 ? void 0 : _b2.reportValidity) {
          formRef.current.reportValidity();
        }
        return;
      }
      var currentTitle = (_c2 = inputRef.current) === null || _c2 === void 0 ? void 0 : _c2.value;
      var currentImg2 = newFile;
      logger.info("ChannelSettings: Channel information being updated", {
        currentTitle,
        currentImg: currentImg2
      });
      if (onBeforeUpdateChannel) {
        logger.info("ChannelSettings: onBeforeUpdateChannel");
        var params = onBeforeUpdateChannel(currentTitle !== null && currentTitle !== void 0 ? currentTitle : "", currentImg2, channel === null || channel === void 0 ? void 0 : channel.data);
        channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function(groupChannel) {
          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);
          setChannelUpdateId(uuidv4());
          onSubmit();
        });
      } else {
        logger.info("ChannelSettings: normal");
        channel === null || channel === void 0 ? void 0 : channel.updateChannel({
          coverImage: currentImg2,
          name: currentTitle,
          data: (channel === null || channel === void 0 ? void 0 : channel.data) || ""
        }).then(function(groupChannel) {
          logger.info("ChannelSettings: Channel information updated", groupChannel);
          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);
          setChannelUpdateId === null || setChannelUpdateId === void 0 ? void 0 : setChannelUpdateId(uuidv4());
          onSubmit();
        });
      }
    }, type: ButtonTypes.PRIMARY },
    import_react21.default.createElement(
      "form",
      { className: "channel-profile-form", ref: formRef, onSubmit: function(e) {
        e.preventDefault();
      } },
      import_react21.default.createElement(
        "div",
        { className: "channel-profile-form__img-section" },
        import_react21.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE),
        import_react21.default.createElement("div", { className: "channel-profile-form__avatar" }, currentImg ? import_react21.default.createElement(Avatar$1, { height: "80px", width: "80px", src: currentImg }) : import_react21.default.createElement(ChannelAvatar, { height: 80, width: 80, channel, userId, theme })),
        import_react21.default.createElement("input", { ref: hiddenInputRef, type: "file", accept: "image/gif, image/jpeg, image/png", style: { display: "none" }, onChange: function(e) {
          if (e.target.files) {
            setCurrentImg(URL.createObjectURL(e.target.files[0]));
            setNewFile(e.target.files[0]);
          }
          if (hiddenInputRef.current) {
            hiddenInputRef.current.value = "";
          }
        } }),
        import_react21.default.createElement(
          TextButton,
          { className: "channel-profile-form__avatar-button", onClick: function() {
            var _a2;
            return (_a2 = hiddenInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
          }, disableUnderline: true },
          import_react21.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD)
        )
      ),
      import_react21.default.createElement(
        "div",
        { className: "channel-profile-form__name-section" },
        import_react21.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME),
        import_react21.default.createElement(Input, { required: title !== "", name: "channel-profile-form__name", ref: inputRef, value: title, placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelProfile.js
var import_react_dom14 = __toESM(require_react_dom(), 1);
var ChannelProfile = function() {
  var _a, _b, _c;
  var state = useSendbirdStateContext();
  var channelSettingStore = useChannelSettingsContext();
  var stringSet = (0, import_react22.useContext)(LocalizationContext).stringSet;
  var _d = (0, import_react22.useState)(false), showModal = _d[0], setShowModal = _d[1];
  var userId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var theme = ((_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme) || "light";
  var isOnline = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.isOnline;
  var disabled = !isOnline;
  var channel = channelSettingStore === null || channelSettingStore === void 0 ? void 0 : channelSettingStore.channel;
  var channelName = (0, import_react22.useMemo)(function() {
    if ((channel === null || channel === void 0 ? void 0 : channel.name) && channel.name !== "Group Channel") {
      return channel.name;
    }
    if ((channel === null || channel === void 0 ? void 0 : channel.name) === "Group Channel" || !(channel === null || channel === void 0 ? void 0 : channel.name)) {
      return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).map(function(member) {
        return member.nickname || stringSet.NO_NAME;
      }).join(", ");
    }
    return stringSet.NO_TITLE;
  }, [channel === null || channel === void 0 ? void 0 : channel.name, channel === null || channel === void 0 ? void 0 : channel.joinedMemberCount]);
  return import_react22.default.createElement(
    "div",
    { className: "sendbird-channel-profile" },
    import_react22.default.createElement(
      "div",
      { className: "sendbird-channel-profile--inner" },
      import_react22.default.createElement(
        "div",
        { className: "sendbird-channel-profile__avatar" },
        import_react22.default.createElement(ChannelAvatar, { channel, userId, theme, width: 80, height: 80 })
      ),
      import_react22.default.createElement(Label, { className: "sendbird-channel-profile__title", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, channelName),
      import_react22.default.createElement(
        TextButton,
        { disabled, className: "sendbird-channel-profile__edit", onClick: function() {
          if (disabled) {
            return;
          }
          setShowModal(true);
        }, disableUnderline: true },
        import_react22.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)
      ),
      showModal && import_react22.default.createElement(EditDetails, { onCancel: function() {
        return setShowModal(false);
      }, onSubmit: function() {
        return setShowModal(false);
      } })
    )
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/LeaveChannel.js
var import_react23 = __toESM(require_react(), 1);
var import_react_dom15 = __toESM(require_react_dom(), 1);
var LeaveChannel = function(props) {
  var _a, _b;
  var _c = props.onSubmit, onSubmit = _c === void 0 ? noop : _c, _d = props.onCancel, onCancel = _d === void 0 ? noop : _d;
  var _e = useChannelSettingsContext(), channel = _e.channel, onLeaveChannel = _e.onLeaveChannel;
  var stringSet = useLocalization().stringSet;
  var state = useSendbirdStateContext();
  var logger = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.logger;
  var isOnline = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.isOnline;
  var isMobile = useMediaQueryContext().isMobile;
  var getChannelName = function(channel2) {
    if ((channel2 === null || channel2 === void 0 ? void 0 : channel2.name) && (channel2 === null || channel2 === void 0 ? void 0 : channel2.name) !== "Group Channel") {
      return channel2.name;
    }
    if ((channel2 === null || channel2 === void 0 ? void 0 : channel2.name) === "Group Channel" || !(channel2 === null || channel2 === void 0 ? void 0 : channel2.name)) {
      return ((channel2 === null || channel2 === void 0 ? void 0 : channel2.members) || []).map(function(member) {
        return member.nickname || stringSet.NO_NAME;
      }).join(", ");
    }
    return stringSet.NO_TITLE;
  };
  if (isMobile) {
    return import_react23.default.createElement(
      Modal,
      { className: "sendbird-channel-settings__leave--mobile", titleText: getChannelName(channel), hideFooter: true, isCloseOnClickOutside: true, onCancel },
      import_react23.default.createElement(
        TextButton,
        { onClick: function() {
          logger.info("ChannelSettings: Leaving channel", channel);
          channel === null || channel === void 0 ? void 0 : channel.leave().then(function() {
            logger.info("ChannelSettings: Leaving channel successful!", channel);
            onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();
          });
        }, className: "sendbird-channel-settings__leave-label--mobile" },
        import_react23.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE)
      )
    );
  }
  return import_react23.default.createElement(Modal, { isFullScreenOnMobile: true, disabled: !isOnline, onCancel, onSubmit: function() {
    logger.info("ChannelSettings: Leaving channel", channel);
    channel === null || channel === void 0 ? void 0 : channel.leave().then(function() {
      logger.info("ChannelSettings: Leaving channel successful!", channel);
      if (onLeaveChannel) {
        onLeaveChannel();
      } else {
        onSubmit();
      }
    });
  }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE });
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsMenuItem.js
var import_react24 = __toESM(require_react(), 1);
var MenuItem2 = function(_a) {
  var renderLeft = _a.renderLeft, renderMiddle = _a.renderMiddle, _b = _a.renderRight, renderRight = _b === void 0 ? function(props) {
    return import_react24.default.createElement(MenuItemAction, __assign({}, props));
  } : _b, renderAccordion = _a.renderAccordion, className = _a.className, onClick = _a.onClick, onKeyDown = _a.onKeyDown, accordionOpened = _a.accordionOpened, setAccordionOpened = _a.setAccordionOpened;
  var useAccordion = typeof renderAccordion === "function";
  return import_react24.default.createElement(
    import_react24.default.Fragment,
    null,
    import_react24.default.createElement(
      "div",
      { className: classnames("sendbird-channel-settings__panel-item", className), onClick: function(e) {
        onClick === null || onClick === void 0 ? void 0 : onClick(e);
        if (useAccordion)
          setAccordionOpened(!accordionOpened);
      }, onKeyDown: function(e) {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
        if (useAccordion)
          setAccordionOpened(!accordionOpened);
      } },
      renderLeft(),
      renderMiddle(),
      renderRight({
        useAccordion,
        accordionOpened
      })
    ),
    accordionOpened && (renderAccordion === null || renderAccordion === void 0 ? void 0 : renderAccordion())
  );
};
var MenuItemAction = function(_a) {
  var useAccordion = _a.useAccordion, accordionOpened = _a.accordionOpened, children = _a.children;
  return useAccordion ? import_react24.default.createElement(Icon, { type: IconTypes.CHEVRON_RIGHT, className: [
    "sendbird-accordion__panel-icon-right",
    "sendbird-accordion__panel-icon--chevron",
    accordionOpened ? "sendbird-accordion__panel-icon--open" : ""
  ].join(" "), height: "24px", width: "24px" }) : children;
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingMenuList.js
var import_react25 = __toESM(require_react(), 1);
var MenuListByRole = function(_a) {
  var menuItems = _a.menuItems;
  var channel = useChannelSettingsContext().channel;
  var menuItemsByRole = isOperator(channel) ? menuItems.operator : menuItems.nonOperator;
  var _b = (0, import_react25.useState)(null), openAccordionKey = _b[0], setOpenAccordionKey = _b[1];
  return import_react25.default.createElement("div", { className: "sendbird-channel-settings__operator" }, Object.entries(menuItemsByRole).map(function(_a2) {
    var key = _a2[0], item = _a2[1];
    if (item.hideMenu)
      return null;
    return import_react25.default.createElement(MenuItem2, { key, onClick: item.onClick, onKeyDown: item.onKeyDown, renderLeft: function() {
      return import_react25.default.createElement(Icon, __assign({}, item.icon));
    }, renderMiddle: function() {
      return import_react25.default.createElement(Label, __assign({}, item.label));
    }, renderRight: item.rightComponent, renderAccordion: item.accordionComponent, accordionOpened: openAccordionKey === key, setAccordionOpened: function() {
      setOpenAccordionKey(function(prevKey) {
        return prevKey === key ? null : key;
      });
    } });
  }));
};

// node_modules/@sendbird/uikit-react/ChannelSettings/hooks/useMenuList.js
var import_react30 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DWQyLuYT.js
var import_react27 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-C8mqUun8.js
var import_react26 = __toESM(require_react(), 1);
var import_react_dom16 = __toESM(require_react_dom(), 1);
var processToggleAction = function(isProcessing, action, errorHandler) {
  return __awaiter(void 0, void 0, void 0, function() {
    var error_1;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (isProcessing.current) {
            errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(new Error("Processing in progress"));
            return [
              2
              /*return*/
            ];
          }
          isProcessing.current = true;
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, 4, 5]);
          return [4, action()];
        case 2:
          _a.sent();
          return [3, 5];
        case 3:
          error_1 = _a.sent();
          errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error_1);
          return [3, 5];
        case 4:
          isProcessing.current = false;
          return [
            7
            /*endfinally*/
          ];
        case 5:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var getInitialIsOperator = function(channel, user) {
  if (!channel)
    return false;
  if (channel instanceof xe) {
    return channel.isOperator(user);
  }
  return (user === null || user === void 0 ? void 0 : user.role) === V.OPERATOR;
};
var getInitialIsMuted = function(channel, user) {
  return channel ? user === null || user === void 0 ? void 0 : user.isMuted : false;
};
var useToggleOperator = function(_a) {
  var channel = _a.channel, user = _a.user, onToggleOperatorState = _a.onToggleOperatorState, _isOperator = _a.isOperator;
  var _b = (0, import_react26.useState)(_isOperator !== null && _isOperator !== void 0 ? _isOperator : getInitialIsOperator(channel, user)), isOperator3 = _b[0], setIsOperator = _b[1];
  var isProcessing = (0, import_react26.useRef)(false);
  var toggleOperator = (0, import_react26.useCallback)(function() {
    if (!channel)
      return Promise.resolve();
    return processToggleAction(isProcessing, function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var togglePromise, newStatus;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              togglePromise = isOperator3 ? channel.removeOperators([user.userId]) : channel.addOperators([user.userId]);
              return [4, togglePromise];
            case 1:
              _a2.sent();
              newStatus = !isOperator3;
              setIsOperator(newStatus);
              onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({ user, newStatus });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, function(error) {
      onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({ user, newStatus: isOperator3, error });
    });
  }, [isOperator3, channel.url, user.userId, onToggleOperatorState]);
  return {
    isOperator: isOperator3,
    toggleOperator
  };
};
var useToggleMute = function(_a) {
  var channel = _a.channel, user = _a.user, onToggleMuteState = _a.onToggleMuteState, _isMuted = _a.isMuted;
  var _b = (0, import_react26.useState)(_isMuted !== null && _isMuted !== void 0 ? _isMuted : getInitialIsMuted(channel, user)), isMuted = _b[0], setIsMuted = _b[1];
  var isProcessing = (0, import_react26.useRef)(false);
  var toggleMute = (0, import_react26.useCallback)(function() {
    if (!channel)
      return Promise.resolve();
    return processToggleAction(isProcessing, function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var togglePromise, newStatus;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              togglePromise = isMuted ? channel.unmuteUser(user) : channel.muteUser(user);
              return [4, togglePromise];
            case 1:
              _a2.sent();
              newStatus = !isMuted;
              setIsMuted(newStatus);
              onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({ user, newStatus });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, function(error) {
      onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({ user, newStatus: isMuted, error });
    });
  }, [isMuted, channel.url, user.userId, onToggleMuteState]);
  return {
    isMuted,
    toggleMute
  };
};
var useToggleBan = function(_a) {
  var channel = _a.channel, user = _a.user, onToggleBanState = _a.onToggleBanState, _isBanned = _a.isBanned;
  var _b = (0, import_react26.useState)(_isBanned !== null && _isBanned !== void 0 ? _isBanned : false), isBanned = _b[0], setIsBanned = _b[1];
  var isProcessing = (0, import_react26.useRef)(false);
  var toggleBan = (0, import_react26.useCallback)(function() {
    if (!channel)
      return Promise.resolve();
    return processToggleAction(isProcessing, function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var togglePromise, newStatus;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              togglePromise = isBanned ? channel.unbanUser(user) : channel.banUser(user);
              return [4, togglePromise];
            case 1:
              _a2.sent();
              newStatus = !isBanned;
              setIsBanned(newStatus);
              onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({ user, newStatus });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, function(error) {
      onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({ user, newStatus: isBanned, error });
    });
  }, [isBanned, channel.url, user.userId, onToggleBanState]);
  return {
    isBanned,
    toggleBan
  };
};
var UserListItemMenuContext = (0, import_react26.createContext)(void 0);
var UserListItemMenuProvider = function(_a) {
  var children = _a.children, values = __rest(_a, ["children"]);
  var config = useSendbirdStateContext().config;
  var currentUserId = config.userId;
  var channel = values.channel, user = values.user;
  var isCurrentUser = user.userId === currentUserId;
  var isCurrentUserOperator = function() {
    if (!channel)
      return false;
    return channel instanceof xe ? channel.isOperator(currentUserId) : channel.myRole === V.OPERATOR;
  }();
  var operatorState = useToggleOperator(values);
  var muteState = useToggleMute(values);
  var banState = useToggleBan(values);
  return import_react26.default.createElement(UserListItemMenuContext.Provider, { value: __assign(__assign(__assign(__assign(__assign({}, values), operatorState), muteState), banState), { isCurrentUser, isCurrentUserOperator }) }, children);
};
var useUserListItemMenuContext = function() {
  var context = (0, import_react26.useContext)(UserListItemMenuContext);
  if (!context) {
    throw new Error("useUserListItemMenuContext must be used within a UserListItemMenuProvider.");
  }
  return context;
};
var OperatorToggleMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useUserListItemMenuContext(), isOperator3 = _b.isOperator, toggleOperator = _b.toggleOperator, isCurrentUser = _b.isCurrentUser, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu;
  if (!isCurrentUserOperator)
    return import_react26.default.createElement(import_react26.default.Fragment, null);
  return import_react26.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    (_a2 = props === null || props === void 0 ? void 0 : props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    toggleOperator();
    hideMenu();
  }, disabled: isCurrentUser }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isOperator3 ? stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR);
};
var MuteToggleMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useUserListItemMenuContext(), isMuted = _b.isMuted, toggleMute = _b.toggleMute, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu, channel = _b.channel;
  if (!isCurrentUserOperator || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast))
    return import_react26.default.createElement(import_react26.default.Fragment, null);
  return import_react26.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    (_a2 = props === null || props === void 0 ? void 0 : props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    toggleMute();
    hideMenu();
  } }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isMuted ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.CHANNEL_SETTING__MODERATION__MUTE);
};
var BanToggleMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useUserListItemMenuContext(), isBanned = _b.isBanned, toggleBan = _b.toggleBan, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu;
  if (!isCurrentUserOperator)
    return import_react26.default.createElement(import_react26.default.Fragment, null);
  return import_react26.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    (_a2 = props === null || props === void 0 ? void 0 : props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    toggleBan();
    hideMenu();
  } }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isBanned ? stringSet.CHANNEL_SETTING__MODERATION__UNBAN : stringSet.CHANNEL_SETTING__MODERATION__BAN);
};
var TriggerIcon = function(_a) {
  var toggleMenu = _a.toggleMenu, ref = _a.ref;
  return import_react26.default.createElement(
    IconButton,
    { ref, className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleMenu },
    import_react26.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
  );
};
var DefaultMenuItems = function(_a) {
  var items = _a.items;
  var OperatorToggleMenuItem2 = items.OperatorToggleMenuItem, MuteToggleMenuItem2 = items.MuteToggleMenuItem, BanToggleMenuItem2 = items.BanToggleMenuItem;
  return import_react26.default.createElement(
    import_react26.default.Fragment,
    null,
    import_react26.default.createElement(OperatorToggleMenuItem2, null),
    import_react26.default.createElement(MuteToggleMenuItem2, null),
    import_react26.default.createElement(BanToggleMenuItem2, null)
  );
};
var UserListItemMenu = function(props) {
  var user = props.user, className = props.className, _a = props.renderTrigger, renderTrigger = _a === void 0 ? TriggerIcon : _a, _b = props.renderMenuItems, renderMenuItems = _b === void 0 ? DefaultMenuItems : _b;
  var _c = (0, import_react26.useState)(false), isMenuVisible = _c[0], setMenuVisibility = _c[1];
  var containerRef = (0, import_react26.useRef)(null);
  var triggerRef = (0, import_react26.useRef)(null);
  var config = useSendbirdStateContext().config;
  var currentUserId = config.userId;
  var toggleMenu = function() {
    setMenuVisibility(function(prev) {
      return !prev;
    });
  };
  var hideMenu = function() {
    setMenuVisibility(false);
  };
  if (user.userId === currentUserId) {
    return null;
  }
  return import_react26.default.createElement(
    "div",
    { className: classnames("sendbird-user-list-item-menu", className), ref: containerRef },
    import_react26.default.createElement(
      UserListItemMenuProvider,
      __assign({}, props, { hideMenu, toggleMenu }),
      renderTrigger({ ref: triggerRef, toggleMenu }),
      isMenuVisible && import_react26.default.createElement(
        MenuItems,
        {
          // TODO: Add id using getObservingId for useElementObserver
          parentRef: triggerRef,
          parentContainRef: containerRef,
          closeDropdown: hideMenu
        },
        renderMenuItems({
          items: {
            OperatorToggleMenuItem,
            MuteToggleMenuItem,
            BanToggleMenuItem
          }
        })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-DWQyLuYT.js
function OperatorsModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.operatorListQueryParams, operatorListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react27.useState)([]), operators = _d[0], setOperators = _d[1];
  var _e = (0, import_react27.useState)(null), operatorQuery = _e[0], setOperatorQuery = _e[1];
  var channel = useChannelSettingsContext().channel;
  var stringSet = (0, import_react27.useContext)(LocalizationContext).stringSet;
  (0, import_react27.useEffect)(function() {
    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery(__assign({ limit: 20 }, operatorListQueryParams));
    operatorListQuery === null || operatorListQuery === void 0 ? void 0 : operatorListQuery.next().then(function(operators2) {
      setOperators(operators2);
    });
    setOperatorQuery(operatorListQuery !== null && operatorListQuery !== void 0 ? operatorListQuery : null);
  }, []);
  return import_react27.default.createElement(
    "div",
    null,
    import_react27.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, titleText: stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ALL, onCancel },
      import_react27.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (operatorQuery && operatorQuery.hasNext) {
                operatorQuery.next().then(function(o) {
                  setOperators(__spreadArray(__spreadArray([], operators, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, operators.map(function(member) {
        return import_react27.default.createElement(import_react27.default.Fragment, { key: member.userId }, renderUserListItem({
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react27.default.createElement(UserListItemMenu, __assign({}, props, { isOperator: true, onToggleOperatorState: function(_a2) {
              var user = _a2.user;
              setOperators(operators.filter(function(_a3) {
                var userId = _a3.userId;
                return userId !== user.userId;
              }));
            }, renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react27.default.createElement(items.OperatorToggleMenuItem, null);
            } }));
          }
        }));
      }))
    )
  );
}
function AddOperatorsModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, onSubmit = _a.onSubmit, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b;
  var _c = (0, import_react27.useState)([]), members = _c[0], setMembers = _c[1];
  var _d = (0, import_react27.useState)({}), selectedMembers = _d[0], setSelectedMembers = _d[1];
  var _e = (0, import_react27.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var stringSet = (0, import_react27.useContext)(LocalizationContext).stringSet;
  var channel = useChannelSettingsContext().channel;
  (0, import_react27.useEffect)(function() {
    var memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery({
      operatorFilter: Zt.NONOPERATOR,
      limit: 20
    });
    memberListQuery === null || memberListQuery === void 0 ? void 0 : memberListQuery.next().then(function(members2) {
      setMembers(members2);
    });
    setMemberQuery(memberListQuery !== null && memberListQuery !== void 0 ? memberListQuery : null);
  }, []);
  var selectedCount = Object.keys(selectedMembers).filter(function(m) {
    return selectedMembers[m];
  }).length;
  return import_react27.default.createElement(
    "div",
    null,
    import_react27.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, type: ButtonTypes.PRIMARY, submitText: stringSet.CHANNEL_SETTING__OPERATORS__ADD_BUTTON, onCancel, onSubmit: function() {
        var members2 = Object.keys(selectedMembers).filter(function(m) {
          return selectedMembers[m];
        });
        channel === null || channel === void 0 ? void 0 : channel.addOperators(members2).then(function() {
          onSubmit(members2);
        });
      }, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE },
      import_react27.default.createElement(Label, { color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, "".concat(selectedCount, " ").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),
      import_react27.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var hasNext;
            return __generator(this, function(_a2) {
              hasNext = memberQuery.hasNext;
              if (hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member) {
        return import_react27.default.createElement(import_react27.default.Fragment, { key: member.userId }, renderUserListItem({
          user: member,
          checkBox: true,
          checked: selectedMembers[member.userId],
          disabled: (member === null || member === void 0 ? void 0 : member.role) === "operator",
          onChange: function(event) {
            var _a2;
            var modifiedSelectedMembers = __assign(__assign({}, selectedMembers), (_a2 = {}, _a2[event.target.id] = event.target.checked, _a2));
            if (!event.target.checked) {
              delete modifiedSelectedMembers[event.target.id];
            }
            setSelectedMembers(modifiedSelectedMembers);
          }
        }));
      }))
    )
  );
}
var OperatorList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.operatorListQueryParams, operatorListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react27.useState)([]), operators = _d[0], setOperators = _d[1];
  var _e = (0, import_react27.useState)(false), showMore = _e[0], setShowMore = _e[1];
  var _f = (0, import_react27.useState)(false), showAdd = _f[0], setShowAdd = _f[1];
  var _g = (0, import_react27.useState)(false), hasNext = _g[0], setHasNext = _g[1];
  var stringSet = (0, import_react27.useContext)(LocalizationContext).stringSet;
  var channel = useChannelSettingsContext().channel;
  var refreshList = (0, import_react27.useCallback)(function() {
    if (!channel) {
      setOperators([]);
      return;
    }
    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery(__assign({ limit: 10 }, operatorListQueryParams));
    operatorListQuery.next().then(function(operators2) {
      setOperators(operators2);
      setHasNext(operatorListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery]);
  (0, import_react27.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react27.default.createElement(
    import_react27.default.Fragment,
    null,
    operators.map(function(operator) {
      return import_react27.default.createElement(import_react27.default.Fragment, { key: operator.userId }, renderUserListItem({
        user: operator,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react27.default.createElement(UserListItemMenu, __assign({}, props, {
            /**
             * isOperator:
             * The ReturnType of createOperatorListQuery is User[].
             * We can't determine if this user is an operator, because User doesn't have a `role` property.
             * Therefore, we need to explicitly specify that this user is an operator.
            */
            isOperator: true,
            onToggleOperatorState: function() {
              setTimeout(function() {
                refreshList();
              }, 500);
            },
            renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react27.default.createElement(items.OperatorToggleMenuItem, null);
            }
          }));
        }
      }));
    }),
    import_react27.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      import_react27.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowAdd(true);
      } }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ADD),
      hasNext && import_react27.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowMore(true);
      } }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ALL)
    ),
    showMore && import_react27.default.createElement(OperatorsModal, { onCancel: function() {
      setShowMore(false);
      refreshList();
    }, renderUserListItem, operatorListQueryParams }),
    showAdd && import_react27.default.createElement(AddOperatorsModal, { onCancel: function() {
      return setShowAdd(false);
    }, onSubmit: function() {
      setTimeout(function() {
        refreshList();
      }, 500);
      setShowAdd(false);
    }, renderUserListItem })
  );
};
function BannedUsersModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.bannedUserListQueryParams, bannedUserListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react27.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react27.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var channel = useChannelSettingsContext().channel;
  var stringSet = useLocalization().stringSet;
  (0, import_react27.useEffect)(function() {
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery(__assign({ limit: 20 }, bannedUserListQueryParams));
    if (bannedUserListQuery) {
      bannedUserListQuery.next().then(function(users) {
        setMembers(users);
      });
      setMemberQuery(bannedUserListQuery);
    }
  }, []);
  return import_react27.default.createElement(
    "div",
    null,
    import_react27.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__BANNED_MEMBERS__TITLE },
      import_react27.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var hasNext;
            return __generator(this, function(_a2) {
              if (!memberQuery)
                return [
                  2
                  /*return*/
                ];
              hasNext = memberQuery.hasNext;
              if (hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member) {
        return renderUserListItem({
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react27.default.createElement(UserListItemMenu, __assign({}, props, { isBanned: true, onToggleBanState: function() {
              setMembers(members.filter(function(m) {
                return m.userId !== member.userId;
              }));
            }, renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react27.default.createElement(items.BanToggleMenuItem, null);
            } }));
          }
        });
      }))
    )
  );
}
var BannedUserList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.bannedUserListQueryParams, bannedUserListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react27.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react27.useState)(false), hasNext = _e[0], setHasNext = _e[1];
  var _f = (0, import_react27.useState)(false), showModal = _f[0], setShowModal = _f[1];
  var stringSet = (0, import_react27.useContext)(LocalizationContext).stringSet;
  var channel = useChannelSettingsContext().channel;
  var refreshList = (0, import_react27.useCallback)(function() {
    if (!channel) {
      setMembers([]);
      return;
    }
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery(__assign({ limit: 10 }, bannedUserListQueryParams));
    bannedUserListQuery.next().then(function(users) {
      setMembers(users);
      setHasNext(bannedUserListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery]);
  (0, import_react27.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react27.default.createElement(
    import_react27.default.Fragment,
    null,
    members.map(function(member) {
      return import_react27.default.createElement(import_react27.default.Fragment, { key: member.userId }, renderUserListItem({
        user: member,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react27.default.createElement(UserListItemMenu, __assign({}, props, { isBanned: true, onToggleBanState: function() {
            return refreshList();
          }, renderMenuItems: function(_a2) {
            var items = _a2.items;
            return import_react27.default.createElement(items.BanToggleMenuItem, null);
          } }));
        }
      }));
    }),
    members && members.length === 0 && import_react27.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.CHANNEL_SETTING__MODERATION__EMPTY_BAN),
    hasNext && import_react27.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      import_react27.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.CHANNEL_SETTING__MODERATION__ALL_BAN)
    ),
    showModal && import_react27.default.createElement(BannedUsersModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    }, renderUserListItem, bannedUserListQueryParams })
  );
};
function MutedMembersModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react27.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react27.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var channel = useChannelSettingsContext().channel;
  var stringSet = useLocalization().stringSet;
  (0, import_react27.useEffect)(function() {
    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign(__assign({ limit: 20 }, memberListQueryParams), {
      // @ts-ignore
      mutedMemberFilter: "muted"
    }));
    memberUserListQuery === null || memberUserListQuery === void 0 ? void 0 : memberUserListQuery.next().then(function(members2) {
      setMembers(members2);
    });
    setMemberQuery(memberUserListQuery !== null && memberUserListQuery !== void 0 ? memberUserListQuery : null);
  }, []);
  return import_react27.default.createElement(
    "div",
    null,
    import_react27.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE },
      import_react27.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var hasNext;
            return __generator(this, function(_a2) {
              hasNext = memberQuery.hasNext;
              if (hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member) {
        return import_react27.default.createElement(import_react27.default.Fragment, { key: member.userId }, renderUserListItem({
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react27.default.createElement(UserListItemMenu, __assign({}, props, { onToggleMuteState: function() {
              setMembers(members.filter(function(m) {
                return m.userId !== member.userId;
              }));
            }, renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react27.default.createElement(items.MuteToggleMenuItem, null);
            } }));
          }
        }));
      }))
    )
  );
}
var MutedMemberList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react27.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react27.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react27.useState)(false), hasNext = _e[0], setHasNext = _e[1];
  var _f = (0, import_react27.useState)(false), showModal = _f[0], setShowModal = _f[1];
  var stringSet = useLocalization().stringSet;
  var channel = useChannelSettingsContext().channel;
  var refreshList = (0, import_react27.useCallback)(function() {
    if (!channel) {
      setMembers([]);
      return;
    }
    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign(__assign({ limit: 10 }, memberListQueryParams), {
      // @ts-ignore
      mutedMemberFilter: "muted"
    }));
    memberUserListQuery.next().then(function(members2) {
      setMembers(members2);
      setHasNext(memberUserListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery]);
  (0, import_react27.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react27.default.createElement(
    import_react27.default.Fragment,
    null,
    members.map(function(member) {
      return import_react27.default.createElement(import_react27.default.Fragment, { key: member.userId }, renderUserListItem({
        user: member,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react27.default.createElement(UserListItemMenu, __assign({}, props, { onToggleMuteState: function() {
            setTimeout(function() {
              refreshList();
            }, 500);
          }, renderMenuItems: function(_a2) {
            var items = _a2.items;
            return import_react27.default.createElement(items.MuteToggleMenuItem, null);
          } }));
        }
      }));
    }),
    members && members.length === 0 && import_react27.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.CHANNEL_SETTING__NO_UNMUTED),
    hasNext && import_react27.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      import_react27.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE_ALL)
    ),
    showModal && import_react27.default.createElement(MutedMembersModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    }, renderUserListItem, memberListQueryParams })
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-nv2ffewN.js
var import_react28 = __toESM(require_react(), 1);
function MembersModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react28.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react28.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react28.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var channel = useChannelSettingsContext().channel;
  var stringSet = (0, import_react28.useContext)(LocalizationContext).stringSet;
  (0, import_react28.useEffect)(function() {
    var memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({ limit: 20 }, memberListQueryParams));
    memberListQuery === null || memberListQuery === void 0 ? void 0 : memberListQuery.next().then(function(members2) {
      setMembers(members2);
    });
    setMemberQuery(memberListQuery !== null && memberListQuery !== void 0 ? memberListQuery : null);
  }, []);
  return import_react28.default.createElement(
    "div",
    null,
    import_react28.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS },
      import_react28.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (memberQuery && memberQuery.hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member, index) {
        return import_react28.default.createElement(import_react28.default.Fragment, { key: member.userId }, renderUserListItem({
          // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.
          index,
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react28.default.createElement(UserListItemMenu, __assign({}, props, { onToggleOperatorState: function(_a2) {
              var isOperator3 = _a2.newStatus;
              var newMembers = __spreadArray([], members, true);
              for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {
                var newMember = newMembers_1[_i];
                if (newMember.userId === member.userId) {
                  newMember.role = isOperator3 ? V.OPERATOR : V.NONE;
                  break;
                }
              }
              setMembers(newMembers);
            }, onToggleMuteState: function(_a2) {
              var isMuted = _a2.newStatus;
              var newMembers = __spreadArray([], members, true);
              for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {
                var newMember = newMembers_2[_i];
                if (newMember.userId === member.userId) {
                  newMember.isMuted = isMuted;
                  break;
                }
              }
              setMembers(newMembers);
            }, onToggleBanState: function() {
              setMembers(members.filter(function(_a2) {
                var userId = _a2.userId;
                return userId !== member.userId;
              }));
            } }));
          }
        }));
      }))
    )
  );
}
function InviteUsersModal(_a) {
  var _this = this;
  var _b, _c, _d;
  var onCancel = _a.onCancel, onSubmit = _a.onSubmit, _e = _a.renderUserListItem, renderUserListItem = _e === void 0 ? function(props) {
    return import_react28.default.createElement(UserListItem, __assign({}, props));
  } : _e;
  var _f = (0, import_react28.useState)([]), users = _f[0], setUsers = _f[1];
  var _g = (0, import_react28.useState)(null), userListQuery = _g[0], setUserListQuery = _g[1];
  var _h = (0, import_react28.useState)({}), selectedUsers = _h[0], setSelectedUsers = _h[1];
  var state = useSendbirdStateContext();
  var sdk = (_c = (_b = state === null || state === void 0 ? void 0 : state.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var globalUserListQuery = (_d = state === null || state === void 0 ? void 0 : state.config) === null || _d === void 0 ? void 0 : _d.userListQuery;
  var _j = useChannelSettingsContext(), channel = _j.channel, overrideInviteUser = _j.overrideInviteUser, queries = _j.queries;
  var stringSet = useLocalization().stringSet;
  var onScroll = useOnScrollPositionChangeDetector({
    onReachedBottom: function() {
      return __awaiter(this, void 0, void 0, function() {
        var users_1;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext)) return [3, 2];
              return [4, userListQuery.next()];
            case 1:
              users_1 = _a2.sent();
              setUsers(function(prev) {
                return __spreadArray(__spreadArray([], prev, true), users_1, true);
              });
              _a2.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
  });
  var onInviteUsers = function() {
    return __awaiter(_this, void 0, void 0, function() {
      var userIdsToInvite;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            userIdsToInvite = Object.keys(selectedUsers);
            if (!(channel && typeof overrideInviteUser === "function")) return [3, 1];
            overrideInviteUser({ users: userIdsToInvite, onClose: onCancel, channel });
            return [3, 3];
          case 1:
            return [4, channel === null || channel === void 0 ? void 0 : channel.inviteWithUserIds(userIdsToInvite)];
          case 2:
            _a2.sent();
            onSubmit(userIdsToInvite);
            _a2.label = 3;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var onSelectUser = function(user) {
    setSelectedUsers(function(_a2) {
      var draft = __rest(_a2, []);
      if (draft[user.userId]) {
        delete draft[user.userId];
      } else {
        draft[user.userId] = user;
      }
      return draft;
    });
  };
  var membersMap = (0, import_react28.useMemo)(function() {
    var _a2;
    var _b2, _c2;
    if ((channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast))
      return _a2 = {}, _a2[(_c2 = (_b2 = sdk.currentUser) === null || _b2 === void 0 ? void 0 : _b2.userId) !== null && _c2 !== void 0 ? _c2 : ""] = sdk.currentUser, _a2;
    return channel === null || channel === void 0 ? void 0 : channel.members.reduce(function(acc, cur) {
      acc[cur.userId] = cur;
      return acc;
    }, {});
  }, [channel === null || channel === void 0 ? void 0 : channel.members.length]);
  (0, import_react28.useEffect)(function() {
    var fetchUsersAndSetQuery = function() {
      return __awaiter(_this, void 0, void 0, function() {
        var query, users_2;
        var _a2;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              query = (_a2 = globalUserListQuery === null || globalUserListQuery === void 0 ? void 0 : globalUserListQuery()) !== null && _a2 !== void 0 ? _a2 : sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery(queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery);
              if (!query) return [3, 2];
              return [4, query.next()];
            case 1:
              users_2 = _b2.sent();
              setUserListQuery(query);
              setUsers(users_2);
              _b2.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    fetchUsersAndSetQuery();
  }, [sdk]);
  return import_react28.default.createElement(
    "div",
    null,
    import_react28.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, disabled: Object.keys(selectedUsers).length === 0, submitText: stringSet.BUTTON__INVITE, type: ButtonTypes.PRIMARY, onCancel: function() {
        return onCancel();
      }, onSubmit: onInviteUsers, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE },
      import_react28.default.createElement(
        "div",
        { className: "sendbird-more-members__popup-scroll", onScroll },
        import_react28.default.createElement("div", { className: "sendbird-more-members__popup-scroll__inner" }, users.map(function(user) {
          var isMember = Boolean(membersMap ? membersMap[user.userId] : false);
          var isSelected = Boolean(selectedUsers[user.userId]);
          return import_react28.default.createElement(import_react28.default.Fragment, { key: user.userId }, renderUserListItem({
            user,
            checkBox: true,
            checked: isMember || isSelected,
            disabled: isMember,
            onChange: function() {
              return onSelectUser(user);
            }
          }));
        }))
      )
    )
  );
}
var MemberList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react28.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react28.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react28.useState)(false), hasNext = _e[0], setHasNext = _e[1];
  var _f = (0, import_react28.useState)(false), showAllMembers = _f[0], setShowAllMembers = _f[1];
  var _g = (0, import_react28.useState)(false), showInviteUsers = _g[0], setShowInviteUsers = _g[1];
  var _h = useChannelSettingsContext(), channel = _h.channel, forceUpdateUI = _h.forceUpdateUI;
  var stringSet = (0, import_react28.useContext)(LocalizationContext).stringSet;
  var refreshList = (0, import_react28.useCallback)(function() {
    if (!channel) {
      setMembers([]);
      return;
    }
    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({ limit: 10 }, memberListQueryParams));
    memberUserListQuery.next().then(function(members2) {
      setMembers(members2);
      setHasNext(memberUserListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery]);
  (0, import_react28.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react28.default.createElement(
    "div",
    { className: "sendbird-channel-settings-member-list" },
    members.map(function(member, index) {
      return import_react28.default.createElement(import_react28.default.Fragment, { key: member.userId }, renderUserListItem({
        // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.
        index,
        user: member,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react28.default.createElement(UserListItemMenu, __assign({}, props, { onToggleOperatorState: function(_a2) {
            var isOperator3 = _a2.newStatus;
            var newMembers = __spreadArray([], members, true);
            for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {
              var newMember = newMembers_1[_i];
              if (newMember.userId === member.userId) {
                newMember.role = isOperator3 ? V.OPERATOR : V.NONE;
                break;
              }
            }
            setMembers(newMembers);
          }, onToggleMuteState: function(_a2) {
            var isMuted = _a2.newStatus;
            var newMembers = __spreadArray([], members, true);
            for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {
              var newMember = newMembers_2[_i];
              if (newMember.userId === member.userId) {
                newMember.isMuted = isMuted;
                break;
              }
            }
            setMembers(newMembers);
          }, onToggleBanState: function() {
            setMembers(members.filter(function(_a2) {
              var userId = _a2.userId;
              return userId !== member.userId;
            }));
          } }));
        }
      }));
    }),
    import_react28.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      hasNext && import_react28.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        return setShowAllMembers(true);
      } }, stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS),
      import_react28.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        return setShowInviteUsers(true);
      } }, stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER)
    ),
    showAllMembers && import_react28.default.createElement(MembersModal, { onCancel: function() {
      setShowAllMembers(false);
      refreshList();
      forceUpdateUI();
    }, renderUserListItem, memberListQueryParams }),
    showInviteUsers && import_react28.default.createElement(InviteUsersModal, { onCancel: function() {
      return setShowInviteUsers(false);
    }, onSubmit: function() {
      setShowInviteUsers(false);
      refreshList();
      forceUpdateUI();
    }, renderUserListItem })
  );
};

// node_modules/@sendbird/uikit-react/ui/Toggle.js
var import_react29 = __toESM(require_react(), 1);
var noop2 = function() {
};
var TOGGLE_DEFAULT_VALUE = {
  checked: null,
  defaultChecked: false,
  disabled: false,
  onChange: noop2,
  onFocus: noop2,
  onBlur: noop2
};
var ToggleContext = import_react29.default.createContext(TOGGLE_DEFAULT_VALUE);
function useToggleContext() {
  var context = import_react29.default.useContext(ToggleContext);
  if (context === void 0) {
    throw new Error("@sendbird/uikit-react/ui/Toggle: useToggleContext must be used within a ToggleContainer.");
  }
  return context;
}
function ToggleContainer(_a) {
  var _b = _a.checked, checked = _b === void 0 ? TOGGLE_DEFAULT_VALUE.checked : _b, _c = _a.defaultChecked, defaultChecked = _c === void 0 ? TOGGLE_DEFAULT_VALUE.defaultChecked : _c, _d = _a.disabled, disabled = _d === void 0 ? TOGGLE_DEFAULT_VALUE.disabled : _d, _e = _a.onChange, onChange = _e === void 0 ? TOGGLE_DEFAULT_VALUE.onChange : _e, _f = _a.onFocus, onFocus = _f === void 0 ? TOGGLE_DEFAULT_VALUE.onFocus : _f, _g = _a.onBlur, onBlur = _g === void 0 ? TOGGLE_DEFAULT_VALUE.onBlur : _g, children = _a.children;
  var _h = (0, import_react29.useState)(defaultChecked || false), isChecked = _h[0], setChecked = _h[1];
  var handleChange = (0, import_react29.useCallback)(function(e) {
    if (disabled) {
      return;
    }
    if (checked === null) {
      setChecked(e.currentTarget.checked);
    }
    onChange(e);
  }, [onChange, checked]);
  return import_react29.default.createElement(ToggleContext.Provider, { value: {
    checked: checked !== null ? checked : isChecked,
    disabled,
    onChange: handleChange,
    onFocus: function(e) {
      if (!disabled) {
        onFocus(e);
      }
    },
    onBlur: function(e) {
      if (!disabled) {
        onBlur(e);
      }
    }
  } }, children);
}
function filterNumber(input) {
  if (typeof input !== "string" && typeof input !== "number") {
    try {
      var config = useSendbirdStateContext().config;
      var logger = config.logger;
      logger.warning("@sendbird/uikit-react/ui/Toggle: TypeError - expected string or number.", input);
    } catch (_) {
    }
    return [];
  }
  if (typeof input === "number") {
    return [input];
  }
  var regex = /(-?\d+)(\.\d+)?/g;
  var numbers = input.match(regex) || [];
  return numbers.map(parseFloat);
}
function ToggleUI(props) {
  var _a;
  var _b = props.reversed, reversed = _b === void 0 ? false : _b, _c = props.width, width = _c === void 0 ? "40px" : _c, _d = props.animationDuration, animationDuration = _d === void 0 ? "0.5s" : _d, _e = props.style, style = _e === void 0 ? {} : _e, _f = props.name, name = _f === void 0 ? "" : _f, _g = props.id, id = _g === void 0 ? "" : _g, _h = props.ariaLabel, ariaLabel = _h === void 0 ? "" : _h, _j = props.ariaLabelledby, ariaLabelledby = _j === void 0 ? "" : _j;
  var _k = useToggleContext(), checked = _k.checked, disabled = _k.disabled, onChange = _k.onChange, onFocus = _k.onFocus, onBlur = _k.onBlur;
  var _l = (0, import_react29.useState)(""), animatedClassName = _l[0], setAnimatedClassName = _l[1];
  var toggleWidth = (_a = filterNumber(width)) === null || _a === void 0 ? void 0 : _a[0];
  var toggleHeight = toggleWidth / 2;
  var dotSize = toggleHeight * 0.6;
  return import_react29.default.createElement(
    "label",
    { className: [
      "sendbird-input-toggle-button",
      animatedClassName,
      checked ? "sendbird-input-toggle-button--checked" : "sendbird-input-toggle-button--unchecked",
      disabled ? "sendbird-input-toggle-button--disabled" : [],
      reversed ? "sendbird-input-toggle-button--reversed" : []
    ].flat().join(" "), "data-testid": "sendbird-input-toggle-button", style: __assign({ width: "".concat(toggleWidth, "px"), height: "".concat(toggleHeight, "px"), borderRadius: "".concat(dotSize, "px") }, style) },
    import_react29.default.createElement("div", { className: [
      "sendbird-input-toggle-button__inner-dot",
      checked ? "sendbird-input-toggle-button__inner-dot--activate" : "sendbird-input-toggle-button__inner-dot--inactivate"
    ].join(" "), style: {
      width: "".concat(dotSize, "px"),
      height: "".concat(dotSize, "px"),
      animationDuration
    } }),
    import_react29.default.createElement("input", { type: "checkbox", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, name, id, checked: checked !== null && checked !== void 0 ? checked : void 0, disabled, onChange: function(e) {
      onChange === null || onChange === void 0 ? void 0 : onChange(e);
      setAnimatedClassName(e.currentTarget.checked ? "sendbird-input-toggle-button--turned-on" : "sendbird-input-toggle-button--turned-off");
    }, onFocus, onBlur })
  );
}
function Toggle(props) {
  var checked = props.checked, defaultChecked = props.defaultChecked, disabled = props.disabled, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, className = props.className, reversed = props.reversed, width = props.width, animationDuration = props.animationDuration, style = props.style, name = props.name, id = props.id, ariaLabel = props.ariaLabel, ariaLabelledby = props.ariaLabelledby;
  return import_react29.default.createElement(
    "div",
    { className: "sendbird-ui-toggle ".concat(className) },
    import_react29.default.createElement(
      ToggleContainer,
      { checked, defaultChecked, disabled, onChange, onFocus, onBlur },
      import_react29.default.createElement(ToggleUI, { reversed, width, animationDuration, style, name, id, ariaLabel, ariaLabelledby })
    )
  );
}

// node_modules/@sendbird/uikit-react/ChannelSettings/hooks/useMenuList.js
var import_react_dom17 = __toESM(require_react_dom(), 1);
var kFormatter = function(num) {
  return Math.abs(num) > 999 ? "".concat((Math.abs(num) / 1e3).toFixed(1), "K") : num;
};
var commonIconProps = {
  fillColor: IconColors.PRIMARY,
  width: 24,
  height: 24,
  className: "sendbird-channel-settings__accordion-icon"
};
var commonLabelProps = {
  type: LabelTypography.SUBTITLE_1,
  color: LabelColors.ONBACKGROUND_1
};
var useMenuItems = function() {
  var _a = (0, import_react30.useState)(false), frozen = _a[0], setFrozen = _a[1];
  var stringSet = (0, import_react30.useContext)(LocalizationContext).stringSet;
  var _b = useChannelSettingsContext(), channel = _b.channel, renderUserListItem = _b.renderUserListItem;
  (0, import_react30.useEffect)(function() {
    var _a2;
    setFrozen((_a2 = channel === null || channel === void 0 ? void 0 : channel.isFrozen) !== null && _a2 !== void 0 ? _a2 : false);
  }, [channel === null || channel === void 0 ? void 0 : channel.isFrozen]);
  return (0, import_react30.useMemo)(function() {
    return {
      operator: {
        operators: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.OPERATOR }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__OPERATORS__TITLE }),
          accordionComponent: function() {
            return import_react30.default.createElement(OperatorList, { renderUserListItem });
          }
        },
        allUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.MEMBERS }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__MEMBERS__TITLE }),
          rightComponent: function(props) {
            return import_react30.default.createElement(
              "div",
              { className: "sendbird-channel-settings__members" },
              import_react30.default.createElement(Badge, { count: (channel === null || channel === void 0 ? void 0 : channel.memberCount) ? kFormatter(channel.memberCount) : "" }),
              import_react30.default.createElement(MenuItemAction, __assign({}, props))
            );
          },
          accordionComponent: function() {
            return import_react30.default.createElement(MemberList, { renderUserListItem });
          }
        },
        mutedUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.MUTE }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE }),
          accordionComponent: function() {
            return import_react30.default.createElement(MutedMemberList, { renderUserListItem });
          }
        },
        bannedUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.BAN }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__BANNED_MEMBERS__TITLE }),
          accordionComponent: function() {
            return import_react30.default.createElement(BannedUserList, { renderUserListItem });
          }
        },
        freezeChannel: {
          hideMenu: channel === null || channel === void 0 ? void 0 : channel.isBroadcast,
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.FREEZE }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__FREEZE_CHANNEL }),
          rightComponent: function() {
            return import_react30.default.createElement(Toggle, { className: "sendbird-channel-settings__frozen-icon", checked: frozen, onChange: function() {
              if (frozen) {
                channel === null || channel === void 0 ? void 0 : channel.unfreeze().then(function() {
                  setFrozen(function(prev) {
                    return !prev;
                  });
                });
              } else {
                channel === null || channel === void 0 ? void 0 : channel.freeze().then(function() {
                  setFrozen(function(prev) {
                    return !prev;
                  });
                });
              }
            } });
          }
        }
      },
      nonOperator: {
        allUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.MEMBERS }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__MEMBERS__TITLE }),
          rightComponent: function(props) {
            return import_react30.default.createElement(
              "div",
              { className: "sendbird-channel-settings__members" },
              import_react30.default.createElement(Badge, { count: (channel === null || channel === void 0 ? void 0 : channel.memberCount) ? kFormatter(channel.memberCount) : "" }),
              import_react30.default.createElement(MenuItemAction, __assign({}, props))
            );
          },
          accordionComponent: function() {
            return import_react30.default.createElement(MemberList, { renderUserListItem });
          }
        }
      }
    };
  }, [channel === null || channel === void 0 ? void 0 : channel.url, frozen]);
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsUI.js
var import_react_dom18 = __toESM(require_react_dom(), 1);
var ChannelSettingsUI = function(props) {
  var _a;
  var _b = useChannelSettingsContext(), channel = _b.channel, invalidChannel = _b.invalidChannel, onCloseClick = _b.onCloseClick, loading = _b.loading;
  var _c = deleteNullish(props), _d = _c.renderHeader, renderHeader = _d === void 0 ? function(props2) {
    return import_react31.default.createElement(ChannelSettingsHeader, __assign({}, props2));
  } : _d, renderLeaveChannel = _c.renderLeaveChannel, renderChannelProfile = _c.renderChannelProfile, _e = _c.renderModerationPanel, renderModerationPanel = _e === void 0 ? function(props2) {
    return import_react31.default.createElement(MenuListByRole, __assign({}, props2));
  } : _e, renderPlaceholderError = _c.renderPlaceholderError, renderPlaceholderLoading = _c.renderPlaceholderLoading;
  var menuItems = useMenuItems();
  var state = useSendbirdStateContext();
  var _f = (0, import_react31.useState)(false), showLeaveChannelModal = _f[0], setShowLeaveChannelModal = _f[1];
  var isOnline = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.isOnline;
  var stringSet = (0, import_react31.useContext)(LocalizationContext).stringSet;
  if (loading) {
    if (renderPlaceholderLoading)
      return renderPlaceholderLoading();
    return import_react31.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
  }
  var headerProps = { onCloseClick };
  if (invalidChannel || !channel) {
    return import_react31.default.createElement(
      "div",
      null,
      renderHeader(headerProps),
      import_react31.default.createElement("div", null, renderPlaceholderError ? renderPlaceholderError() : import_react31.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG }))
    );
  }
  return import_react31.default.createElement(
    import_react31.default.Fragment,
    null,
    renderHeader(headerProps),
    import_react31.default.createElement(
      "div",
      { className: "sendbird-channel-settings__scroll-area" },
      (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || import_react31.default.createElement(ChannelProfile, null),
      renderModerationPanel === null || renderModerationPanel === void 0 ? void 0 : renderModerationPanel({ menuItems }),
      (renderLeaveChannel === null || renderLeaveChannel === void 0 ? void 0 : renderLeaveChannel()) || import_react31.default.createElement(MenuItem2, { className: classnames(!isOnline ? "sendbird-channel-settings__panel-item__disabled" : "", "sendbird-channel-settings__panel-item__leave-channel"), onKeyDown: function() {
        if (!isOnline)
          return;
        setShowLeaveChannelModal(true);
      }, onClick: function() {
        if (!isOnline)
          return;
        setShowLeaveChannelModal(true);
      }, renderLeft: function() {
        return import_react31.default.createElement(Icon, { className: ["sendbird-channel-settings__panel-icon-left", "sendbird-channel-settings__panel-icon__leave"].join(" "), type: IconTypes.LEAVE, fillColor: IconColors.ERROR, height: "24px", width: "24px" });
      }, renderMiddle: function() {
        return import_react31.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE);
      } }),
      showLeaveChannelModal && import_react31.default.createElement(LeaveChannel, { onCancel: function() {
        setShowLeaveChannelModal(false);
      }, onSubmit: function() {
        setShowLeaveChannelModal(false);
        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
      } })
    )
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings.js
var import_react_dom19 = __toESM(require_react_dom(), 1);
var ChannelSettings = function(props) {
  return import_react32.default.createElement(
    ChannelSettingsProvider,
    __assign({}, props),
    import_react32.default.createElement(ChannelSettingsUI, __assign({}, props))
  );
};

// node_modules/@sendbird/uikit-react/MessageSearch.js
var import_react37 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/MessageSearch/components/MessageSearchUI.js
var import_react36 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/MessageSearch/context.js
var import_react33 = __toESM(require_react(), 1);
var GET_SEARCHED_MESSAGES = "GET_SEARCHED_MESSAGES";
var GET_NEXT_SEARCHED_MESSAGES = "GET_NEXT_SEARCHED_MESSAGES";
var START_MESSAGE_SEARCH = "START_MESSAGE_SEARCH";
var START_GETTING_SEARCHED_MESSAGES = "START_GETTING_SEARCHED_MESSAGES";
var SET_QUERY_INVALID = "SET_QUERY_INVALID";
var SET_CURRENT_CHANNEL3 = "SET_CURRENT_CHANNEL";
var CHANNEL_INVALID = "CHANNEL_INVALID";
var RESET_SEARCH_STRING = "RESET_SEARCH_STRING";
function reducer2(state, action) {
  switch (action.type) {
    case SET_CURRENT_CHANNEL3: {
      var currentChannel = action.payload;
      return __assign(__assign({}, state), { currentChannel, initialized: true });
    }
    case CHANNEL_INVALID: {
      return __assign(__assign({}, state), { currentChannel: null, initialized: false });
    }
    case GET_SEARCHED_MESSAGES: {
      var _a = action.payload, messages = _a.messages, createdQuery = _a.createdQuery;
      if (createdQuery && createdQuery.channelUrl === (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).channelUrl && createdQuery.key === (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).key) {
        return __assign(__assign({}, state), { loading: false, isInvalid: false, allMessages: __spreadArray([], messages, true), hasMoreResult: (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).hasNext });
      }
      return __assign({}, state);
    }
    case SET_QUERY_INVALID: {
      return __assign(__assign({}, state), { isInvalid: true });
    }
    case START_MESSAGE_SEARCH: {
      return __assign(__assign({}, state), { isInvalid: false, loading: false });
    }
    case START_GETTING_SEARCHED_MESSAGES: {
      var currentMessageSearchQuery = action.payload;
      return __assign(__assign({}, state), { loading: true, currentMessageSearchQuery });
    }
    case GET_NEXT_SEARCHED_MESSAGES: {
      var messages = action.payload;
      return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true), hasMoreResult: (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).hasNext });
    }
    case RESET_SEARCH_STRING: {
      return __assign(__assign({}, state), { allMessages: [] });
    }
    default: {
      return state;
    }
  }
}
var initialState4 = {
  allMessages: [],
  loading: false,
  isInvalid: false,
  initialized: false,
  currentChannel: null,
  currentMessageSearchQuery: null,
  hasMoreResult: false
};
function useSetChannel(_a, _b) {
  var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit;
  var sdk = _b.sdk, logger = _b.logger, messageSearchDispatcher = _b.messageSearchDispatcher;
  (0, import_react33.useEffect)(function() {
    if (channelUrl && sdkInit && (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel)) {
      sdk.groupChannel.getChannel(channelUrl).then(function(groupChannel) {
        logger.info("MessageSearch | useSetChannel group channel", groupChannel);
        messageSearchDispatcher({
          type: SET_CURRENT_CHANNEL3,
          payload: groupChannel
        });
      }).catch(function() {
        messageSearchDispatcher({
          type: CHANNEL_INVALID,
          payload: null
        });
      });
    }
  }, [channelUrl, sdkInit]);
}
var MessageSearchOrder;
(function(MessageSearchOrder2) {
  MessageSearchOrder2["SCORE"] = "score";
  MessageSearchOrder2["TIMESTAMP"] = "ts";
})(MessageSearchOrder || (MessageSearchOrder = {}));
function useGetSearchedMessages(_a, _b) {
  var currentChannel = _a.currentChannel, channelUrl = _a.channelUrl, requestString = _a.requestString, messageSearchQuery = _a.messageSearchQuery, onResultLoaded = _a.onResultLoaded, retryCount = _a.retryCount;
  var sdk = _b.sdk, logger = _b.logger, messageSearchDispatcher = _b.messageSearchDispatcher;
  (0, import_react33.useEffect)(function() {
    messageSearchDispatcher({
      type: START_MESSAGE_SEARCH,
      payload: null
    });
    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {
      if (requestString) {
        currentChannel.refresh().then(function(channel) {
          var inputSearchMessageQueryObject = __assign({ order: MessageSearchOrder.TIMESTAMP, channelUrl, messageTimestampFrom: channel.invitedAt, keyword: requestString }, messageSearchQuery);
          var createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);
          createdQuery.next().then(function(messages) {
            logger.info("MessageSearch | useGetSearchedMessages: succeeded getting messages", messages);
            messageSearchDispatcher({
              type: GET_SEARCHED_MESSAGES,
              payload: {
                messages,
                createdQuery
              }
            });
            if (onResultLoaded && typeof onResultLoaded === "function") {
              onResultLoaded(messages, void 0);
            }
          }).catch(function(error) {
            logger.warning("MessageSearch | useGetSearchedMessages: failed getting search messages.", error);
            messageSearchDispatcher({
              type: SET_QUERY_INVALID,
              payload: null
            });
            if (onResultLoaded && typeof onResultLoaded === "function") {
              onResultLoaded(void 0, error);
            }
          });
          messageSearchDispatcher({
            type: START_GETTING_SEARCHED_MESSAGES,
            payload: createdQuery
          });
        }).catch(function(error) {
          logger.warning("MessageSearch | useGetSearchedMessages: failed getting channel.", error);
          messageSearchDispatcher({
            type: SET_QUERY_INVALID,
            payload: null
          });
          if (onResultLoaded && typeof onResultLoaded === "function") {
            onResultLoaded(void 0, error);
          }
        });
      } else {
        logger.info("MessageSearch | useGetSeasrchedMessages: search string is empty");
      }
    }
  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);
}
function useScrollCallback2(_a, _b) {
  var currentMessageSearchQuery = _a.currentMessageSearchQuery, hasMoreResult = _a.hasMoreResult, onResultLoaded = _a.onResultLoaded;
  var logger = _b.logger, messageSearchDispatcher = _b.messageSearchDispatcher;
  return (0, import_react33.useCallback)(function(cb) {
    if (!hasMoreResult) {
      logger.warning("MessageSearch | useScrollCallback: no more searched results", hasMoreResult);
    }
    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {
      currentMessageSearchQuery.next().then(function(messages) {
        logger.info("MessageSearch | useScrollCallback: succeeded getting searched messages", messages);
        messageSearchDispatcher({
          type: GET_NEXT_SEARCHED_MESSAGES,
          payload: messages
        });
        cb(messages, null);
        if (onResultLoaded && typeof onResultLoaded === "function") {
          onResultLoaded(messages, null);
        }
      }).catch(function(error) {
        logger.warning("MessageSearch | useScrollCallback: failed getting searched messages", error);
        cb(null, error);
        if (onResultLoaded && typeof onResultLoaded === "function") {
          onResultLoaded(null, error);
        }
      });
    } else {
      logger.warning("MessageSearch | useScrollCallback: no currentMessageSearchQuery");
    }
  }, [currentMessageSearchQuery, hasMoreResult]);
}
var DEBOUNCING_TIME = 500;
function useSearchStringEffect(_a, _b) {
  var searchString = _a.searchString;
  var messageSearchDispatcher = _b.messageSearchDispatcher;
  var _c = (0, import_react33.useState)(""), requestString = _c[0], setRequestString = _c[1];
  var _d = (0, import_react33.useState)(null), debouncingTimer = _d[0], setDebouncingTimer = _d[1];
  (0, import_react33.useEffect)(function() {
    clearTimeout(debouncingTimer !== null && debouncingTimer !== void 0 ? debouncingTimer : void 0);
    if (searchString) {
      setDebouncingTimer(setTimeout(function() {
        setRequestString(searchString);
      }, DEBOUNCING_TIME));
    } else {
      setRequestString("");
      messageSearchDispatcher({
        type: RESET_SEARCH_STRING,
        payload: ""
      });
    }
  }, [searchString]);
  return requestString;
}
var MessageSearchContext = import_react33.default.createContext(null);
var MessageSearchProvider = function(props) {
  var _a, _b, _c, _d, _e;
  var channelUrl = props.channelUrl, searchString = props.searchString, messageSearchQuery = props.messageSearchQuery, onResultLoaded = props.onResultLoaded, onResultClick = props.onResultClick;
  var globalState = useSendbirdStateContext();
  var _f = (0, import_react33.useState)(0), retryCount = _f[0], setRetryCount = _f[1];
  var _g = (0, import_react33.useState)(0), selectedMessageId = _g[0], setSelectedMessageId = _g[1];
  var _h = (0, import_react33.useReducer)(reducer2, initialState4), messageSearchStore = _h[0], messageSearchDispatcher = _h[1];
  var allMessages = messageSearchStore.allMessages, loading = messageSearchStore.loading, isInvalid = messageSearchStore.isInvalid, currentChannel = messageSearchStore.currentChannel, currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery, hasMoreResult = messageSearchStore.hasMoreResult;
  var logger = (_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.logger;
  var sdk = (_c = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var sdkInit = (_e = (_d = globalState === null || globalState === void 0 ? void 0 : globalState.stores) === null || _d === void 0 ? void 0 : _d.sdkStore) === null || _e === void 0 ? void 0 : _e.initialized;
  var scrollRef = (0, import_react33.useRef)(null);
  var handleOnScroll = function(e) {
    var scrollElement = e.target;
    var scrollTop = scrollElement.scrollTop, scrollHeight = scrollElement.scrollHeight, clientHeight = scrollElement.clientHeight;
    if (!hasMoreResult) {
      return;
    }
    if (scrollTop + clientHeight >= scrollHeight) {
      onScroll(function() {
      });
    }
  };
  useSetChannel({ channelUrl, sdkInit }, { sdk, logger, messageSearchDispatcher });
  var requestString = useSearchStringEffect({ searchString: searchString !== null && searchString !== void 0 ? searchString : "" }, { messageSearchDispatcher });
  useGetSearchedMessages({ currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }, { sdk, logger, messageSearchDispatcher });
  var onScroll = useScrollCallback2({ currentMessageSearchQuery, hasMoreResult, onResultLoaded }, { logger, messageSearchDispatcher });
  var handleRetryToConnect = function() {
    setRetryCount(retryCount + 1);
  };
  return import_react33.default.createElement(MessageSearchContext.Provider, { value: {
    channelUrl,
    searchString,
    requestString,
    messageSearchQuery,
    onResultLoaded,
    onResultClick,
    retryCount,
    setRetryCount,
    selectedMessageId,
    setSelectedMessageId,
    messageSearchDispatcher,
    allMessages,
    loading,
    isInvalid,
    currentChannel,
    currentMessageSearchQuery,
    hasMoreResult,
    onScroll,
    scrollRef,
    handleRetryToConnect,
    handleOnScroll
  } }, props === null || props === void 0 ? void 0 : props.children);
};
var useMessageSearchContext = function() {
  var context = import_react33.default.useContext(MessageSearchContext);
  if (!context)
    throw new Error("MessageSearchContext not found. Use within the MessageSearch module.");
  return context;
};

// node_modules/@sendbird/uikit-react/ui/MessageSearchItem.js
var import_react34 = __toESM(require_react(), 1);
function getCreatedAt(_a) {
  var createdAt = _a.createdAt, locale = _a.locale, stringSet = _a.stringSet;
  var optionalParam = { locale };
  if (!createdAt) {
    return "";
  }
  if (isToday(createdAt)) {
    return format(createdAt, "p", optionalParam);
  }
  if (isYesterday(createdAt)) {
    return (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_STATUS__YESTERDAY) || "Yesterday";
  }
  if (isThisYear(createdAt)) {
    return format(createdAt, "MMM d", optionalParam);
  }
  return format(createdAt, "yyyy/M/d", optionalParam);
}
function MessageSearchItem(_a) {
  var className = _a.className, message = _a.message, selected = _a.selected, onClick = _a.onClick;
  var createdAt = message.createdAt;
  var messageText = message.message;
  var sender = message.sender || message._sender;
  var profileUrl = sender.profileUrl, nickname = sender.nickname;
  var _b = useLocalization(), stringSet = _b.stringSet, dateLocale = _b.dateLocale;
  return import_react34.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-message-search-item",
      selected ? "sendbird-message-search-item--selected" : ""
    ], false).join(" "), onClick: function(e) {
      e.stopPropagation();
      onClick === null || onClick === void 0 ? void 0 : onClick(message);
    } },
    import_react34.default.createElement(
      "div",
      { className: "sendbird-message-search-item__left" },
      import_react34.default.createElement(Avatar$1, { className: "sendbird-message-search-item__left__sender-avatar", src: profileUrl, alt: "profile image", width: "56px", height: "56px" })
    ),
    import_react34.default.createElement(
      "div",
      { className: "sendbird-message-search-item__right" },
      import_react34.default.createElement(Label, { className: "sendbird-message-search-item__right__sender-name", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, nickname || stringSet.NO_NAME),
      import_react34.default.createElement(Label, { className: "sendbird-message-search-item__right__message-text", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 }, messageText),
      import_react34.default.createElement(Label, { className: "sendbird-message-search-item__right__message-created-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, getCreatedAt({ createdAt, locale: dateLocale, stringSet }))
    ),
    import_react34.default.createElement("div", { className: "sendbird-message-search-item__right-footer" })
  );
}

// node_modules/@sendbird/uikit-react/ui/MessageSearchFileItem.js
var import_react35 = __toESM(require_react(), 1);
function getCreatedAt2(_a) {
  var createdAt = _a.createdAt, locale = _a.locale, stringSet = _a.stringSet;
  var optionalParam = { locale };
  if (!createdAt) {
    return "";
  }
  if (isToday(createdAt)) {
    return format(createdAt, "p", optionalParam);
  }
  if (isYesterday(createdAt)) {
    return (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_STATUS__YESTERDAY) || "Yesterday";
  }
  if (isThisYear(createdAt)) {
    return format(createdAt, "MMM d", optionalParam);
  }
  return format(createdAt, "yyyy/M/d", optionalParam);
}
function getIconOfFileType(message) {
  var _a, _b, _c;
  var fileMessageUrl = (_a = getMessageFirstFileUrl(message)) !== null && _a !== void 0 ? _a : "";
  var fileExtension = (_c = (_b = fileMessageUrl.match(/\.([^.]*?)(?=\?|#|$)/)) === null || _b === void 0 ? void 0 : _b[1]) !== null && _c !== void 0 ? _c : "";
  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {
    return IconTypes.PHOTO;
  } else if (/mp4$/i.test(fileExtension) || isVoiceMessage(message)) {
    return IconTypes.PLAY;
  } else if (/mp3/i.test(fileExtension)) {
    return IconTypes.FILE_AUDIO;
  } else if (/gif/i.test(fileExtension)) {
    return IconTypes.GIF;
  } else {
    return IconTypes.FILE_DOCUMENT;
  }
}
function MessageSearchFileItem(props) {
  var className = props.className, message = props.message, selected = props.selected, onClick = props.onClick;
  var createdAt = message.createdAt;
  var url = getMessageFirstFileUrl(message);
  var name = getMessageFirstFileName(message);
  var sender = message.sender || message._sender;
  var profileUrl = sender.profileUrl, nickname = sender.nickname;
  var _a = useLocalization(), stringSet = _a.stringSet, dateLocale = _a.dateLocale;
  var isVoiceMsg = isVoiceMessage(message);
  var prettyFilename = isVoiceMsg ? stringSet.VOICE_MESSAGE : name || url;
  return import_react35.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-message-search-file-item",
      selected ? "sendbird-message-search-file-item--selected" : ""
    ], false).join(" "), onClick: function(e) {
      e.stopPropagation();
      onClick === null || onClick === void 0 ? void 0 : onClick(message);
    } },
    import_react35.default.createElement(
      "div",
      { className: "sendbird-message-search-file-item__left" },
      import_react35.default.createElement(Avatar$1, { className: "sendbird-message-search-file-item__left__sender-avatar", src: profileUrl, alt: "profile image", width: "56px", height: "56px" })
    ),
    import_react35.default.createElement(
      "div",
      { className: "sendbird-message-search-file-item__right" },
      import_react35.default.createElement(Label, { className: "sendbird-message-search-file-item__right__sender-name", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, nickname || stringSet.NO_NAME),
      import_react35.default.createElement(
        "div",
        { className: "sendbird-message-search-file-item__right__content" },
        !isVoiceMsg && import_react35.default.createElement(
          "div",
          { className: "sendbird-message-search-file-item__right__content__type-icon" },
          import_react35.default.createElement(Icon, { type: getIconOfFileType(message), fillColor: IconColors.PRIMARY, width: "18px", height: "18px" })
        ),
        import_react35.default.createElement(Label, { className: "sendbird-message-search-file-item__right__content__url", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, prettyFilename)
      )
    ),
    import_react35.default.createElement(Label, { className: "sendbird-message-search-file-item__message-created-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, getCreatedAt2({ createdAt, locale: dateLocale, stringSet })),
    import_react35.default.createElement("div", { className: "sendbird-message-search-file-item__right-footer" })
  );
}

// node_modules/@sendbird/uikit-react/MessageSearch/components/MessageSearchUI.js
var MessageSearchUI = function(_a) {
  var renderPlaceHolderError = _a.renderPlaceHolderError, renderPlaceHolderLoading = _a.renderPlaceHolderLoading, renderPlaceHolderNoString = _a.renderPlaceHolderNoString, renderPlaceHolderEmptyList = _a.renderPlaceHolderEmptyList, renderSearchItem = _a.renderSearchItem;
  var _b = useMessageSearchContext(), isInvalid = _b.isInvalid, searchString = _b.searchString, requestString = _b.requestString, currentChannel = _b.currentChannel, retryCount = _b.retryCount, setRetryCount = _b.setRetryCount, loading = _b.loading, scrollRef = _b.scrollRef, hasMoreResult = _b.hasMoreResult, onScroll = _b.onScroll, allMessages = _b.allMessages, onResultClick = _b.onResultClick, selectedMessageId = _b.selectedMessageId, setSelectedMessageId = _b.setSelectedMessageId;
  var stringSet = (0, import_react36.useContext)(LocalizationContext).stringSet;
  var handleRetryToConnect = function() {
    setRetryCount(retryCount + 1);
  };
  var handleOnScroll = function(e) {
    var scrollElement = e.target;
    var scrollTop = scrollElement.scrollTop, scrollHeight = scrollElement.scrollHeight, clientHeight = scrollElement.clientHeight;
    if (!hasMoreResult) {
      return;
    }
    if (scrollTop + clientHeight >= scrollHeight - 1) {
      onScroll(function() {
      });
    }
  };
  var getChannelName = function() {
    if (currentChannel && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.name) && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.name) !== "Group Channel") {
      return currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.name;
    }
    if (currentChannel && ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.name) === "Group Channel" || !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.name))) {
      return currentChannel.members.map(function(member) {
        return member.nickname || stringSet.NO_NAME;
      }).join(", ");
    }
    return stringSet.NO_TITLE;
  };
  if (isInvalid && searchString && requestString) {
    return (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) || import_react36.default.createElement(
      "div",
      { className: "sendbird-message-search" },
      import_react36.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG, retryToConnect: handleRetryToConnect })
    );
  }
  if (loading && searchString && requestString) {
    return (renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading()) || import_react36.default.createElement(
      "div",
      { className: "sendbird-message-search" },
      import_react36.default.createElement(PlaceHolder, { type: PlaceHolderTypes.SEARCHING })
    );
  }
  if (!searchString) {
    return (renderPlaceHolderNoString === null || renderPlaceHolderNoString === void 0 ? void 0 : renderPlaceHolderNoString()) || import_react36.default.createElement(
      "div",
      { className: "sendbird-message-search" },
      import_react36.default.createElement(PlaceHolder, { type: PlaceHolderTypes.SEARCH_IN, searchInString: getChannelName() })
    );
  }
  return import_react36.default.createElement("div", { className: "sendbird-message-search", onScroll: handleOnScroll, ref: scrollRef }, allMessages.length > 0 ? allMessages.map(function(message) {
    if (renderSearchItem) {
      return renderSearchItem({ message, onResultClick });
    }
    if (message.messageType === "file") {
      return import_react36.default.createElement(MessageSearchFileItem, { className: "sendbird-message-search__message-search-item", message, key: message.messageId, selected: selectedMessageId === message.messageId, onClick: function() {
        onResultClick === null || onResultClick === void 0 ? void 0 : onResultClick(message);
        setSelectedMessageId(message.messageId);
      } });
    }
    return import_react36.default.createElement(MessageSearchItem, { className: "sendbird-message-search__message-search-item", message, key: message.messageId, selected: selectedMessageId === message.messageId, onClick: function() {
      onResultClick === null || onResultClick === void 0 ? void 0 : onResultClick(message);
      setSelectedMessageId(message.messageId);
    } });
  }) : (renderPlaceHolderEmptyList === null || renderPlaceHolderEmptyList === void 0 ? void 0 : renderPlaceHolderEmptyList()) || import_react36.default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_RESULTS }));
};

// node_modules/@sendbird/uikit-react/MessageSearch.js
function MessageSearchPannel(props) {
  var channelUrl = props.channelUrl, onResultClick = props.onResultClick, onCloseClick = props.onCloseClick, messageSearchQuery = props.messageSearchQuery, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderNoString = props.renderPlaceHolderNoString, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList, renderSearchItem = props.renderSearchItem;
  var _a = (0, import_react37.useState)(""), searchString = _a[0], setSearchString = _a[1];
  var _b = (0, import_react37.useState)(""), inputString = _b[0], setInputString = _b[1];
  var _c = (0, import_react37.useState)(false), loading = _c[0], setLoading = _c[1];
  var stringSet = (0, import_react37.useContext)(LocalizationContext).stringSet;
  var timeout = null;
  (0, import_react37.useEffect)(function() {
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(function() {
      setSearchString(inputString);
      setLoading(true);
      timeout = null;
    }, 500);
  }, [inputString]);
  var handleOnChangeInputString = function(e) {
    setInputString(e.target.value);
  };
  var handleOnResultLoaded = function() {
    setLoading(false);
  };
  var handleOnClickResetStringButton = function(e) {
    e.stopPropagation();
    setInputString("");
    setSearchString("");
  };
  return import_react37.default.createElement(
    "div",
    { className: "sendbird-message-search-pannel" },
    import_react37.default.createElement(Header$1, { className: "sendbird-message-search-pannel__header", renderMiddle: function() {
      return import_react37.default.createElement(Header$1.Title, { title: stringSet.SEARCH_IN_CHANNEL });
    }, renderRight: function() {
      return import_react37.default.createElement(Header$1.IconButton, { className: "sendbird-message-search-pannel__header__close-button", onClick: onCloseClick, type: IconTypes.CLOSE, color: IconColors.ON_BACKGROUND_1 });
    } }),
    import_react37.default.createElement(
      "div",
      { className: "sendbird-message-search-pannel__input" },
      import_react37.default.createElement(
        "div",
        { className: "sendbird-message-search-pannel__input__container" },
        import_react37.default.createElement(Icon, { className: "sendbird-message-search-pannel__input__container__search-icon", type: IconTypes.SEARCH, fillColor: IconColors.ON_BACKGROUND_3, width: "24px", height: "24px" }),
        import_react37.default.createElement("input", { className: "sendbird-message-search-pannel__input__container__input-area", placeholder: stringSet.SEARCH, value: inputString, onChange: handleOnChangeInputString }),
        inputString && loading && import_react37.default.createElement(
          Loader,
          { className: "sendbird-message-search-pannel__input__container__spinner", width: "20px", height: "20px" },
          import_react37.default.createElement(Icon, { type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: "20px", height: "20px" })
        ),
        !loading && inputString && import_react37.default.createElement(Icon, { className: "sendbird-message-search-pannel__input__container__reset-input-button", type: IconTypes.REMOVE, fillColor: IconColors.ON_BACKGROUND_3, width: "20px", height: "20px", onClick: handleOnClickResetStringButton })
      )
    ),
    import_react37.default.createElement(
      "div",
      { className: "sendbird-message-search-pannel__message-search" },
      import_react37.default.createElement(
        MessageSearchProvider,
        { channelUrl, searchString, onResultClick, onResultLoaded: handleOnResultLoaded, messageSearchQuery },
        import_react37.default.createElement(MessageSearchUI, { renderPlaceHolderError, renderPlaceHolderLoading, renderPlaceHolderNoString, renderPlaceHolderEmptyList, renderSearchItem })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/Thread.js
var import_react49 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Thread/context.js
var import_react38 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Thread/context/types.js
var ChannelStateTypes;
(function(ChannelStateTypes2) {
  ChannelStateTypes2["NIL"] = "NIL";
  ChannelStateTypes2["LOADING"] = "LOADING";
  ChannelStateTypes2["INVALID"] = "INVALID";
  ChannelStateTypes2["INITIALIZED"] = "INITIALIZED";
})(ChannelStateTypes || (ChannelStateTypes = {}));
var ParentMessageStateTypes;
(function(ParentMessageStateTypes2) {
  ParentMessageStateTypes2["NIL"] = "NIL";
  ParentMessageStateTypes2["LOADING"] = "LOADING";
  ParentMessageStateTypes2["INVALID"] = "INVALID";
  ParentMessageStateTypes2["INITIALIZED"] = "INITIALIZED";
})(ParentMessageStateTypes || (ParentMessageStateTypes = {}));
var ThreadListStateTypes;
(function(ThreadListStateTypes2) {
  ThreadListStateTypes2["NIL"] = "NIL";
  ThreadListStateTypes2["LOADING"] = "LOADING";
  ThreadListStateTypes2["INVALID"] = "INVALID";
  ThreadListStateTypes2["INITIALIZED"] = "INITIALIZED";
})(ThreadListStateTypes || (ThreadListStateTypes = {}));

// node_modules/@sendbird/uikit-react/Thread/context.js
var PREV_THREADS_FETCH_SIZE = 30;
var NEXT_THREADS_FETCH_SIZE = 30;
var ThreadContextActionTypes;
(function(ThreadContextActionTypes2) {
  ThreadContextActionTypes2["INIT_USER_ID"] = "INIT_USER_ID";
  ThreadContextActionTypes2["GET_CHANNEL_START"] = "GET_CHANNEL_START";
  ThreadContextActionTypes2["GET_CHANNEL_SUCCESS"] = "GET_CHANNEL_SUCCESS";
  ThreadContextActionTypes2["GET_CHANNEL_FAILURE"] = "GET_CHANNEL_FAILURE";
  ThreadContextActionTypes2["SET_EMOJI_CONTAINER"] = "SET_EMOJI_CONTAINER";
  ThreadContextActionTypes2["GET_PARENT_MESSAGE_START"] = "GET_PARENT_MESSAGE_START";
  ThreadContextActionTypes2["GET_PARENT_MESSAGE_SUCCESS"] = "GET_PARENT_MESSAGE_SUCCESS";
  ThreadContextActionTypes2["GET_PARENT_MESSAGE_FAILURE"] = "GET_PARENT_MESSAGE_FAILURE";
  ThreadContextActionTypes2["INITIALIZE_THREAD_LIST_START"] = "INITIALIZE_THREAD_LIST_START";
  ThreadContextActionTypes2["INITIALIZE_THREAD_LIST_SUCCESS"] = "INITIALIZE_THREAD_LIST_SUCCESS";
  ThreadContextActionTypes2["INITIALIZE_THREAD_LIST_FAILURE"] = "INITIALIZE_THREAD_LIST_FAILURE";
  ThreadContextActionTypes2["GET_PREV_MESSAGES_START"] = "GET_PREV_MESSAGES_START";
  ThreadContextActionTypes2["GET_PREV_MESSAGES_SUCESS"] = "GET_PREV_MESSAGES_SUCESS";
  ThreadContextActionTypes2["GET_PREV_MESSAGES_FAILURE"] = "GET_PREV_MESSAGES_FAILURE";
  ThreadContextActionTypes2["GET_NEXT_MESSAGES_START"] = "GET_NEXT_MESSAGES_START";
  ThreadContextActionTypes2["GET_NEXT_MESSAGES_SUCESS"] = "GET_NEXT_MESSAGES_SUCESS";
  ThreadContextActionTypes2["GET_NEXT_MESSAGES_FAILURE"] = "GET_NEXT_MESSAGES_FAILURE";
  ThreadContextActionTypes2["SEND_MESSAGE_START"] = "SEND_MESSAGE_START";
  ThreadContextActionTypes2["SEND_MESSAGE_SUCESS"] = "SEND_MESSAGE_SUCESS";
  ThreadContextActionTypes2["SEND_MESSAGE_FAILURE"] = "SEND_MESSAGE_FAILURE";
  ThreadContextActionTypes2["RESEND_MESSAGE_START"] = "RESEND_MESSAGE_START";
  ThreadContextActionTypes2["ON_MESSAGE_DELETED_BY_REQ_ID"] = "ON_MESSAGE_DELETED_BY_REQ_ID";
  ThreadContextActionTypes2["ON_MESSAGE_RECEIVED"] = "ON_MESSAGE_RECEIVED";
  ThreadContextActionTypes2["ON_MESSAGE_UPDATED"] = "ON_MESSAGE_UPDATED";
  ThreadContextActionTypes2["ON_MESSAGE_DELETED"] = "ON_MESSAGE_DELETED";
  ThreadContextActionTypes2["ON_REACTION_UPDATED"] = "ON_REACTION_UPDATED";
  ThreadContextActionTypes2["ON_FILE_INFO_UPLOADED"] = "ON_FILE_INFO_UPLOADED";
  ThreadContextActionTypes2["ON_USER_MUTED"] = "ON_USER_MUTED";
  ThreadContextActionTypes2["ON_USER_UNMUTED"] = "ON_USER_UNMUTED";
  ThreadContextActionTypes2["ON_USER_BANNED"] = "ON_USER_BANNED";
  ThreadContextActionTypes2["ON_USER_UNBANNED"] = "ON_USER_UNBANNED";
  ThreadContextActionTypes2["ON_USER_LEFT"] = "ON_USER_LEFT";
  ThreadContextActionTypes2["ON_CHANNEL_FROZEN"] = "ON_CHANNEL_FROZEN";
  ThreadContextActionTypes2["ON_CHANNEL_UNFROZEN"] = "ON_CHANNEL_UNFROZEN";
  ThreadContextActionTypes2["ON_OPERATOR_UPDATED"] = "ON_OPERATOR_UPDATED";
  ThreadContextActionTypes2["ON_TYPING_STATUS_UPDATED"] = "ON_TYPING_STATUS_UPDATED";
})(ThreadContextActionTypes || (ThreadContextActionTypes = {}));
function reducer3(state, action) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
  switch (action.type) {
    case ThreadContextActionTypes.INIT_USER_ID: {
      return __assign(__assign({}, state), { currentUserId: action.payload });
    }
    case ThreadContextActionTypes.GET_CHANNEL_START: {
      return __assign(__assign({}, state), { channelState: ChannelStateTypes.LOADING, currentChannel: null });
    }
    case ThreadContextActionTypes.GET_CHANNEL_SUCCESS: {
      var groupChannel = action.payload.groupChannel;
      return __assign(__assign({}, state), {
        channelState: ChannelStateTypes.INITIALIZED,
        currentChannel: groupChannel,
        // only support in normal group channel
        isMuted: ((_b = (_a = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.members) === null || _a === void 0 ? void 0 : _a.find(function(member) {
          return (member === null || member === void 0 ? void 0 : member.userId) === state.currentUserId;
        })) === null || _b === void 0 ? void 0 : _b.isMuted) || false,
        isChannelFrozen: (groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.isFrozen) || false
      });
    }
    case ThreadContextActionTypes.GET_CHANNEL_FAILURE: {
      return __assign(__assign({}, state), { channelState: ChannelStateTypes.INVALID, currentChannel: null });
    }
    case ThreadContextActionTypes.SET_EMOJI_CONTAINER: {
      var emojiContainer = action.payload.emojiContainer;
      return __assign(__assign({}, state), { emojiContainer });
    }
    case ThreadContextActionTypes.GET_PARENT_MESSAGE_START: {
      return __assign(__assign({}, state), { parentMessageState: ParentMessageStateTypes.LOADING, parentMessage: null });
    }
    case ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS: {
      return __assign(__assign({}, state), { parentMessageState: ParentMessageStateTypes.INITIALIZED, parentMessage: action.payload.parentMessage });
    }
    case ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE: {
      return __assign(__assign({}, state), { parentMessageState: ParentMessageStateTypes.INVALID, parentMessage: null });
    }
    case ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START: {
      return __assign(__assign({}, state), { threadListState: ThreadListStateTypes.LOADING, allThreadMessages: [] });
    }
    case ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS: {
      var _z = action.payload, parentMessage = _z.parentMessage, anchorMessage = _z.anchorMessage, threadedMessages = _z.threadedMessages;
      var anchorMessageCreatedAt_1 = !(anchorMessage === null || anchorMessage === void 0 ? void 0 : anchorMessage.messageId) ? parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.createdAt : anchorMessage === null || anchorMessage === void 0 ? void 0 : anchorMessage.createdAt;
      var anchorIndex = threadedMessages.findIndex(function(message2) {
        return (message2 === null || message2 === void 0 ? void 0 : message2.createdAt) > anchorMessageCreatedAt_1;
      });
      var prevThreadMessages = anchorIndex > -1 ? threadedMessages.slice(0, anchorIndex) : threadedMessages;
      var anchorThreadMessage = (anchorMessage === null || anchorMessage === void 0 ? void 0 : anchorMessage.messageId) ? [anchorMessage] : [];
      var nextThreadMessages = anchorIndex > -1 ? threadedMessages.slice(anchorIndex) : [];
      return __assign(__assign({}, state), { threadListState: ThreadListStateTypes.INITIALIZED, hasMorePrev: anchorIndex === -1 || anchorIndex === PREV_THREADS_FETCH_SIZE, hasMoreNext: threadedMessages.length - anchorIndex === NEXT_THREADS_FETCH_SIZE, allThreadMessages: [prevThreadMessages, anchorThreadMessage, nextThreadMessages].flat() });
    }
    case ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE: {
      return __assign(__assign({}, state), { threadListState: ThreadListStateTypes.INVALID, allThreadMessages: [] });
    }
    case ThreadContextActionTypes.GET_NEXT_MESSAGES_START: {
      return __assign({}, state);
    }
    case ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS: {
      var threadedMessages = action.payload.threadedMessages;
      return __assign(__assign({}, state), { hasMoreNext: threadedMessages.length === NEXT_THREADS_FETCH_SIZE, allThreadMessages: __spreadArray(__spreadArray([], state.allThreadMessages, true), threadedMessages, true) });
    }
    case ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE: {
      return __assign(__assign({}, state), { hasMoreNext: false });
    }
    case ThreadContextActionTypes.GET_PREV_MESSAGES_START: {
      return __assign({}, state);
    }
    case ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS: {
      var threadedMessages = action.payload.threadedMessages;
      return __assign(__assign({}, state), { hasMorePrev: threadedMessages.length === PREV_THREADS_FETCH_SIZE, allThreadMessages: __spreadArray(__spreadArray([], threadedMessages, true), state.allThreadMessages, true) });
    }
    case ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE: {
      return __assign(__assign({}, state), { hasMorePrev: false });
    }
    case ThreadContextActionTypes.ON_MESSAGE_RECEIVED: {
      var _0 = action.payload, channel = _0.channel, message_1 = _0.message;
      if (((_c = state.currentChannel) === null || _c === void 0 ? void 0 : _c.url) !== (channel === null || channel === void 0 ? void 0 : channel.url) || state.hasMoreNext || ((_d = message_1 === null || message_1 === void 0 ? void 0 : message_1.parentMessage) === null || _d === void 0 ? void 0 : _d.messageId) !== ((_e = state === null || state === void 0 ? void 0 : state.parentMessage) === null || _e === void 0 ? void 0 : _e.messageId)) {
        return state;
      }
      var isAlreadyReceived = state.allThreadMessages.findIndex(function(m) {
        return m.messageId === message_1.messageId;
      }) > -1;
      return __assign(__assign({}, state), { parentMessage: ((_f = state.parentMessage) === null || _f === void 0 ? void 0 : _f.messageId) === (message_1 === null || message_1 === void 0 ? void 0 : message_1.messageId) ? message_1 : state.parentMessage, allThreadMessages: isAlreadyReceived ? state.allThreadMessages.map(function(m) {
        return m.messageId === message_1.messageId ? message_1 : m;
      }) : __spreadArray(__spreadArray([], state.allThreadMessages.filter(function(m) {
        return (m === null || m === void 0 ? void 0 : m.reqId) !== (message_1 === null || message_1 === void 0 ? void 0 : message_1.reqId);
      }), true), [
        message_1
      ], false) });
    }
    case ThreadContextActionTypes.ON_MESSAGE_UPDATED: {
      var _1 = action.payload, channel = _1.channel, message_2 = _1.message;
      if (((_g = state.currentChannel) === null || _g === void 0 ? void 0 : _g.url) !== (channel === null || channel === void 0 ? void 0 : channel.url)) {
        return state;
      }
      return __assign(__assign({}, state), { parentMessage: ((_h = state.parentMessage) === null || _h === void 0 ? void 0 : _h.messageId) === (message_2 === null || message_2 === void 0 ? void 0 : message_2.messageId) ? message_2 : state.parentMessage, allThreadMessages: (_j = state.allThreadMessages) === null || _j === void 0 ? void 0 : _j.map(function(msg) {
        return (msg === null || msg === void 0 ? void 0 : msg.messageId) === (message_2 === null || message_2 === void 0 ? void 0 : message_2.messageId) ? message_2 : msg;
      }) });
    }
    case ThreadContextActionTypes.ON_MESSAGE_DELETED: {
      var _2 = action.payload, channel = _2.channel, messageId_1 = _2.messageId;
      if (((_k = state.currentChannel) === null || _k === void 0 ? void 0 : _k.url) !== (channel === null || channel === void 0 ? void 0 : channel.url)) {
        return state;
      }
      if (((_l = state === null || state === void 0 ? void 0 : state.parentMessage) === null || _l === void 0 ? void 0 : _l.messageId) === messageId_1) {
        return __assign(__assign({}, state), { parentMessage: null, parentMessageState: ParentMessageStateTypes.NIL, allThreadMessages: [] });
      }
      return __assign(__assign({}, state), { allThreadMessages: (_m = state.allThreadMessages) === null || _m === void 0 ? void 0 : _m.filter(function(msg) {
        return (msg === null || msg === void 0 ? void 0 : msg.messageId) !== messageId_1;
      }), localThreadMessages: (_o = state.localThreadMessages) === null || _o === void 0 ? void 0 : _o.filter(function(msg) {
        return (msg === null || msg === void 0 ? void 0 : msg.messageId) !== messageId_1;
      }) });
    }
    case ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {
      return __assign(__assign({}, state), { localThreadMessages: state.localThreadMessages.filter(function(m) {
        return !compareIds2(m.reqId, action.payload);
      }) });
    }
    case ThreadContextActionTypes.ON_REACTION_UPDATED: {
      var reactionEvent_1 = (_p = action.payload) === null || _p === void 0 ? void 0 : _p.reactionEvent;
      if (((_q = state === null || state === void 0 ? void 0 : state.parentMessage) === null || _q === void 0 ? void 0 : _q.messageId) === (reactionEvent_1 === null || reactionEvent_1 === void 0 ? void 0 : reactionEvent_1.messageId)) {
        (_s = (_r = state.parentMessage) === null || _r === void 0 ? void 0 : _r.applyReactionEvent) === null || _s === void 0 ? void 0 : _s.call(_r, reactionEvent_1);
      }
      return __assign(__assign({}, state), { allThreadMessages: state.allThreadMessages.map(function(m) {
        var _a2;
        if ((reactionEvent_1 === null || reactionEvent_1 === void 0 ? void 0 : reactionEvent_1.messageId) === (m === null || m === void 0 ? void 0 : m.messageId)) {
          (_a2 = m === null || m === void 0 ? void 0 : m.applyReactionEvent) === null || _a2 === void 0 ? void 0 : _a2.call(m, reactionEvent_1);
          return m;
        }
        return m;
      }) });
    }
    case ThreadContextActionTypes.ON_USER_MUTED: {
      var _3 = action.payload, channel = _3.channel, user = _3.user;
      if (((_t = state.currentChannel) === null || _t === void 0 ? void 0 : _t.url) !== (channel === null || channel === void 0 ? void 0 : channel.url) || state.currentUserId !== (user === null || user === void 0 ? void 0 : user.userId)) {
        return state;
      }
      return __assign(__assign({}, state), { isMuted: true });
    }
    case ThreadContextActionTypes.ON_USER_UNMUTED: {
      var _4 = action.payload, channel = _4.channel, user = _4.user;
      if (((_u = state.currentChannel) === null || _u === void 0 ? void 0 : _u.url) !== (channel === null || channel === void 0 ? void 0 : channel.url) || state.currentUserId !== (user === null || user === void 0 ? void 0 : user.userId)) {
        return state;
      }
      return __assign(__assign({}, state), { isMuted: false });
    }
    case ThreadContextActionTypes.ON_USER_BANNED: {
      return __assign(__assign({}, state), { channelState: ChannelStateTypes.NIL, threadListState: ThreadListStateTypes.NIL, parentMessageState: ParentMessageStateTypes.NIL, currentChannel: null, parentMessage: null, allThreadMessages: [], hasMorePrev: false, hasMoreNext: false });
    }
    case ThreadContextActionTypes.ON_USER_UNBANNED: {
      return __assign({}, state);
    }
    case ThreadContextActionTypes.ON_USER_LEFT: {
      return __assign(__assign({}, state), { channelState: ChannelStateTypes.NIL, threadListState: ThreadListStateTypes.NIL, parentMessageState: ParentMessageStateTypes.NIL, currentChannel: null, parentMessage: null, allThreadMessages: [], hasMorePrev: false, hasMoreNext: false });
    }
    case ThreadContextActionTypes.ON_CHANNEL_FROZEN: {
      return __assign(__assign({}, state), { isChannelFrozen: true });
    }
    case ThreadContextActionTypes.ON_CHANNEL_UNFROZEN: {
      return __assign(__assign({}, state), { isChannelFrozen: false });
    }
    case ThreadContextActionTypes.ON_OPERATOR_UPDATED: {
      var channel = action.payload.channel;
      if ((channel === null || channel === void 0 ? void 0 : channel.url) === ((_v = state.currentChannel) === null || _v === void 0 ? void 0 : _v.url)) {
        return __assign(__assign({}, state), { currentChannel: channel });
      }
      return state;
    }
    case ThreadContextActionTypes.SEND_MESSAGE_START: {
      var message = action.payload.message;
      return __assign(__assign({}, state), { localThreadMessages: __spreadArray(__spreadArray([], state.localThreadMessages, true), [
        message
      ], false) });
    }
    case ThreadContextActionTypes.SEND_MESSAGE_SUCESS: {
      var message_3 = action.payload.message;
      return __assign(__assign({}, state), { allThreadMessages: __spreadArray(__spreadArray([], state.allThreadMessages.filter(function(m) {
        return !compareIds2(m === null || m === void 0 ? void 0 : m.reqId, message_3 === null || message_3 === void 0 ? void 0 : message_3.reqId);
      }), true), [
        message_3
      ], false), localThreadMessages: state.localThreadMessages.filter(function(m) {
        return !compareIds2(m === null || m === void 0 ? void 0 : m.reqId, message_3 === null || message_3 === void 0 ? void 0 : message_3.reqId);
      }) });
    }
    case ThreadContextActionTypes.SEND_MESSAGE_FAILURE: {
      var message_4 = action.payload.message;
      return __assign(__assign({}, state), { localThreadMessages: state.localThreadMessages.map(function(m) {
        return compareIds2(m === null || m === void 0 ? void 0 : m.reqId, message_4 === null || message_4 === void 0 ? void 0 : message_4.reqId) ? message_4 : m;
      }) });
    }
    case ThreadContextActionTypes.RESEND_MESSAGE_START: {
      var message_5 = action.payload.message;
      return __assign(__assign({}, state), { localThreadMessages: state.localThreadMessages.map(function(m) {
        return compareIds2(m === null || m === void 0 ? void 0 : m.reqId, message_5 === null || message_5 === void 0 ? void 0 : message_5.reqId) ? message_5 : m;
      }) });
    }
    case ThreadContextActionTypes.ON_FILE_INFO_UPLOADED: {
      var _5 = action.payload, channelUrl = _5.channelUrl, requestId_1 = _5.requestId, index = _5.index, uploadableFileInfo = _5.uploadableFileInfo, error = _5.error;
      if (!compareIds2(channelUrl, (_w = state.currentChannel) === null || _w === void 0 ? void 0 : _w.url)) {
        return state;
      }
      if (error)
        return state;
      var localThreadMessages = state.localThreadMessages;
      var messageToUpdate = localThreadMessages.find(function(message2) {
        return compareIds2(hasReqId2(message2) && message2.reqId, requestId_1);
      });
      var fileInfoList = (_x = messageToUpdate.messageParams) === null || _x === void 0 ? void 0 : _x.fileInfoList;
      if (Array.isArray(fileInfoList)) {
        fileInfoList[index] = uploadableFileInfo;
      }
      return __assign(__assign({}, state), { localThreadMessages });
    }
    case ThreadContextActionTypes.ON_TYPING_STATUS_UPDATED: {
      var _6 = action.payload, channel = _6.channel, typingMembers = _6.typingMembers;
      if (!compareIds2(channel.url, (_y = state.currentChannel) === null || _y === void 0 ? void 0 : _y.url)) {
        return state;
      }
      return __assign(__assign({}, state), { typingMembers });
    }
    default: {
      return state;
    }
  }
}
function hasReqId2(message) {
  return "reqId" in message;
}
var initialState5 = {
  currentChannel: null,
  allThreadMessages: [],
  localThreadMessages: [],
  parentMessage: null,
  channelState: ChannelStateTypes.NIL,
  parentMessageState: ParentMessageStateTypes.NIL,
  threadListState: ThreadListStateTypes.NIL,
  hasMorePrev: false,
  hasMoreNext: false,
  emojiContainer: {},
  isMuted: false,
  isChannelFrozen: false,
  currentUserId: "",
  typingMembers: []
};
function useGetChannel2(_a, _b) {
  var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit, message = _a.message;
  var sdk = _b.sdk, logger = _b.logger, threadDispatcher = _b.threadDispatcher;
  (0, import_react38.useEffect)(function() {
    var _a2, _b2;
    if (sdkInit && channelUrl && (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel)) {
      threadDispatcher({
        type: ThreadContextActionTypes.GET_CHANNEL_START,
        payload: null
      });
      (_b2 = (_a2 = sdk.groupChannel).getChannel) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, channelUrl).then(function(groupChannel) {
        logger.info("Thread | useInitialize: Get channel succeeded", groupChannel);
        threadDispatcher({
          type: ThreadContextActionTypes.GET_CHANNEL_SUCCESS,
          payload: { groupChannel }
        });
      }).catch(function(error) {
        logger.info("Thread | useInitialize: Get channel failed", error);
        threadDispatcher({
          type: ThreadContextActionTypes.GET_CHANNEL_FAILURE,
          payload: error
        });
      });
    }
  }, [message, sdkInit]);
}
function useGetAllEmoji(_a, _b) {
  var sdk = _a.sdk;
  var logger = _b.logger, threadDispatcher = _b.threadDispatcher;
  (0, import_react38.useEffect)(function() {
    if (sdk === null || sdk === void 0 ? void 0 : sdk.getAllEmoji) {
      sdk === null || sdk === void 0 ? void 0 : sdk.getAllEmoji().then(function(emojiContainer) {
        logger.info("Thread | useGetAllEmoji: Getting emojis succeeded.", emojiContainer);
        threadDispatcher({
          type: ThreadContextActionTypes.SET_EMOJI_CONTAINER,
          payload: { emojiContainer }
        });
      }).catch(function(error) {
        logger.info("Thread | useGetAllEmoji: Getting emojis failed.", error);
      });
    }
  }, [sdk]);
}
function useGetParentMessage(_a, _b) {
  var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit, parentMessage = _a.parentMessage;
  var sdk = _b.sdk, logger = _b.logger, threadDispatcher = _b.threadDispatcher;
  (0, import_react38.useEffect)(function() {
    var _a2, _b2, _c;
    if (sdkInit && ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.message) === null || _a2 === void 0 ? void 0 : _a2.getMessage) && parentMessage) {
      threadDispatcher({
        type: ThreadContextActionTypes.GET_PARENT_MESSAGE_START,
        payload: null
      });
      var params = {
        channelUrl,
        channelType: q.GROUP,
        messageId: parentMessage.messageId,
        includeMetaArray: true,
        includeReactions: true,
        includeThreadInfo: true,
        includeParentMessageInfo: true
      };
      logger.info("Thread | useGetParentMessage: Get parent message start.", params);
      (_c = (_b2 = sdk.message).getMessage) === null || _c === void 0 ? void 0 : _c.call(_b2, params).then(function(parentMsg) {
        logger.info("Thread | useGetParentMessage: Get parent message succeeded.", parentMessage);
        parentMsg.ogMetaData = (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.ogMetaData) || null;
        threadDispatcher({
          type: ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS,
          payload: { parentMessage: parentMsg }
        });
      }).catch(function(error) {
        logger.info("Thread | useGetParentMessage: Get parent message failed.", error);
        threadDispatcher({
          type: ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE,
          payload: error
        });
      });
    }
  }, [sdkInit, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId]);
}
function useHandleThreadPubsubEvents(_a, _b) {
  var sdkInit = _a.sdkInit, currentChannel = _a.currentChannel, parentMessage = _a.parentMessage;
  var pubSub = _b.pubSub, threadDispatcher = _b.threadDispatcher;
  (0, import_react38.useEffect)(function() {
    var subscriber = /* @__PURE__ */ new Map();
    if (pubSub === null || pubSub === void 0 ? void 0 : pubSub.subscribe) {
      subscriber.set(pubSubTopics.SEND_MESSAGE_START, pubSub.subscribe(pubSubTopics.SEND_MESSAGE_START, function(props) {
        var _a2, _b2;
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url) && (message === null || message === void 0 ? void 0 : message.parentMessageId) === (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId) && shouldPubSubPublishToThread(publishingModules)) {
          var pendingMessage = __assign({}, message);
          if (message.isMultipleFilesMessage()) {
            pendingMessage.fileInfoList = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.messageParams) === null || _a2 === void 0 ? void 0 : _a2.fileInfoList.map(function(fileInfo) {
              return __assign(__assign({}, fileInfo), { url: URL.createObjectURL(fileInfo.file) });
            })) !== null && _b2 !== void 0 ? _b2 : [];
          }
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_START,
            payload: {
              message: pendingMessage
            }
          });
        }
        scrollIntoLast2 === null || scrollIntoLast2 === void 0 ? void 0 : scrollIntoLast2();
      }));
      subscriber.set(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, pubSub.subscribe(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, function(props) {
        var response = props.response, publishingModules = props.publishingModules;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === response.channelUrl && shouldPubSubPublishToThread(publishingModules)) {
          threadDispatcher({
            type: ON_FILE_INFO_UPLOADED,
            payload: response
          });
        }
      }));
      subscriber.set(pubSubTopics.SEND_USER_MESSAGE, pubSub.subscribe(pubSubTopics.SEND_USER_MESSAGE, function(props) {
        var _a2 = props, channel = _a2.channel, message = _a2.message;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url) && (message === null || message === void 0 ? void 0 : message.parentMessageId) === (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId)) {
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,
            payload: { message }
          });
        }
        scrollIntoLast2 === null || scrollIntoLast2 === void 0 ? void 0 : scrollIntoLast2();
      }));
      subscriber.set(pubSubTopics.SEND_MESSAGE_FAILED, pubSub.subscribe(pubSubTopics.SEND_MESSAGE_FAILED, function(props) {
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url) && (message === null || message === void 0 ? void 0 : message.parentMessageId) === (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId) && shouldPubSubPublishToThread(publishingModules)) {
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
            payload: { message }
          });
        }
      }));
      subscriber.set(pubSubTopics.SEND_FILE_MESSAGE, pubSub.subscribe(pubSubTopics.SEND_FILE_MESSAGE, function(props) {
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url) && shouldPubSubPublishToThread(publishingModules)) {
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,
            payload: { message }
          });
        }
        scrollIntoLast2 === null || scrollIntoLast2 === void 0 ? void 0 : scrollIntoLast2();
      }));
      subscriber.set(pubSubTopics.UPDATE_USER_MESSAGE, pubSub.subscribe(pubSubTopics.UPDATE_USER_MESSAGE, function(props) {
        var _a2 = props, channel = _a2.channel, message = _a2.message;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          threadDispatcher({
            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,
            payload: { channel, message }
          });
        }
      }));
      subscriber.set(pubSubTopics.DELETE_MESSAGE, pubSub.subscribe(pubSubTopics.DELETE_MESSAGE, function(props) {
        var _a2 = props, channel = _a2.channel, messageId = _a2.messageId;
        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          threadDispatcher({
            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,
            payload: { messageId }
          });
        }
      }));
    }
    return function() {
      subscriber === null || subscriber === void 0 ? void 0 : subscriber.forEach(function(s) {
        try {
          s === null || s === void 0 ? void 0 : s.remove();
        } catch (_a2) {
        }
      });
    };
  }, [sdkInit, currentChannel, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId]);
}
function useHandleChannelEvents2(_a, _b) {
  var sdk = _a.sdk, currentChannel = _a.currentChannel;
  var logger = _b.logger, threadDispatcher = _b.threadDispatcher;
  (0, import_react38.useEffect)(function() {
    var _a2, _b2, _c;
    var handlerId = uuidv4();
    if (((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.addGroupChannelHandler) && currentChannel) {
      var channelHandlerParams = {
        // message status change
        onMessageReceived: function(channel, message) {
          logger.info("Thread | useHandleChannelEvents: onMessageReceived", { channel, message });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_MESSAGE_RECEIVED,
            payload: { channel, message }
          });
        },
        onMessageUpdated: function(channel, message) {
          logger.info("Thread | useHandleChannelEvents: onMessageUpdated", { channel, message });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,
            payload: { channel, message }
          });
        },
        onMessageDeleted: function(channel, messageId) {
          logger.info("Thread | useHandleChannelEvents: onMessageDeleted", { channel, messageId });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,
            payload: { channel, messageId }
          });
        },
        onReactionUpdated: function(channel, reactionEvent) {
          logger.info("Thread | useHandleChannelEvents: onReactionUpdated", { channel, reactionEvent });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_REACTION_UPDATED,
            payload: { channel, reactionEvent }
          });
        },
        // user status change
        onUserMuted: function(channel, user) {
          logger.info("Thread | useHandleChannelEvents: onUserMuted", { channel, user });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_USER_MUTED,
            payload: { channel, user }
          });
        },
        onUserUnmuted: function(channel, user) {
          logger.info("Thread | useHandleChannelEvents: onUserUnmuted", { channel, user });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_USER_UNMUTED,
            payload: { channel, user }
          });
        },
        onUserBanned: function(channel, user) {
          logger.info("Thread | useHandleChannelEvents: onUserBanned", { channel, user });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_USER_BANNED,
            payload: { channel, user }
          });
        },
        onUserUnbanned: function(channel, user) {
          logger.info("Thread | useHandleChannelEvents: onUserUnbanned", { channel, user });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_USER_UNBANNED,
            payload: { channel, user }
          });
        },
        onUserLeft: function(channel, user) {
          logger.info("Thread | useHandleChannelEvents: onUserLeft", { channel, user });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_USER_LEFT,
            payload: { channel, user }
          });
        },
        // channel status change
        onChannelFrozen: function(channel) {
          logger.info("Thread | useHandleChannelEvents: onChannelFrozen", { channel });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_CHANNEL_FROZEN,
            payload: { channel }
          });
        },
        onChannelUnfrozen: function(channel) {
          logger.info("Thread | useHandleChannelEvents: onChannelUnfrozen", { channel });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_CHANNEL_UNFROZEN,
            payload: { channel }
          });
        },
        onOperatorUpdated: function(channel, users) {
          logger.info("Thread | useHandleChannelEvents: onOperatorUpdated", { channel, users });
          threadDispatcher({
            type: ThreadContextActionTypes.ON_OPERATOR_UPDATED,
            payload: { channel, users }
          });
        },
        onTypingStatusUpdated: function(channel) {
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentChannel.url)) {
            logger.info("Channel | onTypingStatusUpdated", { channel });
            var typingMembers = channel.getTypingUsers();
            threadDispatcher({
              type: ON_TYPING_STATUS_UPDATED,
              payload: {
                channel,
                typingMembers
              }
            });
          }
        }
      };
      var channelHandler = new Ye(channelHandlerParams);
      (_c = (_b2 = sdk.groupChannel).addGroupChannelHandler) === null || _c === void 0 ? void 0 : _c.call(_b2, handlerId, channelHandler);
      logger.info("Thread | useHandleChannelEvents: Added channelHandler in Thread", { handlerId, channelHandler });
    }
    return function() {
      var _a3, _b3, _c2;
      if (handlerId && ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler)) {
        (_c2 = (_b3 = sdk.groupChannel).removeGroupChannelHandler) === null || _c2 === void 0 ? void 0 : _c2.call(_b3, handlerId);
        logger.info("Thread | useHandleChannelEvents: Removed channelHandler in Thread.", handlerId);
      }
    };
  }, [
    sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel,
    currentChannel
  ]);
}
function useSendFileMessageCallback2(_a, _b) {
  var currentChannel = _a.currentChannel, onBeforeSendFileMessage = _a.onBeforeSendFileMessage;
  var logger = _b.logger, pubSub = _b.pubSub, threadDispatcher = _b.threadDispatcher;
  return (0, import_react38.useCallback)(function(file, quoteMessage) {
    return new Promise(function(resolve, reject) {
      var _a2;
      var createParamsDefault = function() {
        var params2 = {};
        params2.file = file;
        if (quoteMessage) {
          params2.isReplyToChannel = true;
          params2.parentMessageId = quoteMessage.messageId;
        }
        return params2;
      };
      var params = (_a2 = onBeforeSendFileMessage === null || onBeforeSendFileMessage === void 0 ? void 0 : onBeforeSendFileMessage(file, quoteMessage)) !== null && _a2 !== void 0 ? _a2 : createParamsDefault();
      logger.info("Thread | useSendFileMessageCallback: Sending file message start.", params);
      currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendFileMessage(params).onPending(function(pendingMessage) {
        threadDispatcher({
          type: ThreadContextActionTypes.SEND_MESSAGE_START,
          payload: {
            /* pubSub is used instead of messagesDispatcher
              to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
            // TODO: remove data pollution
            message: __assign(__assign({}, pendingMessage), {
              url: URL.createObjectURL(file),
              // pending thumbnail message seems to be failed
              requestState: "pending",
              isUserMessage: pendingMessage.isUserMessage,
              isFileMessage: pendingMessage.isFileMessage,
              isAdminMessage: pendingMessage.isAdminMessage,
              isMultipleFilesMessage: pendingMessage.isMultipleFilesMessage
            })
          }
        });
        setTimeout(function() {
          return scrollIntoLast2();
        }, SCROLL_BOTTOM_DELAY_FOR_SEND);
      }).onFailed(function(error, message) {
        message.localUrl = URL.createObjectURL(file);
        message.file = file;
        logger.info("Thread | useSendFileMessageCallback: Sending file message failed.", { message, error });
        threadDispatcher({
          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
          payload: { message, error }
        });
        reject(error);
      }).onSucceeded(function(message) {
        logger.info("Thread | useSendFileMessageCallback: Sending file message succeeded.", message);
        pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {
          channel: currentChannel,
          message,
          publishingModules: [PublishingModuleType.THREAD]
        });
        resolve(message);
      });
    });
  }, [currentChannel]);
}
function useUpdateMessageCallback2(_a, _b) {
  var currentChannel = _a.currentChannel, isMentionEnabled = _a.isMentionEnabled;
  var logger = _b.logger, pubSub = _b.pubSub, threadDispatcher = _b.threadDispatcher;
  return (0, import_react38.useCallback)(function(props) {
    var _a2;
    var messageId = props.messageId, message = props.message, mentionedUsers = props.mentionedUsers, mentionTemplate = props.mentionTemplate;
    var createParamsDefault = function() {
      var params2 = {};
      params2.message = message;
      if (isMentionEnabled && mentionedUsers && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {
        params2.mentionedUsers = mentionedUsers;
      }
      if (isMentionEnabled && mentionTemplate) {
        params2.mentionedMessageTemplate = mentionTemplate;
      } else {
        params2.mentionedMessageTemplate = message;
      }
      return params2;
    };
    var params = createParamsDefault();
    logger.info("Thread | useUpdateMessageCallback: Message update start.", params);
    (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.updateUserMessage) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel, messageId, params).then(function(message2) {
      logger.info("Thread | useUpdateMessageCallback: Message update succeeded.", message2);
      threadDispatcher({
        type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,
        payload: {
          channel: currentChannel,
          message: message2
        }
      });
      pubSub.publish(pubSubTopics.UPDATE_USER_MESSAGE, {
        fromSelector: true,
        channel: currentChannel,
        message: message2,
        publishingModules: [PublishingModuleType.THREAD]
      });
    });
  }, [currentChannel, isMentionEnabled]);
}
function useDeleteMessageCallback2(_a, _b) {
  var currentChannel = _a.currentChannel, threadDispatcher = _a.threadDispatcher;
  var logger = _b.logger;
  return (0, import_react38.useCallback)(function(message) {
    logger.info("Thread | useDeleteMessageCallback: Deleting message.", message);
    var sendingStatus = message.sendingStatus;
    return new Promise(function(resolve, reject) {
      var _a2;
      logger.info("Thread | useDeleteMessageCallback: Deleting message requestState:", sendingStatus);
      if (sendingStatus === "failed" || sendingStatus === "pending") {
        logger.info("Thread | useDeleteMessageCallback: Deleted message from local:", message);
        threadDispatcher({
          type: ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,
          payload: message.reqId
        });
        resolve();
      }
      logger.info("Thread | useDeleteMessageCallback: Deleting message from remote:", sendingStatus);
      (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.deleteMessage) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel, message).then(function() {
        logger.info("Thread | useDeleteMessageCallback: Deleting message success!", message);
        threadDispatcher({
          type: ThreadContextActionTypes.ON_MESSAGE_DELETED,
          payload: { message, channel: currentChannel }
        });
        resolve();
      }).catch(function(err) {
        logger.warning("Thread | useDeleteMessageCallback: Deleting message failed!", err);
        reject(err);
      });
    });
  }, [currentChannel]);
}
function useToggleReactionCallback2(_a, _b) {
  var currentChannel = _a.currentChannel;
  var logger = _b.logger;
  return (0, import_react38.useCallback)(function(message, key, isReacted) {
    var _a2, _b2;
    if (isReacted) {
      (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.deleteReaction) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel, message, key).then(function(res) {
        logger.info("Thread | useToggleReactionsCallback: Delete reaction succeeded.", res);
      }).catch(function(err) {
        logger.warning("Thread | useToggleReactionsCallback: Delete reaction failed.", err);
      });
      return;
    }
    (_b2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.addReaction) === null || _b2 === void 0 ? void 0 : _b2.call(currentChannel, message, key).then(function(res) {
      logger.info("Thread | useToggleReactionsCallback: Add reaction succeeded.", res);
    }).catch(function(err) {
      logger.warning("Thread | useToggleReactionsCallback: Add reaction failed.", err);
    });
  }, [currentChannel]);
}
function useSendUserMessageCallback(_a, _b) {
  var isMentionEnabled = _a.isMentionEnabled, currentChannel = _a.currentChannel, onBeforeSendUserMessage = _a.onBeforeSendUserMessage;
  var logger = _b.logger, pubSub = _b.pubSub, threadDispatcher = _b.threadDispatcher;
  var sendMessage = (0, import_react38.useCallback)(function(props) {
    var _a2;
    var message = props.message, quoteMessage = props.quoteMessage, mentionTemplate = props.mentionTemplate, mentionedUsers = props.mentionedUsers;
    var createDefaultParams = function() {
      var params2 = {};
      params2.message = message;
      var mentionedUsersLength = (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) || 0;
      if (isMentionEnabled && mentionedUsersLength) {
        params2.mentionedUsers = mentionedUsers;
      }
      if (isMentionEnabled && mentionTemplate && mentionedUsersLength) {
        params2.mentionedMessageTemplate = mentionTemplate;
      }
      if (quoteMessage) {
        params2.isReplyToChannel = true;
        params2.parentMessageId = quoteMessage.messageId;
      }
      return params2;
    };
    var params = (_a2 = onBeforeSendUserMessage === null || onBeforeSendUserMessage === void 0 ? void 0 : onBeforeSendUserMessage(message, quoteMessage)) !== null && _a2 !== void 0 ? _a2 : createDefaultParams();
    logger.info("Thread | useSendUserMessageCallback: Sending user message start.", params);
    if (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendUserMessage) {
      currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendUserMessage(params).onPending(function(pendingMessage) {
        threadDispatcher({
          type: ThreadContextActionTypes.SEND_MESSAGE_START,
          payload: { message: pendingMessage }
        });
      }).onFailed(function(error, message2) {
        logger.info("Thread | useSendUserMessageCallback: Sending user message failed.", { message: message2, error });
        threadDispatcher({
          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
          payload: { error, message: message2 }
        });
      }).onSucceeded(function(message2) {
        logger.info("Thread | useSendUserMessageCallback: Sending user message succeeded.", message2);
        pubSub.publish(pubSubTopics.SEND_USER_MESSAGE, {
          channel: currentChannel,
          message: message2,
          publishingModules: [PublishingModuleType.THREAD]
        });
      });
    }
  }, [isMentionEnabled, currentChannel]);
  return sendMessage;
}
function useResendMessageCallback2(_a, _b) {
  var currentChannel = _a.currentChannel;
  var logger = _b.logger, pubSub = _b.pubSub, threadDispatcher = _b.threadDispatcher;
  return (0, import_react38.useCallback)(function(failedMessage) {
    var _a2, _b2, _c, _d, _e;
    if (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isResendable) {
      logger.info("Thread | useResendMessageCallback: Resending failedMessage start.", failedMessage);
      if (((_a2 = failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isUserMessage) === null || _a2 === void 0 ? void 0 : _a2.call(failedMessage)) || (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.messageType) === z.USER) {
        try {
          currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.resendMessage(failedMessage).onPending(function(message) {
            logger.info("Thread | useResendMessageCallback: Resending user message started.", message);
            threadDispatcher({
              type: ThreadContextActionTypes.RESEND_MESSAGE_START,
              payload: { message }
            });
          }).onSucceeded(function(message) {
            logger.info("Thread | useResendMessageCallback: Resending user message succeeded.", message);
            threadDispatcher({
              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,
              payload: { message }
            });
            pubSub.publish(pubSubTopics.SEND_USER_MESSAGE, {
              channel: currentChannel,
              message,
              publishingModules: [PublishingModuleType.THREAD]
            });
          }).onFailed(function(error) {
            logger.warning("Thread | useResendMessageCallback: Resending user message failed.", error);
            failedMessage.sendingStatus = W.FAILED;
            threadDispatcher({
              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
              payload: { message: failedMessage }
            });
          });
        } catch (err) {
          logger.warning("Thread | useResendMessageCallback: Resending user message failed.", err);
          failedMessage.sendingStatus = W.FAILED;
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
            payload: { message: failedMessage }
          });
        }
      } else if ((_b2 = failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isFileMessage) === null || _b2 === void 0 ? void 0 : _b2.call(failedMessage)) {
        try {
          (_c = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.resendMessage) === null || _c === void 0 ? void 0 : _c.call(currentChannel, failedMessage).onPending(function(message) {
            logger.info("Thread | useResendMessageCallback: Resending file message started.", message);
            threadDispatcher({
              type: ThreadContextActionTypes.RESEND_MESSAGE_START,
              payload: { message }
            });
          }).onSucceeded(function(message) {
            logger.info("Thread | useResendMessageCallback: Resending file message succeeded.", message);
            threadDispatcher({
              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,
              payload: { message }
            });
            pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {
              channel: currentChannel,
              message: failedMessage,
              publishingModules: [PublishingModuleType.THREAD]
            });
          }).onFailed(function(error) {
            logger.warning("Thread | useResendMessageCallback: Resending file message failed.", error);
            failedMessage.sendingStatus = W.FAILED;
            threadDispatcher({
              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
              payload: { message: failedMessage }
            });
          });
        } catch (err) {
          logger.warning("Thread | useResendMessageCallback: Resending file message failed.", err);
          failedMessage.sendingStatus = W.FAILED;
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
            payload: { message: failedMessage }
          });
        }
      } else if ((_d = failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isMultipleFilesMessage) === null || _d === void 0 ? void 0 : _d.call(failedMessage)) {
        try {
          (_e = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.resendMessage) === null || _e === void 0 ? void 0 : _e.call(currentChannel, failedMessage).onPending(function(message) {
            logger.info("Thread | useResendMessageCallback: Resending multiple files message started.", message);
            threadDispatcher({
              type: ThreadContextActionTypes.RESEND_MESSAGE_START,
              payload: { message }
            });
          }).onFileUploaded(function(requestId, index, uploadableFileInfo, error) {
            logger.info("Thread | useResendMessageCallback: onFileUploaded during resending multiple files message.", {
              requestId,
              index,
              error,
              uploadableFileInfo
            });
            pubSub.publish(pubSubTopics.ON_FILE_INFO_UPLOADED, {
              response: {
                channelUrl: currentChannel.url,
                requestId,
                index,
                uploadableFileInfo,
                error
              },
              publishingModules: [PublishingModuleType.THREAD]
            });
          }).onSucceeded(function(message) {
            logger.info("Thread | useResendMessageCallback: Resending MFM succeeded.", message);
            threadDispatcher({
              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,
              payload: { message }
            });
            pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {
              channel: currentChannel,
              message,
              publishingModules: [PublishingModuleType.THREAD]
            });
          }).onFailed(function(error, message) {
            logger.warning("Thread | useResendMessageCallback: Resending MFM failed.", error);
            threadDispatcher({
              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
              payload: { message }
            });
          });
        } catch (err) {
          logger.warning("Thread | useResendMessageCallback: Resending MFM failed.", err);
          threadDispatcher({
            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
            payload: { message: failedMessage }
          });
        }
      } else {
        logger.warning("Thread | useResendMessageCallback: Message is not resendable.", failedMessage);
        failedMessage.sendingStatus = W.FAILED;
        threadDispatcher({
          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
          payload: { message: failedMessage }
        });
      }
    }
  }, [currentChannel]);
}
var useSendVoiceMessageCallback2 = function(_a, _b) {
  var currentChannel = _a.currentChannel, onBeforeSendVoiceMessage = _a.onBeforeSendVoiceMessage;
  var logger = _b.logger, pubSub = _b.pubSub, threadDispatcher = _b.threadDispatcher;
  var sendMessage = (0, import_react38.useCallback)(function(file, duration, quoteMessage) {
    var messageParams = onBeforeSendVoiceMessage && typeof onBeforeSendVoiceMessage === "function" ? onBeforeSendVoiceMessage(file, quoteMessage) : {
      file,
      fileName: VOICE_MESSAGE_FILE_NAME,
      mimeType: VOICE_MESSAGE_MIME_TYPE,
      metaArrays: [
        new je({
          key: META_ARRAY_VOICE_DURATION_KEY,
          value: ["".concat(duration)]
        }),
        new je({
          key: META_ARRAY_MESSAGE_TYPE_KEY,
          value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE]
        })
      ]
    };
    if (quoteMessage) {
      messageParams.isReplyToChannel = true;
      messageParams.parentMessageId = quoteMessage.messageId;
    }
    logger.info("Thread | useSendVoiceMessageCallback:  Start sending voice message", messageParams);
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendFileMessage(messageParams).onPending(function(pendingMessage) {
      threadDispatcher({
        type: ThreadContextActionTypes.SEND_MESSAGE_START,
        payload: {
          /* pubSub is used instead of messagesDispatcher
          to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
          // TODO: remove data pollution
          message: __assign(__assign({}, pendingMessage), {
            url: URL.createObjectURL(file),
            // pending thumbnail message seems to be failed
            requestState: "pending",
            isUserMessage: pendingMessage.isUserMessage,
            isFileMessage: pendingMessage.isFileMessage,
            isAdminMessage: pendingMessage.isAdminMessage,
            isMultipleFilesMessage: pendingMessage.isMultipleFilesMessage
          })
        }
      });
      setTimeout(function() {
        return scrollIntoLast2();
      }, SCROLL_BOTTOM_DELAY_FOR_SEND);
    }).onFailed(function(error, message) {
      message.localUrl = URL.createObjectURL(file);
      message.file = file;
      logger.info("Thread | useSendVoiceMessageCallback: Sending voice message failed.", { message, error });
      threadDispatcher({
        type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,
        payload: { message, error }
      });
    }).onSucceeded(function(message) {
      logger.info("Thread | useSendVoiceMessageCallback: Sending voice message succeeded.", message);
      pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {
        channel: currentChannel,
        message,
        publishingModules: [PublishingModuleType.THREAD]
      });
    });
  }, [
    currentChannel,
    onBeforeSendVoiceMessage
  ]);
  return sendMessage;
};
function getThreadMessageListParams(params) {
  return __assign({ prevResultSize: PREV_THREADS_FETCH_SIZE, nextResultSize: NEXT_THREADS_FETCH_SIZE, includeMetaArray: true }, params);
}
var useThreadFetchers = function(_a) {
  var isReactionEnabled = _a.isReactionEnabled, anchorMessage = _a.anchorMessage, staleParentMessage = _a.parentMessage, threadDispatcher = _a.threadDispatcher, logger = _a.logger, oldestMessageTimeStamp = _a.oldestMessageTimeStamp, latestMessageTimeStamp = _a.latestMessageTimeStamp, threadListState = _a.threadListState;
  var stores = useSendbirdStateContext().stores;
  var timestamp = (anchorMessage === null || anchorMessage === void 0 ? void 0 : anchorMessage.createdAt) || 0;
  var initialize = (0, import_react38.useCallback)(function(callback) {
    return __awaiter(void 0, void 0, void 0, function() {
      var params, _a2, threadedMessages_1, parentMessage, error_1;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!stores.sdkStore.initialized || !staleParentMessage)
              return [
                2
                /*return*/
              ];
            threadDispatcher({
              type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START,
              payload: null
            });
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            params = getThreadMessageListParams({ includeReactions: isReactionEnabled });
            logger.info("Thread | useGetThreadList: Initialize thread list start.", { timestamp, params });
            return [4, staleParentMessage.getThreadedMessagesByTimestamp(timestamp, params)];
          case 2:
            _a2 = _b.sent(), threadedMessages_1 = _a2.threadedMessages, parentMessage = _a2.parentMessage;
            logger.info("Thread | useGetThreadList: Initialize thread list succeeded.", { staleParentMessage, threadedMessages: threadedMessages_1 });
            threadDispatcher({
              type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS,
              payload: { parentMessage, anchorMessage, threadedMessages: threadedMessages_1 }
            });
            setTimeout(function() {
              return callback === null || callback === void 0 ? void 0 : callback(threadedMessages_1);
            });
            return [3, 4];
          case 3:
            error_1 = _b.sent();
            logger.info("Thread | useGetThreadList: Initialize thread list failed.", error_1);
            threadDispatcher({
              type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE,
              payload: error_1
            });
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [stores.sdkStore.initialized, staleParentMessage, anchorMessage, isReactionEnabled]);
  var loadPrevious = (0, import_react38.useCallback)(function(callback) {
    return __awaiter(void 0, void 0, void 0, function() {
      var params, _a2, threadedMessages_2, parentMessage, error_2;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (threadListState !== ThreadListStateTypes.INITIALIZED || oldestMessageTimeStamp === 0 || !staleParentMessage)
              return [
                2
                /*return*/
              ];
            threadDispatcher({
              type: ThreadContextActionTypes.GET_PREV_MESSAGES_START,
              payload: null
            });
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            params = getThreadMessageListParams({ nextResultSize: 0, includeReactions: isReactionEnabled });
            return [4, staleParentMessage.getThreadedMessagesByTimestamp(oldestMessageTimeStamp, params)];
          case 2:
            _a2 = _b.sent(), threadedMessages_2 = _a2.threadedMessages, parentMessage = _a2.parentMessage;
            logger.info("Thread | useGetPrevThreadsCallback: Fetch prev threads succeeded.", { parentMessage, threadedMessages: threadedMessages_2 });
            threadDispatcher({
              type: ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS,
              payload: { parentMessage, threadedMessages: threadedMessages_2 }
            });
            setTimeout(function() {
              return callback === null || callback === void 0 ? void 0 : callback(threadedMessages_2);
            });
            return [3, 4];
          case 3:
            error_2 = _b.sent();
            logger.info("Thread | useGetPrevThreadsCallback: Fetch prev threads failed.", error_2);
            threadDispatcher({
              type: ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE,
              payload: error_2
            });
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [threadListState, oldestMessageTimeStamp, isReactionEnabled, staleParentMessage]);
  var loadNext = (0, import_react38.useCallback)(function(callback) {
    return __awaiter(void 0, void 0, void 0, function() {
      var params, _a2, threadedMessages_3, parentMessage, error_3;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (threadListState !== ThreadListStateTypes.INITIALIZED || latestMessageTimeStamp === 0 || !staleParentMessage)
              return [
                2
                /*return*/
              ];
            threadDispatcher({
              type: ThreadContextActionTypes.GET_NEXT_MESSAGES_START,
              payload: null
            });
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            params = getThreadMessageListParams({ prevResultSize: 0, includeReactions: isReactionEnabled });
            return [4, staleParentMessage.getThreadedMessagesByTimestamp(latestMessageTimeStamp, params)];
          case 2:
            _a2 = _b.sent(), threadedMessages_3 = _a2.threadedMessages, parentMessage = _a2.parentMessage;
            logger.info("Thread | useGetNextThreadsCallback: Fetch next threads succeeded.", { parentMessage, threadedMessages: threadedMessages_3 });
            threadDispatcher({
              type: ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS,
              payload: { parentMessage, threadedMessages: threadedMessages_3 }
            });
            setTimeout(function() {
              return callback === null || callback === void 0 ? void 0 : callback(threadedMessages_3);
            });
            return [3, 4];
          case 3:
            error_3 = _b.sent();
            logger.info("Thread | useGetNextThreadsCallback: Fetch next threads failed.", error_3);
            threadDispatcher({
              type: ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE,
              payload: error_3
            });
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [threadListState, latestMessageTimeStamp, isReactionEnabled, staleParentMessage]);
  return {
    initialize,
    loadPrevious,
    loadNext
  };
};
var ThreadContext = import_react38.default.createContext(null);
var ThreadProvider = function(props) {
  var _a, _b;
  var children = props.children, channelUrl = props.channelUrl, onHeaderActionClick = props.onHeaderActionClick, onMoveToParentMessage = props.onMoveToParentMessage, onBeforeSendUserMessage = props.onBeforeSendUserMessage, onBeforeSendFileMessage = props.onBeforeSendFileMessage, onBeforeSendVoiceMessage = props.onBeforeSendVoiceMessage, onBeforeSendMultipleFilesMessage = props.onBeforeSendMultipleFilesMessage, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, disableUserProfile = props.disableUserProfile, renderUserProfile = props.renderUserProfile;
  var propsMessage = props === null || props === void 0 ? void 0 : props.message;
  var propsParentMessage = getParentMessageFrom(propsMessage);
  var globalStore = useSendbirdStateContext();
  var stores = globalStore.stores, config = globalStore.config;
  var sdkStore = stores.sdkStore, userStore = stores.userStore;
  var sdk = sdkStore.sdk;
  var user = userStore.user;
  var sdkInit = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.initialized;
  var logger = config.logger, pubSub = config.pubSub, onUserProfileMessage = config.onUserProfileMessage, htmlTextDirection = config.htmlTextDirection, forceLeftToRightMessageLayout = config.forceLeftToRightMessageLayout;
  var isMentionEnabled = config.groupChannel.enableMention;
  var isReactionEnabled = config.groupChannel.enableReactions;
  var _c = (0, import_react38.useReducer)(reducer3, initialState5), threadStore = _c[0], threadDispatcher = _c[1];
  var currentChannel = threadStore.currentChannel, allThreadMessages = threadStore.allThreadMessages, localThreadMessages = threadStore.localThreadMessages, parentMessage = threadStore.parentMessage, channelState = threadStore.channelState, threadListState = threadStore.threadListState, parentMessageState = threadStore.parentMessageState, hasMorePrev = threadStore.hasMorePrev, hasMoreNext = threadStore.hasMoreNext, emojiContainer = threadStore.emojiContainer, isMuted = threadStore.isMuted, isChannelFrozen = threadStore.isChannelFrozen, currentUserId = threadStore.currentUserId, typingMembers = threadStore.typingMembers;
  (0, import_react38.useEffect)(function() {
    threadDispatcher({
      type: ThreadContextActionTypes.INIT_USER_ID,
      payload: user === null || user === void 0 ? void 0 : user.userId
    });
  }, [user]);
  useGetChannel2({
    channelUrl,
    sdkInit,
    message: propsMessage
  }, { sdk, logger, threadDispatcher });
  useGetParentMessage({
    channelUrl,
    sdkInit,
    parentMessage: propsParentMessage
  }, { sdk, logger, threadDispatcher });
  useGetAllEmoji({ sdk }, { logger, threadDispatcher });
  useHandleChannelEvents2({
    sdk,
    currentChannel
  }, { logger, threadDispatcher });
  useHandleThreadPubsubEvents({
    sdkInit,
    currentChannel,
    parentMessage
  }, { logger, pubSub, threadDispatcher });
  var _d = useThreadFetchers({
    parentMessage,
    // anchorMessage should be null when parentMessage doesn't exist
    anchorMessage: (propsMessage === null || propsMessage === void 0 ? void 0 : propsMessage.messageId) !== (propsParentMessage === null || propsParentMessage === void 0 ? void 0 : propsParentMessage.messageId) ? propsMessage || void 0 : void 0,
    logger,
    isReactionEnabled,
    threadDispatcher,
    threadListState,
    oldestMessageTimeStamp: ((_a = allThreadMessages[0]) === null || _a === void 0 ? void 0 : _a.createdAt) || 0,
    latestMessageTimeStamp: ((_b = allThreadMessages[allThreadMessages.length - 1]) === null || _b === void 0 ? void 0 : _b.createdAt) || 0
  }), initialize = _d.initialize, loadPrevious = _d.loadPrevious, loadNext = _d.loadNext;
  (0, import_react38.useEffect)(function() {
    if (stores.sdkStore.initialized && config.isOnline) {
      initialize();
    }
  }, [stores.sdkStore.initialized, config.isOnline, initialize]);
  useMessageLayoutDirection(
    htmlTextDirection,
    forceLeftToRightMessageLayout,
    // we're assuming that if the thread message list is empty, it's in the loading state
    allThreadMessages.length === 0
  );
  var toggleReaction = useToggleReactionCallback2({ currentChannel }, { logger });
  var sendMessage = useSendUserMessageCallback({
    isMentionEnabled,
    currentChannel,
    onBeforeSendUserMessage
  }, {
    logger,
    pubSub,
    threadDispatcher
  });
  var sendFileMessage = useSendFileMessageCallback2({
    currentChannel,
    onBeforeSendFileMessage
  }, {
    logger,
    pubSub,
    threadDispatcher
  });
  var sendVoiceMessage = useSendVoiceMessageCallback2({
    currentChannel,
    onBeforeSendVoiceMessage
  }, {
    logger,
    pubSub,
    threadDispatcher
  });
  var sendMultipleFilesMessage = useSendMultipleFilesMessage({
    currentChannel,
    onBeforeSendMultipleFilesMessage,
    publishingModules: [PublishingModuleType.THREAD]
  }, {
    logger,
    pubSub
  })[0];
  var resendMessage = useResendMessageCallback2({
    currentChannel
  }, { logger, pubSub, threadDispatcher });
  var updateMessage = useUpdateMessageCallback2({
    currentChannel,
    isMentionEnabled
  }, { logger, pubSub, threadDispatcher });
  var deleteMessage = useDeleteMessageCallback2({ currentChannel, threadDispatcher }, { logger });
  var nicknamesMap = (0, import_react38.useMemo)(function() {
    return config.groupChannel.replyType !== "none" && currentChannel ? getNicknamesMapFromMembers2(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) : /* @__PURE__ */ new Map();
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members]);
  return import_react38.default.createElement(
    ThreadContext.Provider,
    { value: {
      // ThreadProviderProps
      channelUrl,
      message: propsMessage,
      onHeaderActionClick,
      onMoveToParentMessage,
      isMultipleFilesMessageEnabled,
      onBeforeDownloadFileMessage,
      // ThreadContextInitialState
      currentChannel,
      allThreadMessages,
      localThreadMessages,
      parentMessage,
      channelState,
      threadListState,
      parentMessageState,
      hasMorePrev,
      hasMoreNext,
      emojiContainer,
      // hooks
      fetchPrevThreads: loadPrevious,
      fetchNextThreads: loadNext,
      toggleReaction,
      sendMessage,
      sendFileMessage,
      sendVoiceMessage,
      sendMultipleFilesMessage,
      resendMessage,
      updateMessage,
      deleteMessage,
      // context
      nicknamesMap,
      isMuted,
      isChannelFrozen,
      currentUserId,
      typingMembers
    } },
    import_react38.default.createElement(UserProfileProvider, { disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile, renderUserProfile, onUserProfileMessage }, children)
  );
};
var useThreadContext = function() {
  var context = import_react38.default.useContext(ThreadContext);
  if (!context)
    throw new Error("ThreadContext not found. Use within the Thread module");
  return context;
};

// node_modules/@sendbird/uikit-react/Thread/components/ThreadUI.js
var import_react48 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Thread/components/ParentMessageInfo.js
var import_react42 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-RC1OoWx9.js
var import_react39 = __toESM(require_react(), 1);
var RemoveMessage = function(props) {
  var _a, _b;
  var onCancel = props.onCancel, onSubmit = props.onSubmit, message = props.message;
  var stringSet = (0, import_react39.useContext)(LocalizationContext).stringSet;
  var deleteMessage = useThreadContext().deleteMessage;
  return import_react39.default.createElement(Modal, { type: ButtonTypes.DANGER, disabled: ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onCancel, onSubmit: function() {
    deleteMessage(message).then(function() {
      onCancel === null || onCancel === void 0 ? void 0 : onCancel();
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
    });
  }, submitText: stringSet.MESSAGE_MENU__DELETE, titleText: getModalDeleteMessageTitle(stringSet, message) });
};

// node_modules/@sendbird/uikit-react/Thread/components/ParentMessageInfoItem.js
var import_react40 = __toESM(require_react(), 1);
var import_react_dom20 = __toESM(require_react_dom(), 1);
function ParentMessageInfoItem(_a) {
  var _this = this;
  var _b, _c, _d, _e, _f, _g, _h, _j;
  var className = _a.className, message = _a.message, showFileViewer = _a.showFileViewer, _k = _a.onBeforeDownloadFileMessage, onBeforeDownloadFileMessage = _k === void 0 ? null : _k;
  var _l = useSendbirdStateContext(), stores = _l.stores, config = _l.config, eventHandlers = _l.eventHandlers;
  var logger = config.logger;
  var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;
  var currentUserId = (_d = (_c = stores === null || stores === void 0 ? void 0 : stores.userStore) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.userId;
  var stringSet = useLocalization().stringSet;
  var _m = useThreadContext(), currentChannel = _m.currentChannel, emojiContainer = _m.emojiContainer, nicknamesMap = _m.nicknamesMap, toggleReaction = _m.toggleReaction;
  var isMobile = useMediaQueryContext().isMobile;
  var isReactionEnabled = config.groupChannel.enableReactions;
  var isMentionEnabled = config.groupChannel.enableMention;
  var threadMessageKindKey = useThreadMessageKindKeySelector({
    threadMessageKind: ThreadMessageKind.PARENT,
    isMobile
  });
  var statefulFileInfoList = useFileInfoListWithUploaded(message);
  var isMentionedMessage = isMentionEnabled && ((_e = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _e === void 0 ? void 0 : _e.length) > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0;
  var isReactionActivated = isReactionEnabled && config.groupChannel.replyType === "thread" && ((_f = message === null || message === void 0 ? void 0 : message.reactions) === null || _f === void 0 ? void 0 : _f.length) > 0;
  var tokens = (0, import_react40.useMemo)(function() {
    var _a2;
    if (isMentionedMessage) {
      return tokenizeMessage({
        mentionedUsers: (_a2 = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a2 !== void 0 ? _a2 : void 0,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
        includeMarkdown: config.groupChannel.enableMarkdownForUserMessage
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message,
      includeMarkdown: config.groupChannel.enableMarkdownForUserMessage
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  var downloadFileWithUrl = function() {
    if (isFileMessage(message))
      openURL(message.url);
  };
  var handleOnClickTextButton = onBeforeDownloadFileMessage ? function() {
    return __awaiter(_this, void 0, void 0, function() {
      var allowDownload, err_1;
      var _a2, _b2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!(message.messageType === "file")) return [3, 4];
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, , 4]);
            return [4, onBeforeDownloadFileMessage({ message })];
          case 2:
            allowDownload = _c2.sent();
            if (allowDownload) {
              downloadFileWithUrl();
            } else {
              (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "ParentMessageInfoItem: Not allowed to download.");
            }
            return [3, 4];
          case 3:
            err_1 = _c2.sent();
            (_b2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "ParentMessageInfoItem: Error occurred while determining download continuation:", err_1);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  } : downloadFileWithUrl;
  var _o = (0, import_react40.useState)(false), isImageRendered = _o[0], setImageRendered = _o[1];
  var thumbnailUrl = ((_g = message === null || message === void 0 ? void 0 : message.thumbnails) === null || _g === void 0 ? void 0 : _g.length) > 0 ? (_h = message === null || message === void 0 ? void 0 : message.thumbnails[0]) === null || _h === void 0 ? void 0 : _h.url : "";
  return import_react40.default.createElement(
    "div",
    { className: "sendbird-parent-message-info-item ".concat(className) },
    isUserMessage(message) && import_react40.default.createElement(
      Label,
      { className: "sendbird-parent-message-info-item__text-message", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 },
      import_react40.default.createElement(TextFragment, { tokens }),
      isEditedMessage(message) && import_react40.default.createElement(Label, { className: "sendbird-parent-message-info-item__text-message edited", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, " ".concat(stringSet.MESSAGE_EDITED, " "))
    ),
    // Instead of the FileMessageItemBody component
    getUIKitMessageType(message) === getUIKitMessageTypes().FILE && import_react40.default.createElement(
      "div",
      { className: "sendbird-parent-message-info-item__file-message" },
      import_react40.default.createElement(
        "div",
        { className: "sendbird-parent-message-info-item__file-message__file-icon" },
        import_react40.default.createElement(Icon, { className: "sendbird-parent-message-info-item__file-message__file-icon__icon", type: {
          IMAGE: IconTypes.PHOTO,
          VIDEO: IconTypes.PLAY,
          AUDIO: IconTypes.FILE_AUDIO,
          GIF: IconTypes.GIF,
          OTHERS: IconTypes.FILE_DOCUMENT
        }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)], fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
      ),
      import_react40.default.createElement(
        TextButton,
        { className: "sendbird-parent-message-info-item__file-message__file-name", onClick: handleOnClickTextButton, color: Colors.ONBACKGROUND_1 },
        import_react40.default.createElement(Label, { className: "sendbird-parent-message-info-item__file-message__file-name__text", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url), 30))
      )
    ),
    isMultipleFilesMessage(message) && import_react40.default.createElement(MultipleFilesMessageItemBody, { className: "sendbird-parent-message-info-item__multiple-files-message-wrapper", message, isByMe: false, isReactionEnabled, threadMessageKindKey, statefulFileInfoList, onBeforeDownloadFileMessage }),
    isVoiceMessage(message) && import_react40.default.createElement(
      "div",
      { className: "sendbird-parent-message-info-item__voice-message" },
      import_react40.default.createElement(VoiceMessageItemBody, { className: "sendbird-parent-message-info-item__voice-message__item", message, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isByMe: false, isReactionEnabled })
    ),
    isThumbnailMessage(message) && import_react40.default.createElement(
      "div",
      { className: "sendbird-parent-message-info-item__thumbnail-message", onClick: function() {
        if (isSentMessage(message)) {
          showFileViewer === null || showFileViewer === void 0 ? void 0 : showFileViewer(true);
        }
      } },
      import_react40.default.createElement(ImageRenderer, { className: "sendbird-parent-message-info-item__thumbnail-message__thumbnail", url: thumbnailUrl || (message === null || message === void 0 ? void 0 : message.url) || (message === null || message === void 0 ? void 0 : message.plainUrl), alt: message === null || message === void 0 ? void 0 : message.type, width: "200px", height: "148px", onLoad: function() {
        setImageRendered(true);
      }, placeHolder: function(_a2) {
        var style = _a2.style;
        return import_react40.default.createElement(
          "div",
          { className: "sendbird-parent-message-info-item__thumbnail-message__placeholder", style },
          import_react40.default.createElement(
            "div",
            { className: "sendbird-parent-message-info-item__thumbnail-message__placeholder__icon" },
            import_react40.default.createElement(Icon, { type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: "34px", height: "34px" })
          )
        );
      } }),
      isVideoMessage(message) && !thumbnailUrl && !isImageRendered && import_react40.default.createElement(
        "video",
        { className: "sendbird-parent-message-info-item__thumbnail-message__video" },
        import_react40.default.createElement("source", { src: (message === null || message === void 0 ? void 0 : message.url) || (message === null || message === void 0 ? void 0 : message.plainUrl), type: message === null || message === void 0 ? void 0 : message.type })
      ),
      import_react40.default.createElement("div", { className: "sendbird-parent-message-info-item__thumbnail-message__image-cover" }),
      (isVideoMessage(message) || isGifMessage(message)) && import_react40.default.createElement(
        "div",
        { className: "sendbird-parent-message-info-item__thumbnail-message__icon-wrapper" },
        import_react40.default.createElement(
          "div",
          { className: "sendbird-parent-message-info-item__thumbnail-message__icon-wrapper__icon" },
          import_react40.default.createElement(Icon, { type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF, fillColor: IconColors.ON_BACKGROUND_2, width: "34px", height: "34px" })
        )
      )
    ),
    getUIKitMessageType(message) === ((_j = getUIKitMessageTypes === null || getUIKitMessageTypes === void 0 ? void 0 : getUIKitMessageTypes()) === null || _j === void 0 ? void 0 : _j.UNKNOWN) && import_react40.default.createElement(
      "div",
      { className: "sendbird-parent-message-info-item__unknown-message" },
      import_react40.default.createElement(Label, { className: "sendbird-parent-message-info-item__unknown-message__header", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE),
      import_react40.default.createElement(Label, { className: "sendbird-parent-message-info-item__unknown-message__description", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE)
    ),
    isReactionActivated && import_react40.default.createElement(
      "div",
      { className: "sendbird-parent-message-info__reactions" },
      import_react40.default.createElement(EmojiReactions, { userId: currentUserId, message, channel: currentChannel, isByMe: false, emojiContainer, memberNicknamesMap: nicknamesMap, toggleReaction, onPressUserProfile: onPressUserProfileHandler })
    )
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-9-9DQjCI.js
var import_react41 = __toESM(require_react(), 1);
var SuggestedMentionList = function(props) {
  var currentChannel = useThreadContext().currentChannel;
  return import_react41.default.createElement(SuggestedMentionListView, __assign({}, props, { currentChannel }));
};

// node_modules/@sendbird/uikit-react/chunks/bundle-B5vIoHSd.js
var Role = {
  OPERATOR: "operator",
  NONE: "none"
};

// node_modules/@sendbird/uikit-react/Thread/components/ParentMessageInfo.js
var import_react_dom21 = __toESM(require_react_dom(), 1);
function ParentMessageInfo(_a) {
  var _this = this;
  var _b, _c, _d, _e, _f, _g;
  var className = _a.className, _h = _a.renderEmojiMenu, renderEmojiMenu = _h === void 0 ? function(props) {
    return import_react42.default.createElement(MessageEmojiMenu, __assign({}, props));
  } : _h, _j = _a.renderMessageMenu, renderMessageMenu = _j === void 0 ? function(props) {
    return import_react42.default.createElement(MessageMenu, __assign({}, props));
  } : _j;
  var _k = useSendbirdStateContext(), stores = _k.stores, config = _k.config;
  var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;
  var userId = (_c = (_b = stores.userStore.user) === null || _b === void 0 ? void 0 : _b.userId) !== null && _c !== void 0 ? _c : "";
  var dateLocale = useLocalization().dateLocale;
  var _l = useThreadContext(), currentChannel = _l.currentChannel, parentMessage = _l.parentMessage, allThreadMessages = _l.allThreadMessages, emojiContainer = _l.emojiContainer, toggleReaction = _l.toggleReaction, updateMessage = _l.updateMessage, deleteMessage = _l.deleteMessage, onMoveToParentMessage = _l.onMoveToParentMessage, onHeaderActionClick = _l.onHeaderActionClick, isMuted = _l.isMuted, isChannelFrozen = _l.isChannelFrozen, onBeforeDownloadFileMessage = _l.onBeforeDownloadFileMessage;
  var isMobile = useMediaQueryContext().isMobile;
  var isMenuMounted = useElementObserver("#".concat(getObservingId(parentMessage.messageId), ".").concat(MENU_OBSERVING_CLASS_NAME), [
    document.getElementById(MENU_ROOT_ID),
    document.getElementById(EMOJI_MENU_ROOT_ID)
  ]);
  var _m = (0, import_react42.useState)(false), showRemove = _m[0], setShowRemove = _m[1];
  var _o = (0, import_react42.useState)(false), showFileViewer = _o[0], setShowFileViewer = _o[1];
  var isReactionEnabled = getIsReactionEnabled({
    channel: currentChannel,
    config
  });
  var isMentionEnabled = groupChannel.enableMention;
  var replyType = getCaseResolvedReplyType(groupChannel.replyType).upperCase;
  var isByMe = userId === parentMessage.sender.userId;
  var mobileMenuRef = (0, import_react42.useRef)(null);
  var _p = (0, import_react42.useState)(false), showMobileMenu = _p[0], setShowMobileMenu = _p[1];
  var longPress = useLongPress({
    onLongPress: function() {
      if (isMobile) {
        setShowMobileMenu(true);
      }
    }
  }, {
    shouldPreventDefault: false
  });
  var _q = (0, import_react42.useState)(false), showEditInput = _q[0], setShowEditInput = _q[1];
  var disabled = !isOnline || isMuted || isChannelFrozen && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR);
  var editMessageInputRef = (0, import_react42.useRef)(null);
  var _r = (0, import_react42.useState)(""), mentionNickname = _r[0], setMentionNickname = _r[1];
  var _s = (0, import_react42.useState)([]), mentionedUsers = _s[0], setMentionedUsers = _s[1];
  var _t = (0, import_react42.useState)([]), mentionedUserIds = _t[0], setMentionedUserIds = _t[1];
  var _u = (0, import_react42.useState)(null), messageInputEvent = _u[0], setMessageInputEvent = _u[1];
  var _v = (0, import_react42.useState)(null), selectedUser = _v[0], setSelectedUser = _v[1];
  var _w = (0, import_react42.useState)([]), mentionSuggestedUsers = _w[0], setMentionSuggestedUsers = _w[1];
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isMuted && !(isChannelFrozen && !(currentChannel.myRole === Role.OPERATOR));
  var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);
  (0, import_react42.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId2 = _a2.userId;
      var i = mentionedUserIds.indexOf(userId2);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  var handleOnDownloadClick = function(e) {
    return __awaiter(_this, void 0, void 0, function() {
      var allowDownload, err_1;
      var _a2, _b2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!onBeforeDownloadFileMessage)
              return [
                2
                /*return*/
              ];
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, , 4]);
            return [4, onBeforeDownloadFileMessage({ message: parentMessage })];
          case 2:
            allowDownload = _c2.sent();
            if (!allowDownload) {
              e.preventDefault();
              (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "ParentMessageInfo: Not allowed to download.");
            }
            return [3, 4];
          case 3:
            err_1 = _c2.sent();
            (_b2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "ParentMessageInfo: Error occurred while determining download continuation:", err_1);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var avatarRef = (0, import_react42.useRef)(null);
  var _x = (0, import_react42.useContext)(UserProfileContext), disableUserProfile = _x.disableUserProfile, renderUserProfile = _x.renderUserProfile;
  if (showEditInput && ((_d = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.isUserMessage) === null || _d === void 0 ? void 0 : _d.call(parentMessage))) {
    return import_react42.default.createElement(
      import_react42.default.Fragment,
      null,
      displaySuggestedMentionList && import_react42.default.createElement(SuggestedMentionList, {
        className: "parent-message-info--suggested-mention-list",
        targetNickname: mentionNickname,
        inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0,
        // renderUserMentionItem={renderUserMentionItem}
        onUserItemClick: function(user) {
          if (user) {
            setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
          }
          setMentionNickname("");
          setSelectedUser(user);
          setMessageInputEvent(null);
        },
        onFocusItemChange: function() {
          setMessageInputEvent(null);
        },
        onFetchUsers: function(users) {
          setMentionSuggestedUsers(users);
        },
        ableAddMention: ableMention,
        maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
        maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
      }),
      import_react42.default.createElement(MessageInput, { channel: currentChannel, isEdit: true, disabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled, message: parentMessage, onStartTyping: function() {
        var _a2;
        (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel);
      }, onUpdateMessage: function(_a2) {
        var _b2;
        var messageId = _a2.messageId, message = _a2.message, mentionTemplate = _a2.mentionTemplate;
        updateMessage({
          messageId,
          message,
          mentionedUsers,
          mentionTemplate
        });
        setShowEditInput(false);
        (_b2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(currentChannel);
      }, onCancelEdit: function() {
        var _a2;
        setMentionNickname("");
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEditInput(false);
        (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel);
      }, onUserMentioned: function(user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname("");
        }
      }, onMentionStringChange: function(mentionText) {
        setMentionNickname(mentionText);
      }, onMentionedUserIdsUpdated: function(userIds) {
        setMentionedUserIds(userIds);
      }, onKeyDown: function(e) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e);
          return true;
        }
        return false;
      } })
    );
  }
  return import_react42.default.createElement(
    "div",
    __assign({ className: "sendbird-parent-message-info ".concat(className) }, isMobile ? __assign({}, longPress) : {}, { ref: mobileMenuRef }),
    import_react42.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
      var _a2, _b2, _c2;
      return import_react42.default.createElement(Avatar$1, { className: "sendbird-parent-message-info__sender", ref: avatarRef, src: ((_b2 = (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) === null || _a2 === void 0 ? void 0 : _a2.find(function(m) {
        var _a3;
        return (m === null || m === void 0 ? void 0 : m.userId) === ((_a3 = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _a3 === void 0 ? void 0 : _a3.userId);
      })) === null || _b2 === void 0 ? void 0 : _b2.profileUrl) || ((_c2 = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _c2 === void 0 ? void 0 : _c2.profileUrl), alt: "thread message sender", width: "40px", height: "40px", onClick: function() {
        if (!disableUserProfile) {
          toggleDropdown();
        }
      } });
    }, menuItems: function(closeDropdown) {
      return renderUserProfile ? renderUserProfile({
        user: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender,
        close: closeDropdown,
        currentUserId: userId,
        avatarRef
      }) : import_react42.default.createElement(
        MenuItems,
        { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown, style: { paddingTop: "0px", paddingBottom: "0px" } },
        import_react42.default.createElement(UserProfile, { user: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender, currentUserId: userId, onSuccess: closeDropdown })
      );
    } }),
    import_react42.default.createElement(
      "div",
      { className: "sendbird-parent-message-info__content" },
      import_react42.default.createElement(
        "div",
        { className: "sendbird-parent-message-info__content__info" },
        import_react42.default.createElement(Label, { className: isReactionEnabled ? "sendbird-parent-message-info__content__info__sender-name--use-reaction" : "sendbird-parent-message-info__content__info__sender-name", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, ((_f = (_e = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) === null || _e === void 0 ? void 0 : _e.find(function(member) {
          var _a2;
          return (member === null || member === void 0 ? void 0 : member.userId) === ((_a2 = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _a2 === void 0 ? void 0 : _a2.userId);
        })) === null || _f === void 0 ? void 0 : _f.nickname) || (getSenderName === null || getSenderName === void 0 ? void 0 : getSenderName(parentMessage))),
        import_react42.default.createElement(Label, { className: "sendbird-parent-message-info__content__info__sent-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, format((parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.createdAt) || 0, "p", { locale: dateLocale }))
      ),
      import_react42.default.createElement(ParentMessageInfoItem, { message: parentMessage, showFileViewer: setShowFileViewer, onBeforeDownloadFileMessage })
    ),
    !isMobile && import_react42.default.createElement(
      "div",
      { className: "sendbird-parent-message-info__menu-container" },
      renderMessageMenu({
        className: classnames("sendbird-parent-message-info__context-menu", isReactionEnabled && "use-reaction", isMenuMounted && "sendbird-mouse-hover"),
        channel: currentChannel,
        message: parentMessage,
        isByMe: userId === ((_g = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _g === void 0 ? void 0 : _g.userId),
        disableDeleteMessage: allThreadMessages.length > 0,
        replyType,
        showEdit: setShowEditInput,
        showRemove: setShowRemove,
        onMoveToParentMessage: function() {
          onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage({ message: parentMessage, channel: currentChannel });
        },
        deleteMessage
      }),
      isReactionEnabled && renderEmojiMenu({
        className: classnames("sendbird-parent-message-info__reaction-menu", isMenuMounted && "sendbird-mouse-hover"),
        message: parentMessage,
        userId,
        emojiContainer,
        toggleReaction
      })
    ),
    showRemove && import_react42.default.createElement(RemoveMessage, { onCancel: function() {
      return setShowRemove(false);
    }, onSubmit: function() {
      onHeaderActionClick === null || onHeaderActionClick === void 0 ? void 0 : onHeaderActionClick();
    }, message: parentMessage }),
    showFileViewer && import_react42.default.createElement(FileViewer, { message: parentMessage, onClose: function() {
      return setShowFileViewer(false);
    }, onDelete: function() {
      deleteMessage(parentMessage).then(function() {
        setShowFileViewer(false);
      });
    }, onDownloadClick: handleOnDownloadClick }),
    showMobileMenu && import_react42.default.createElement(MobileMenu, { parentRef: mobileMenuRef, channel: currentChannel, message: parentMessage, userId, replyType, hideMenu: function() {
      setShowMobileMenu(false);
    }, deleteMessage, deleteMenuState: (allThreadMessages === null || allThreadMessages === void 0 ? void 0 : allThreadMessages.length) === 0 ? "ACTIVE" : "HIDE", isReactionEnabled, isByMe, emojiContainer, showEdit: setShowEditInput, showRemove: setShowRemove, toggleReaction, isOpenedFromThread: true, onDownloadClick: handleOnDownloadClick })
  );
}

// node_modules/@sendbird/uikit-react/Thread/components/ThreadHeader.js
var import_react43 = __toESM(require_react(), 1);
function ThreadHeader(_a) {
  var className = _a.className, channelName = _a.channelName, renderActionIcon = _a.renderActionIcon, onActionIconClick = _a.onActionIconClick, onChannelNameClick = _a.onChannelNameClick;
  var stringSet = useLocalization().stringSet;
  var MemoizedActionIcon = (0, import_react43.useMemo)(function() {
    if (typeof renderActionIcon === "function" && onActionIconClick) {
      return renderActionIcon({ onActionIconClick });
    }
    return null;
  }, [renderActionIcon]);
  return import_react43.default.createElement(Header$1, { className: "sendbird-thread-header ".concat(className), renderMiddle: function() {
    return import_react43.default.createElement(Header$1.Title, { title: stringSet.THREAD__HEADER_TITLE, subtitle: channelName, onClickSubtitle: onChannelNameClick });
  }, renderRight: function() {
    return MemoizedActionIcon || import_react43.default.createElement(
      "div",
      { className: "sendbird-thread-header__action" },
      import_react43.default.createElement(Header$1.IconButton, { onClick: function(e) {
        return onActionIconClick(e);
      }, type: IconTypes.CLOSE, color: IconColors.ON_BACKGROUND_1 })
    );
  } });
}

// node_modules/@sendbird/uikit-react/Thread/components/ThreadList.js
var import_react45 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Thread/components/ThreadListItem.js
var import_react44 = __toESM(require_react(), 1);
var import_react_dom22 = __toESM(require_react_dom(), 1);
function ThreadListItemContent(_a) {
  var _this = this;
  var _b, _c, _d, _e, _f;
  var className = _a.className, userId = _a.userId, channel = _a.channel, message = _a.message, _g = _a.chainTop, chainTop = _g === void 0 ? false : _g, _h = _a.chainBottom, chainBottom = _h === void 0 ? false : _h, _j = _a.isMentionEnabled, isMentionEnabled = _j === void 0 ? false : _j, _k = _a.isReactionEnabled, isReactionEnabled = _k === void 0 ? false : _k, _l = _a.disableQuoteMessage, disableQuoteMessage = _l === void 0 ? false : _l, replyType = _a.replyType, nicknamesMap = _a.nicknamesMap, emojiContainer = _a.emojiContainer, showEdit = _a.showEdit, showRemove = _a.showRemove, showFileViewer = _a.showFileViewer, resendMessage = _a.resendMessage, toggleReaction = _a.toggleReaction, onReplyInThread = _a.onReplyInThread, _m = _a.renderEmojiMenu, renderEmojiMenu = _m === void 0 ? function(props) {
    return import_react44.default.createElement(MessageEmojiMenu, __assign({}, props));
  } : _m, _o = _a.renderMessageMenu, renderMessageMenu = _o === void 0 ? function(props) {
    return import_react44.default.createElement(MessageMenu, __assign({}, props));
  } : _o;
  var messageTypes = getUIKitMessageTypes();
  var isMobile = useMediaQueryContext().isMobile;
  var dateLocale = useLocalization().dateLocale;
  var _p = (useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) || {}, config = _p.config, eventHandlers = _p.eventHandlers;
  var logger = config.logger;
  var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;
  var isMenuMounted = useElementObserver("#".concat(getObservingId(message.messageId), ".").concat(MENU_OBSERVING_CLASS_NAME), [
    document.getElementById(MENU_ROOT_ID),
    document.getElementById(EMOJI_MENU_ROOT_ID)
  ]);
  var _q = (0, import_react44.useContext)(UserProfileContext), disableUserProfile = _q.disableUserProfile, renderUserProfile = _q.renderUserProfile;
  var _r = useThreadContext(), deleteMessage = _r.deleteMessage, onBeforeDownloadFileMessage = _r.onBeforeDownloadFileMessage;
  var avatarRef = (0, import_react44.useRef)(null);
  var isByMe = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "pending" || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "failed";
  var useReplying = !!((replyType === "QUOTE_REPLY" || replyType === "THREAD") && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage) && !disableQuoteMessage);
  var supposedHoverClassName = isMenuMounted ? "sendbird-mouse-hover" : "";
  var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);
  var isOgMessageEnabledInGroupChannel = channel.isGroupChannel() && config.groupChannel.enableOgtag;
  var mobileMenuRef = (0, import_react44.useRef)(null);
  var _s = (0, import_react44.useState)(false), showMobileMenu = _s[0], setShowMobileMenu = _s[1];
  var longPress = useLongPress({
    onLongPress: function() {
      if (isMobile) {
        setShowMobileMenu(true);
      }
    }
  }, {
    shouldPreventDefault: false
  });
  var threadMessageKindKey = useThreadMessageKindKeySelector({
    threadMessageKind: ThreadMessageKind.CHILD,
    isMobile
  });
  var statefulFileInfoList = useFileInfoListWithUploaded(message);
  return import_react44.default.createElement(
    "div",
    { className: classnames("sendbird-thread-list-item-content", className, isByMe ? "outgoing" : "incoming"), ref: mobileMenuRef },
    import_react44.default.createElement(
      "div",
      { className: classnames("sendbird-thread-list-item-content__left", isReactionEnabledInChannel && "use-reaction", isByMe ? "outgoing" : "incoming") },
      !isByMe && !chainBottom && import_react44.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        var _a2, _b2, _c2;
        return import_react44.default.createElement(Avatar$1, { className: "sendbird-thread-list-item-content__left__avatar", src: ((_b2 = (_a2 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a2 === void 0 ? void 0 : _a2.find(function(member) {
          var _a3;
          return (member === null || member === void 0 ? void 0 : member.userId) === ((_a3 = message === null || message === void 0 ? void 0 : message.sender) === null || _a3 === void 0 ? void 0 : _a3.userId);
        })) === null || _b2 === void 0 ? void 0 : _b2.profileUrl) || ((_c2 = message === null || message === void 0 ? void 0 : message.sender) === null || _c2 === void 0 ? void 0 : _c2.profileUrl) || "", ref: avatarRef, width: "28px", height: "28px", onClick: function() {
          if (!disableUserProfile) {
            toggleDropdown === null || toggleDropdown === void 0 ? void 0 : toggleDropdown();
          }
        } });
      }, menuItems: function(closeDropdown) {
        return renderUserProfile ? renderUserProfile({
          user: message === null || message === void 0 ? void 0 : message.sender,
          close: closeDropdown,
          currentUserId: userId,
          avatarRef
        }) : import_react44.default.createElement(
          MenuItems,
          { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown, style: { paddingTop: "0px", paddingBottom: "0px" } },
          import_react44.default.createElement(UserProfile, { user: message === null || message === void 0 ? void 0 : message.sender, onSuccess: closeDropdown })
        );
      } }),
      isByMe && !isMobile && import_react44.default.createElement(
        "div",
        { className: classnames("sendbird-thread-list-item-content-menu", isReactionEnabledInChannel && "use-reaction", isByMe ? "outgoing" : "incoming", supposedHoverClassName) },
        renderMessageMenu({
          className: "sendbird-thread-list-item-content-menu__normal-menu",
          channel,
          message,
          isByMe,
          replyType,
          showEdit,
          showRemove,
          resendMessage,
          onReplyInThread,
          deleteMessage
        }),
        isReactionEnabledInChannel && import_react44.default.createElement(import_react44.default.Fragment, null, renderEmojiMenu({
          className: "sendbird-thread-list-item-content-menu__reaction-menu",
          message,
          userId,
          emojiContainer,
          toggleReaction
        }))
      )
    ),
    import_react44.default.createElement(
      "div",
      __assign({ className: "sendbird-thread-list-item-content__middle" }, isMobile ? __assign({}, longPress) : {}),
      !isByMe && !chainTop && !useReplying && import_react44.default.createElement(
        Label,
        { className: "sendbird-thread-list-item-content__middle__sender-name", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 },
        ((_e = (_d = channel === null || channel === void 0 ? void 0 : channel.members) === null || _d === void 0 ? void 0 : _d.find(function(member) {
          var _a2;
          return (member === null || member === void 0 ? void 0 : member.userId) === ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId);
        })) === null || _e === void 0 ? void 0 : _e.nickname) || getSenderName(message)
        // TODO: Divide getting profileUrl logic to utils
      ),
      import_react44.default.createElement(
        "div",
        { className: getClassName(["sendbird-thread-list-item-content__middle__body-container"]) },
        isByMe && !chainBottom && import_react44.default.createElement(
          "div",
          { className: getClassName(["sendbird-thread-list-item-content__middle__body-container__created-at", "left", supposedHoverClassName]) },
          import_react44.default.createElement(
            "div",
            { className: "sendbird-thread-list-item-content__middle__body-container__created-at__component-container" },
            import_react44.default.createElement(MessageStatus, { message, channel })
          )
        ),
        isOgMessageEnabledInGroupChannel && isOGMessage(message) ? import_react44.default.createElement(OGMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, isByMe, isMentionEnabled, isReactionEnabled: isReactionEnabledInChannel, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage }) : isTextMessage(message) && import_react44.default.createElement(TextMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, isByMe, isMentionEnabled, isReactionEnabled: isReactionEnabledInChannel, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage }),
        isVoiceMessage(message) && import_react44.default.createElement(VoiceMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, channelUrl: channel === null || channel === void 0 ? void 0 : channel.url, isByMe, isReactionEnabled: isReactionEnabledInChannel }),
        getUIKitMessageType(message) === messageTypes.FILE && import_react44.default.createElement(FileMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, isByMe, isReactionEnabled: isReactionEnabledInChannel, truncateLimit: isByMe ? 18 : 14, onBeforeDownloadFileMessage }),
        isMultipleFilesMessage(message) && import_react44.default.createElement(MultipleFilesMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, isByMe, isReactionEnabled, threadMessageKindKey, statefulFileInfoList }),
        isThumbnailMessage(message) && import_react44.default.createElement(ThumbnailMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, isByMe, isReactionEnabled: isReactionEnabledInChannel, showFileViewer, style: {
          width: isMobile ? "100%" : "200px",
          height: "148px"
        } }),
        getUIKitMessageType(message) === messageTypes.UNKNOWN && import_react44.default.createElement(UnknownMessageItemBody, { className: "sendbird-thread-list-item-content__middle__message-item-body", message, isByMe, isReactionEnabled: isReactionEnabledInChannel }),
        isReactionEnabledInChannel && ((_f = message === null || message === void 0 ? void 0 : message.reactions) === null || _f === void 0 ? void 0 : _f.length) > 0 && import_react44.default.createElement(
          "div",
          { className: getClassName([
            "sendbird-thread-list-item-content-reactions",
            !isByMe || isThumbnailMessage(message) || isOgMessageEnabledInGroupChannel && isOGMessage(message) || isMultipleFilesMessage(message) ? "" : "primary"
          ]) },
          import_react44.default.createElement(EmojiReactions, { userId, message, channel, isByMe, emojiContainer, memberNicknamesMap: nicknamesMap, toggleReaction, onPressUserProfile: onPressUserProfileHandler })
        ),
        !isByMe && !chainBottom && import_react44.default.createElement(Label, { className: getClassName(["sendbird-thread-list-item-content__middle__body-container__created-at", "right", supposedHoverClassName]), type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, "p", {
          locale: dateLocale
        }))
      )
    ),
    import_react44.default.createElement("div", { className: classnames("sendbird-thread-list-item-content__right", chainTop && "chain-top", isByMe ? "outgoing" : "incoming") }, !isByMe && !isMobile && import_react44.default.createElement(
      "div",
      { className: "sendbird-thread-list-item-content-menu ".concat(supposedHoverClassName) },
      isReactionEnabledInChannel && renderEmojiMenu({
        className: "sendbird-thread-list-item-content-menu__reaction-menu",
        message,
        userId,
        emojiContainer,
        toggleReaction
      }),
      renderMessageMenu({
        className: "sendbird-thread-list-item-content-menu__normal-menu",
        channel,
        message,
        isByMe,
        replyType,
        showRemove,
        resendMessage,
        onReplyInThread,
        deleteMessage
      })
    )),
    showMobileMenu && import_react44.default.createElement(MobileMenu, { parentRef: mobileMenuRef, channel, message, userId, replyType, hideMenu: function() {
      setShowMobileMenu(false);
    }, isReactionEnabled, isByMe, emojiContainer, showEdit, showRemove, toggleReaction, isOpenedFromThread: true, deleteMessage, onDownloadClick: function(e) {
      return __awaiter(_this, void 0, void 0, function() {
        var allowDownload, err_1;
        var _a2, _b2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!onBeforeDownloadFileMessage)
                return [
                  2
                  /*return*/
                ];
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              return [4, onBeforeDownloadFileMessage({ message })];
            case 2:
              allowDownload = _c2.sent();
              if (!allowDownload) {
                e.preventDefault();
                (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "ThreadListItemContent: Not allowed to download.");
              }
              return [3, 4];
            case 3:
              err_1 = _c2.sent();
              (_b2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "ThreadListItemContent: Error occurred while determining download continuation:", err_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } })
  );
}
function ThreadListItem(_a) {
  var _this = this;
  var _b, _c, _d, _e;
  var className = _a.className, message = _a.message, chainTop = _a.chainTop, chainBottom = _a.chainBottom, hasSeparator = _a.hasSeparator, renderCustomSeparator = _a.renderCustomSeparator, handleScroll = _a.handleScroll, renderEmojiMenu = _a.renderEmojiMenu, renderMessageMenu = _a.renderMessageMenu;
  var _f = useSendbirdStateContext(), stores = _f.stores, config = _f.config;
  var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;
  var userId = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.userStore) === null || _b === void 0 ? void 0 : _b.user) === null || _c === void 0 ? void 0 : _c.userId;
  var _g = useLocalization(), dateLocale = _g.dateLocale, stringSet = _g.stringSet;
  var threadContext = useThreadContext === null || useThreadContext === void 0 ? void 0 : useThreadContext();
  var currentChannel = threadContext.currentChannel, nicknamesMap = threadContext.nicknamesMap, emojiContainer = threadContext.emojiContainer, toggleReaction = threadContext.toggleReaction, threadListState = threadContext.threadListState, updateMessage = threadContext.updateMessage, resendMessage = threadContext.resendMessage, deleteMessage = threadContext.deleteMessage, isMuted = threadContext.isMuted, isChannelFrozen = threadContext.isChannelFrozen, onBeforeDownloadFileMessage = threadContext.onBeforeDownloadFileMessage;
  var openingMessage = threadContext === null || threadContext === void 0 ? void 0 : threadContext.message;
  var _h = (0, import_react44.useState)(false), showEdit = _h[0], setShowEdit = _h[1];
  var _j = (0, import_react44.useState)(false), showRemove = _j[0], setShowRemove = _j[1];
  var _k = (0, import_react44.useState)(false), showFileViewer = _k[0], setShowFileViewer = _k[1];
  var isReactionEnabled = getIsReactionEnabled({
    channel: currentChannel,
    config
  });
  var isMentionEnabled = groupChannel.enableMention;
  var replyType = getCaseResolvedReplyType(groupChannel.replyType).upperCase;
  var messageScrollRef = (0, import_react44.useRef)(null);
  (0, import_react44.useLayoutEffect)(function() {
    var _a2;
    if ((openingMessage === null || openingMessage === void 0 ? void 0 : openingMessage.messageId) === (message === null || message === void 0 ? void 0 : message.messageId) && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      (_a2 = messageScrollRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollIntoView({ block: "center", inline: "center" });
    }
  }, [openingMessage, messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current]);
  (0, import_react44.useLayoutEffect)(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, [showEdit, (_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length]);
  var editMessageInputRef = (0, import_react44.useRef)(null);
  var _l = (0, import_react44.useState)(""), mentionNickname = _l[0], setMentionNickname = _l[1];
  var _m = (0, import_react44.useState)([]), mentionedUsers = _m[0], setMentionedUsers = _m[1];
  var _o = (0, import_react44.useState)([]), mentionedUserIds = _o[0], setMentionedUserIds = _o[1];
  var _p = (0, import_react44.useState)(null), messageInputEvent = _p[0], setMessageInputEvent = _p[1];
  var _q = (0, import_react44.useState)(null), selectedUser = _q[0], setSelectedUser = _q[1];
  var _r = (0, import_react44.useState)([]), mentionSuggestedUsers = _r[0], setMentionSuggestedUsers = _r[1];
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isMuted && !(isChannelFrozen && !(currentChannel.myRole === Role.OPERATOR));
  var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);
  (0, import_react44.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId2 = _a2.userId;
      var i = mentionedUserIds.indexOf(userId2);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  var disabled = !(threadListState === ThreadListStateTypes.INITIALIZED) || !isOnline || isMuted || isChannelFrozen;
  var MemorizedSeparator = (0, import_react44.useMemo)(function() {
    if (typeof renderCustomSeparator === "function") {
      return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message });
    }
  }, [message, renderCustomSeparator]);
  if (showEdit && message.isUserMessage()) {
    return import_react44.default.createElement(
      import_react44.default.Fragment,
      null,
      displaySuggestedMentionList && import_react44.default.createElement(SuggestedMentionList, {
        targetNickname: mentionNickname,
        inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0,
        // renderUserMentionItem={renderUserMentionItem}
        onUserItemClick: function(user) {
          if (user) {
            setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
          }
          setMentionNickname("");
          setSelectedUser(user);
          setMessageInputEvent(null);
        },
        onFocusItemChange: function() {
          setMessageInputEvent(null);
        },
        onFetchUsers: function(users) {
          setMentionSuggestedUsers(users);
        },
        ableAddMention: ableMention,
        maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
        maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
      }),
      import_react44.default.createElement(MessageInput, { isEdit: true, channel: currentChannel, disabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled, message, onStartTyping: function() {
        var _a2;
        (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel);
      }, onUpdateMessage: function(_a2) {
        var _b2;
        var messageId = _a2.messageId, message2 = _a2.message, mentionTemplate = _a2.mentionTemplate;
        updateMessage({
          messageId,
          message: message2,
          mentionedUsers,
          mentionTemplate
        });
        setShowEdit(false);
        (_b2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(currentChannel);
      }, onCancelEdit: function() {
        var _a2;
        setMentionNickname("");
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEdit(false);
        (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel);
      }, onUserMentioned: function(user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname("");
        }
      }, onMentionStringChange: function(mentionText) {
        setMentionNickname(mentionText);
      }, onMentionedUserIdsUpdated: function(userIds) {
        setMentionedUserIds(userIds);
      }, onKeyDown: function(e) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e);
          return true;
        }
        return false;
      } })
    );
  }
  return import_react44.default.createElement(
    "div",
    { ref: messageScrollRef, className: classnames("sendbird-thread-list-item", className), "data-testid": "sendbird-thread-list-item" },
    hasSeparator && (message === null || message === void 0 ? void 0 : message.createdAt) && (MemorizedSeparator || import_react44.default.createElement(
      DateSeparator,
      null,
      import_react44.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message === null || message === void 0 ? void 0 : message.createdAt, stringSet.DATE_FORMAT__THREAD_LIST__DATE_SEPARATOR, { locale: dateLocale }))
    )),
    import_react44.default.createElement(ThreadListItemContent, { userId, channel: currentChannel, message, chainTop, chainBottom, isReactionEnabled, isMentionEnabled, disableQuoteMessage: true, replyType, nicknamesMap, emojiContainer, resendMessage, showRemove: setShowRemove, showFileViewer: setShowFileViewer, toggleReaction, showEdit: setShowEdit, renderEmojiMenu, renderMessageMenu }),
    showRemove && import_react44.default.createElement(RemoveMessage, { message, onCancel: function() {
      return setShowRemove(false);
    } }),
    showFileViewer && import_react44.default.createElement(FileViewer, { message, isByMe: ((_e = message === null || message === void 0 ? void 0 : message.sender) === null || _e === void 0 ? void 0 : _e.userId) === userId, onClose: function() {
      return setShowFileViewer(false);
    }, onDelete: function() {
      deleteMessage(message);
      setShowFileViewer(false);
    }, onDownloadClick: function(e) {
      return __awaiter(_this, void 0, void 0, function() {
        var allowDownload, err_1;
        var _a2, _b2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!onBeforeDownloadFileMessage)
                return [
                  2
                  /*return*/
                ];
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              return [4, onBeforeDownloadFileMessage({ message })];
            case 2:
              allowDownload = _c2.sent();
              if (!allowDownload) {
                e.preventDefault();
                (_a2 = logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "ThreadListItem: Not allowed to download.");
              }
              return [3, 4];
            case 3:
              err_1 = _c2.sent();
              (_b2 = logger.error) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "ThreadListItem: Error occurred while determining download continuation:", err_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } })
  );
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isSameDay/index.js
function isSameDay2(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format3 = args.formats[width] || args.formats[args.defaultWidth];
    return format3;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1e3;

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t, "prototype", {
    writable: false
  }), e && _setPrototypeOf(t, e);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
    return t2.__proto__ || Object.getPrototypeOf(t2);
  }, _getPrototypeOf(t);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t;
  })();
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(t) {
  var r = _isNativeReflectConstruct();
  return function() {
    var e, o = _getPrototypeOf(t);
    if (r) {
      var s = _getPrototypeOf(this).constructor;
      e = Reflect.construct(o, arguments, s);
    } else e = o.apply(this, arguments);
    return _possibleConstructorReturn(this, e);
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/@sendbird/uikit-react/Thread/components/ThreadList.js
var import_react_dom23 = __toESM(require_react_dom(), 1);
function ThreadList(_a) {
  var className = _a.className, _b = _a.renderMessage, renderMessage = _b === void 0 ? function(props) {
    return import_react45.default.createElement(ThreadListItem, __assign({}, props));
  } : _b, renderCustomSeparator = _a.renderCustomSeparator, scrollRef = _a.scrollRef, scrollBottom = _a.scrollBottom;
  var config = useSendbirdStateContext().config;
  var userId = config.userId;
  var _c = useThreadContext(), currentChannel = _c.currentChannel, allThreadMessages = _c.allThreadMessages, localThreadMessages = _c.localThreadMessages;
  return import_react45.default.createElement(
    "div",
    { className: "sendbird-thread-list ".concat(className) },
    allThreadMessages.map(function(message, idx) {
      var _a2;
      var isByMe = ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === userId;
      var prevMessage = allThreadMessages[idx - 1];
      var nextMessage = allThreadMessages[idx + 1];
      var _b2 = compareMessagesForGrouping(prevMessage, message, nextMessage, currentChannel, getCaseResolvedReplyType(config.groupChannel.replyType).upperCase), chainTop = _b2[0], chainBottom = _b2[1];
      var hasSeparator = !((prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.createdAt) > 0 && isSameDay2(message === null || message === void 0 ? void 0 : message.createdAt, prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.createdAt));
      var handleScroll = function() {
        var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
        if (current && scrollBottom) {
          var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
          if (scrollBottom < bottom) {
            current.scrollTop += bottom - scrollBottom;
          }
        }
      };
      return import_react45.default.createElement(MessageProvider, { message, isByMe, key: message === null || message === void 0 ? void 0 : message.messageId }, renderMessage({
        message,
        chainTop,
        chainBottom,
        hasSeparator,
        renderCustomSeparator,
        handleScroll
      }));
    }),
    localThreadMessages.map(function(message) {
      var _a2;
      var isByMe = ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === userId;
      var handleScroll = function() {
        var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
        if (current) {
          var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
          if (scrollBottom < bottom) {
            current.scrollTop += bottom - scrollBottom;
          }
        }
      };
      return import_react45.default.createElement(MessageProvider, { message, isByMe, key: message === null || message === void 0 ? void 0 : message.messageId }, renderMessage({
        message,
        hasSeparator: false,
        renderCustomSeparator,
        handleScroll
      }));
    })
  );
}

// node_modules/@sendbird/uikit-react/Thread/components/ThreadMessageInput.js
var import_react47 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/hooks/useHandleUploadFiles.js
var import_react46 = __toESM(require_react(), 1);
var import_react_dom24 = __toESM(require_react_dom(), 1);
var useHandleUploadFiles = function(_a, _b) {
  var sendFileMessage = _a.sendFileMessage, sendMultipleFilesMessage = _a.sendMultipleFilesMessage, quoteMessage = _a.quoteMessage;
  var logger = _b.logger;
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var imageCompression = config.imageCompression;
  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;
  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;
  var openModal = useGlobalModalContext().openModal;
  var handleUploadFiles = (0, import_react46.useCallback)(function(files) {
    return __awaiter(void 0, void 0, void 0, function() {
      var compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!sendFileMessage || !sendMultipleFilesMessage) {
              logger.warning("Channel|useHandleUploadFiles: required functions are undefined", { sendFileMessage, sendMultipleFilesMessage });
              return [
                2
                /*return*/
              ];
            }
            if (files.length === 0) {
              logger.warning("Channel|useHandleUploadFiles: given file list is empty.", { files });
              return [
                2
                /*return*/
              ];
            }
            if (files.length > uikitMultipleFilesMessageLimit) {
              logger.info("Channel|useHandleUploadFiles: Cannot upload files more than ".concat(uikitMultipleFilesMessageLimit));
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace("%d", "".concat(uikitMultipleFilesMessageLimit)),
                  hideFooter: true
                },
                childElement: function(_a3) {
                  var closeModal = _a3.closeModal;
                  return import_react46.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            if (files.some(function(file2) {
              return file2.size > uikitUploadSizeLimit;
            })) {
              logger.info("Channel|useHandleUploadFiles: Cannot upload file size exceeding ".concat(uikitUploadSizeLimit));
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace("%d", "".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),
                  hideFooter: true
                },
                childElement: function(_a3) {
                  var closeModal = _a3.closeModal;
                  return import_react46.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            return [4, compressImages({
              files,
              imageCompression,
              logger
            })];
          case 1:
            compressedFiles = _a2.sent().compressedFiles;
            sendingFiles = compressedFiles;
            if (sendingFiles.length === 1) {
              logger.info("Channel|useHandleUploadFiles: sending one file.");
              file = sendingFiles[0];
              sendFileMessage(file, quoteMessage);
            } else if (sendingFiles.length > 1) {
              logger.info("Channel|useHandleUploadFiles: sending multiple files.");
              imageFiles_1 = [];
              otherFiles_1 = [];
              sendingFiles.forEach(function(file2) {
                if (isImage(file2.type)) {
                  imageFiles_1.push(file2);
                } else {
                  otherFiles_1.push(file2);
                }
              });
              return [2, otherFiles_1.reduce(function(previousPromise, item) {
                return previousPromise.then(function() {
                  return sendFileMessage(item, quoteMessage);
                });
              }, function() {
                if (imageFiles_1.length === 0) {
                  return Promise.resolve();
                } else if (imageFiles_1.length === 1) {
                  return sendFileMessage(imageFiles_1[0], quoteMessage);
                } else {
                  return sendMultipleFilesMessage(imageFiles_1, quoteMessage);
                }
              }())];
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [
    sendFileMessage,
    sendMultipleFilesMessage,
    quoteMessage
  ]);
  return handleUploadFiles;
};

// node_modules/@sendbird/uikit-react/Thread/components/ThreadMessageInput.js
var import_react_dom25 = __toESM(require_react_dom(), 1);
var ThreadMessageInput = function(props, ref) {
  var _a;
  var className = props.className, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon, acceptableMimeTypes = props.acceptableMimeTypes;
  var config = useSendbirdStateContext().config;
  var isMobile = useMediaQueryContext().isMobile;
  var stringSet = useLocalization().stringSet;
  var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;
  var threadContext = useThreadContext();
  var currentChannel = threadContext.currentChannel, parentMessage = threadContext.parentMessage, sendMessage = threadContext.sendMessage, sendFileMessage = threadContext.sendFileMessage, sendVoiceMessage = threadContext.sendVoiceMessage, sendMultipleFilesMessage = threadContext.sendMultipleFilesMessage, isMuted = threadContext.isMuted, isChannelFrozen = threadContext.isChannelFrozen, allThreadMessages = threadContext.allThreadMessages;
  var messageInputRef = (0, import_react47.useRef)();
  var isMentionEnabled = groupChannel.enableMention;
  var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;
  var isMultipleFilesMessageEnabled = (_a = threadContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;
  var threadInputDisabled = props.disabled || !isOnline || isMuted || !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && isChannelFrozen || parentMessage === null;
  var handleUploadFiles = useHandleUploadFiles({
    sendFileMessage,
    sendMultipleFilesMessage,
    quoteMessage: parentMessage
  }, {
    logger
  });
  var _b = (0, import_react47.useState)(""), mentionNickname = _b[0], setMentionNickname = _b[1];
  var _c = (0, import_react47.useState)([]), mentionedUsers = _c[0], setMentionedUsers = _c[1];
  var _d = (0, import_react47.useState)([]), mentionedUserIds = _d[0], setMentionedUserIds = _d[1];
  var _e = (0, import_react47.useState)(null), selectedUser = _e[0], setSelectedUser = _e[1];
  var _f = (0, import_react47.useState)([]), mentionSuggestedUsers = _f[0], setMentionSuggestedUsers = _f[1];
  var _g = (0, import_react47.useState)(null), messageInputEvent = _g[0], setMessageInputEvent = _g[1];
  var _h = (0, import_react47.useState)(false), showVoiceMessageInput = _h[0], setShowVoiceMessageInput = _h[1];
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(currentChannel) && !isDisabledBecauseMuted(currentChannel) && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast);
  (0, import_react47.useEffect)(function() {
    setShowVoiceMessageInput(false);
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  var mentionNodes = useDirtyGetMentions({ ref: ref || messageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);
  (0, import_react47.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId = _a2.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast) && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) !== Role.OPERATOR) {
    return import_react47.default.createElement(import_react47.default.Fragment, null);
  }
  return import_react47.default.createElement(
    "div",
    { className: classnames(showVoiceMessageInput ? "sendbird-thread-message-input--voice-message" : "sendbird-thread-message-input", className) },
    displaySuggestedMentionList && import_react47.default.createElement(SuggestedMentionList, {
      targetNickname: mentionNickname,
      inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0,
      // renderUserMentionItem={renderUserMentionItem}
      onUserItemClick: function(user) {
        if (user) {
          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
        }
        setMentionNickname("");
        setSelectedUser(user);
        setMessageInputEvent(null);
      },
      onFocusItemChange: function() {
        setMessageInputEvent(null);
      },
      onFetchUsers: function(users) {
        setMentionSuggestedUsers(users);
      },
      ableAddMention: ableMention,
      maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
      maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
    }),
    showVoiceMessageInput ? import_react47.default.createElement(VoiceMessageInputWrapper, { channel: currentChannel, onSubmitClick: function(recordedFile, duration) {
      sendVoiceMessage(recordedFile, duration, parentMessage);
      setShowVoiceMessageInput(false);
    }, onCancelClick: function() {
      setShowVoiceMessageInput(false);
    } }) : import_react47.default.createElement(MessageInput, { className: "sendbird-thread-message-input__message-input", messageFieldId: "sendbird-message-input-text-field--thread", channel: currentChannel, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isMobile, disabled: threadInputDisabled, acceptableMimeTypes, setMentionedUsers, mentionSelectedUser: selectedUser, isMentionEnabled, isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function() {
      setShowVoiceMessageInput(true);
    }, renderFileUploadIcon, renderVoiceMessageIcon, renderSendMessageIcon, ref: ref || messageInputRef, placeholder: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isFrozen) && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === H.MUTED && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT || (allThreadMessages.length > 0 ? stringSet.THREAD__INPUT__REPLY_TO_THREAD : stringSet.THREAD__INPUT__REPLY_IN_THREAD), onStartTyping: function() {
      var _a2;
      (_a2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentChannel);
    }, onSendMessage: function(_a2) {
      var _b2;
      var message = _a2.message, mentionTemplate = _a2.mentionTemplate;
      sendMessage({
        message,
        mentionedUsers,
        mentionTemplate,
        quoteMessage: parentMessage
      });
      setMentionNickname("");
      setMentionedUsers([]);
      (_b2 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(currentChannel);
    }, onFileUpload: handleUploadFiles, onUserMentioned: function(user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname("");
      }
    }, onMentionStringChange: function(mentionText) {
      setMentionNickname(mentionText);
    }, onMentionedUserIdsUpdated: function(userIds) {
      setMentionedUserIds(userIds);
    }, onKeyDown: function(e) {
      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    } })
  );
};
var ThreadMessageInput$1 = import_react47.default.forwardRef(ThreadMessageInput);

// node_modules/@sendbird/uikit-react/Thread/components/ThreadUI.js
var import_react_dom26 = __toESM(require_react_dom(), 1);
var useMemorizedHeader = function(_a) {
  var renderHeader = _a.renderHeader;
  return (0, import_react48.useMemo)(function() {
    if (typeof renderHeader === "function") {
      return renderHeader();
    }
    return null;
  }, [renderHeader]);
};
var useMemorizedParentMessageInfo = function(_a) {
  var parentMessage = _a.parentMessage, parentMessageState = _a.parentMessageState, renderParentMessageInfo = _a.renderParentMessageInfo, renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder;
  return (0, import_react48.useMemo)(function() {
    if (parentMessageState === ParentMessageStateTypes.NIL || parentMessageState === ParentMessageStateTypes.LOADING || parentMessageState === ParentMessageStateTypes.INVALID) {
      if (typeof renderParentMessageInfoPlaceholder === "function") {
        return renderParentMessageInfoPlaceholder(parentMessageState);
      }
      switch (parentMessageState) {
        case ParentMessageStateTypes.NIL: {
          return import_react48.default.createElement(PlaceHolder, { className: "sendbird-thread-ui__parent-message-info placeholder-nil", type: PlaceHolderTypes.NO_RESULTS, iconSize: "64px" });
        }
        case ParentMessageStateTypes.LOADING: {
          return import_react48.default.createElement(PlaceHolder, { className: "sendbird-thread-ui__parent-message-info placeholder-loading", type: PlaceHolderTypes.LOADING, iconSize: "64px" });
        }
        case ParentMessageStateTypes.INVALID: {
          return import_react48.default.createElement(PlaceHolder, { className: "sendbird-thread-ui__parent-message-info placeholder-invalid", type: PlaceHolderTypes.WRONG, iconSize: "64px" });
        }
        default: {
          return null;
        }
      }
    } else if (parentMessageState === ParentMessageStateTypes.INITIALIZED) {
      if (typeof renderParentMessageInfo === "function") {
        return renderParentMessageInfo();
      }
    }
    return null;
  }, [
    parentMessage,
    parentMessageState,
    renderParentMessageInfo,
    renderParentMessageInfoPlaceholder
  ]);
};
var useMemorizedThreadList = function(_a) {
  var threadListState = _a.threadListState, renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder;
  return (0, import_react48.useMemo)(function() {
    if (threadListState === ThreadListStateTypes.NIL || threadListState === ThreadListStateTypes.LOADING || threadListState === ThreadListStateTypes.INVALID) {
      if (typeof renderThreadListPlaceHolder === "function") {
        return renderThreadListPlaceHolder(threadListState);
      }
      switch (threadListState) {
        case ThreadListStateTypes.LOADING: {
          return import_react48.default.createElement(PlaceHolder, { className: "sendbird-thread-ui__thread-list placeholder-loading", type: PlaceHolderTypes.LOADING, iconSize: "64px" });
        }
        case ThreadListStateTypes.INVALID: {
          return import_react48.default.createElement(PlaceHolder, { className: "sendbird-thread-ui__thread-list placeholder-invalid", type: PlaceHolderTypes.WRONG, iconSize: "64px" });
        }
        case ThreadListStateTypes.NIL: {
          return import_react48.default.createElement(import_react48.default.Fragment, null);
        }
        default: {
          return null;
        }
      }
    }
    return null;
  }, [
    threadListState,
    renderThreadListPlaceHolder
  ]);
};
var ThreadUI = function(_a) {
  var _b, _c, _d, _e;
  var renderHeader = _a.renderHeader, _f = _a.renderParentMessageInfo, renderParentMessageInfo = _f === void 0 ? function() {
    return import_react48.default.createElement(ParentMessageInfo, { className: "sendbird-thread-ui__parent-message-info" });
  } : _f, renderMessage = _a.renderMessage, renderMessageInput = _a.renderMessageInput, renderCustomSeparator = _a.renderCustomSeparator, renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder, renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder, renderFileUploadIcon = _a.renderFileUploadIcon, renderVoiceMessageIcon = _a.renderVoiceMessageIcon, renderSendMessageIcon = _a.renderSendMessageIcon;
  var stores = useSendbirdStateContext().stores;
  var currentUserId = (_d = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk) === null || _c === void 0 ? void 0 : _c.currentUser) === null || _d === void 0 ? void 0 : _d.userId;
  var stringSet = useLocalization().stringSet;
  var _g = useThreadContext(), currentChannel = _g.currentChannel, allThreadMessages = _g.allThreadMessages, parentMessage = _g.parentMessage, parentMessageState = _g.parentMessageState, threadListState = _g.threadListState, hasMorePrev = _g.hasMorePrev, hasMoreNext = _g.hasMoreNext, fetchPrevThreads = _g.fetchPrevThreads, fetchNextThreads = _g.fetchNextThreads, onHeaderActionClick = _g.onHeaderActionClick, onMoveToParentMessage = _g.onMoveToParentMessage;
  var replyCount = allThreadMessages.length;
  var isByMe = currentUserId === ((_e = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _e === void 0 ? void 0 : _e.userId);
  var MemorizedHeader = useMemorizedHeader({ renderHeader });
  var MemorizedParentMessageInfo = useMemorizedParentMessageInfo({
    parentMessage,
    parentMessageState,
    renderParentMessageInfo,
    renderParentMessageInfoPlaceholder
  });
  var MemorizedThreadList = useMemorizedThreadList({
    threadListState,
    renderThreadListPlaceHolder
  });
  var _h = (0, import_react48.useState)(0), scrollBottom = _h[0], setScrollBottom = _h[1];
  var scrollRef = (0, import_react48.useRef)(null);
  var onScroll = function(e) {
    var _a2;
    var element = e.target;
    var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;
    var threadItemNodes = (_a2 = scrollRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelectorAll(".sendbird-thread-list-item");
    var firstNode = threadItemNodes === null || threadItemNodes === void 0 ? void 0 : threadItemNodes[0];
    if (isAboutSame2(scrollTop, 0, 10) && hasMorePrev) {
      fetchPrevThreads(function(messages) {
        var _a3;
        if (messages) {
          try {
            (_a3 = firstNode === null || firstNode === void 0 ? void 0 : firstNode.scrollIntoView) === null || _a3 === void 0 ? void 0 : _a3.call(firstNode, { block: "start", inline: "nearest" });
          } catch (error) {
          }
        }
      });
    }
    if (isAboutSame2(clientHeight + scrollTop, scrollHeight, 10) && hasMoreNext) {
      var scrollTop_1 = scrollTop;
      fetchNextThreads(function(messages) {
        if (messages) {
          try {
            element.scrollTop = scrollTop_1;
            if (scrollRef.current) {
              scrollRef.current.scrollTop = scrollTop_1;
            }
          } catch (error) {
          }
        }
      });
    }
    if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) {
      var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
      setScrollBottom(current.scrollHeight - current.scrollTop - current.offsetHeight);
    }
  };
  return import_react48.default.createElement(
    "div",
    { className: "sendbird-thread-ui" },
    MemorizedHeader || import_react48.default.createElement(ThreadHeader, { className: "sendbird-thread-ui__header", channelName: getChannelTitle2(currentChannel, currentUserId !== null && currentUserId !== void 0 ? currentUserId : "", stringSet), onActionIconClick: onHeaderActionClick, onChannelNameClick: function() {
      onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage({ message: parentMessage, channel: currentChannel });
    } }),
    import_react48.default.createElement(
      "div",
      { className: classnames("sendbird-thread-ui--scroll, sendbird-conversation__messages"), ref: scrollRef, onScroll },
      import_react48.default.createElement(MessageProvider, { message: parentMessage, isByMe }, MemorizedParentMessageInfo),
      replyCount > 0 && import_react48.default.createElement(
        "div",
        { className: "sendbird-thread-ui__reply-counts" },
        import_react48.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_3 }, "".concat(replyCount, " ").concat(replyCount > 1 ? stringSet.THREAD__THREAD_REPLIES : stringSet.THREAD__THREAD_REPLY))
      ),
      MemorizedThreadList || import_react48.default.createElement(ThreadList, { className: "sendbird-thread-ui__thread-list", renderMessage, renderCustomSeparator, scrollRef, scrollBottom })
    ),
    (renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput()) || import_react48.default.createElement(ThreadMessageInput$1, { className: "sendbird-thread-ui__message-input", renderFileUploadIcon, renderVoiceMessageIcon, renderSendMessageIcon })
  );
};

// node_modules/@sendbird/uikit-react/Thread.js
var import_react_dom27 = __toESM(require_react_dom(), 1);
var Thread = function(props) {
  var _a;
  return import_react49.default.createElement(
    "div",
    { className: classnames("sendbird-thread", (_a = props === null || props === void 0 ? void 0 : props.className) !== null && _a !== void 0 ? _a : "") },
    import_react49.default.createElement(
      ThreadProvider,
      __assign({}, props),
      import_react49.default.createElement(ThreadUI, __assign({}, props))
    )
  );
};

// node_modules/@sendbird/uikit-react/App.js
var import_react_dom28 = __toESM(require_react_dom(), 1);
var DesktopLayout = function(props) {
  var isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, isMessageGroupingEnabled = props.isMessageGroupingEnabled, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, allowProfileEdit = props.allowProfileEdit, showSearchIcon = props.showSearchIcon, onProfileEditSuccess = props.onProfileEditSuccess, disableAutoSelect = props.disableAutoSelect, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, showSettings = props.showSettings, setShowSettings = props.setShowSettings, showSearch = props.showSearch, setShowSearch = props.setShowSearch, highlightedMessage = props.highlightedMessage, setHighlightedMessage = props.setHighlightedMessage, startingPoint = props.startingPoint, setStartingPoint = props.setStartingPoint, showThread = props.showThread, setShowThread = props.setShowThread, threadTargetMessage = props.threadTargetMessage, setThreadTargetMessage = props.setThreadTargetMessage, enableLegacyChannelModules = props.enableLegacyChannelModules;
  var updateFocusedChannel = function(channel) {
    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);
    setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
    if (channel) {
      setCurrentChannel(channel);
    } else {
      setCurrentChannel(void 0);
    }
  };
  var onClickThreadReply = function(_a) {
    var message = _a.message;
    setShowSettings(false);
    setShowSearch(false);
    if (replyType === "THREAD") {
      setThreadTargetMessage(message);
      setShowThread(true);
    }
  };
  var channelListProps = {
    allowProfileEdit,
    activeChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    onProfileEditSuccess,
    disableAutoSelect,
    onChannelSelect: updateFocusedChannel,
    // for GroupChannelList
    selectedChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    onChannelCreated: updateFocusedChannel,
    onUserProfileUpdated: onProfileEditSuccess
  };
  var channelProps = {
    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "",
    onChatHeaderActionClick: function() {
      setShowSearch(false);
      setShowThread(false);
      setShowSettings(!showSettings);
    },
    onSearchClick: function() {
      setShowSettings(false);
      setShowThread(false);
      setShowSearch(!showSearch);
    },
    onReplyInThread: onClickThreadReply,
    onQuoteMessageClick: function(_a) {
      var message = _a.message;
      setShowSettings(false);
      setShowSearch(false);
      if (replyType === "THREAD") {
        setThreadTargetMessage(message);
        setShowThread(true);
      }
    },
    animatedMessage: highlightedMessage,
    onMessageAnimated: function() {
      return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
    },
    showSearchIcon,
    startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : void 0,
    isReactionEnabled,
    replyType,
    isMessageGroupingEnabled,
    isMultipleFilesMessageEnabled,
    // for GroupChannel
    animatedMessageId: highlightedMessage,
    onReplyInThreadClick: onClickThreadReply
  };
  return import_react50.default.createElement(
    "div",
    { className: "sendbird-app__wrap", id: APP_LAYOUT_ROOT },
    import_react50.default.createElement("div", { className: "sendbird-app__channellist-wrap" }, enableLegacyChannelModules ? import_react50.default.createElement(ChannelList, __assign({}, channelListProps)) : import_react50.default.createElement(GroupChannelList, __assign({}, channelListProps))),
    import_react50.default.createElement("div", { className: classnames("sendbird-app__conversation-wrap", showSettings && "sendbird-app__conversation--settings-open", showSearch && "sendbird-app__conversation--search-open") }, enableLegacyChannelModules ? import_react50.default.createElement(Channel, __assign({}, channelProps)) : import_react50.default.createElement(GroupChannel, __assign({}, channelProps))),
    showSettings && import_react50.default.createElement(
      "div",
      { className: "sendbird-app__settingspanel-wrap" },
      import_react50.default.createElement(ChannelSettings, { className: "sendbird-channel-settings", channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", onCloseClick: function() {
        setShowSettings(false);
      } })
    ),
    showSearch && import_react50.default.createElement(
      "div",
      { className: "sendbird-app__searchpanel-wrap" },
      import_react50.default.createElement(MessageSearchPannel, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", onResultClick: function(message) {
        if (message.messageId === highlightedMessage) {
          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
          setTimeout(function() {
            setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);
          });
        } else {
          setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message.createdAt);
          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);
        }
      }, onCloseClick: function() {
        setShowSearch(false);
      } })
    ),
    showThread && import_react50.default.createElement(Thread, { className: "sendbird-app__thread", channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", message: threadTargetMessage, onHeaderActionClick: function() {
      setShowThread(false);
    }, onMoveToParentMessage: function(_a) {
      var message = _a.message, channel = _a.channel;
      if ((channel === null || channel === void 0 ? void 0 : channel.url) !== (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
        setCurrentChannel(channel);
      }
      if ((message === null || message === void 0 ? void 0 : message.messageId) !== highlightedMessage) {
        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message === null || message === void 0 ? void 0 : message.createdAt);
      }
      setTimeout(function() {
        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);
        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message === null || message === void 0 ? void 0 : message.messageId);
      }, 500);
    } })
  );
};
var PANELS;
(function(PANELS2) {
  PANELS2["CHANNEL_LIST"] = "CHANNEL_LIST";
  PANELS2["CHANNEL"] = "CHANNEL";
  PANELS2["CHANNEL_SETTINGS"] = "CHANNEL_SETTINGS";
  PANELS2["MESSAGE_SEARCH"] = "MESSAGE_SEARCH";
  PANELS2["THREAD"] = "THREAD";
})(PANELS || (PANELS = {}));
var MobileLayout = function(props) {
  var _a, _b, _c;
  var replyType = props.replyType, isMessageGroupingEnabled = props.isMessageGroupingEnabled, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, allowProfileEdit = props.allowProfileEdit, isReactionEnabled = props.isReactionEnabled, showSearchIcon = props.showSearchIcon, onProfileEditSuccess = props.onProfileEditSuccess, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, startingPoint = props.startingPoint, setStartingPoint = props.setStartingPoint, threadTargetMessage = props.threadTargetMessage, setThreadTargetMessage = props.setThreadTargetMessage, highlightedMessage = props.highlightedMessage, setHighlightedMessage = props.setHighlightedMessage, enableLegacyChannelModules = props.enableLegacyChannelModules;
  var _d = (0, import_react50.useState)(PANELS.CHANNEL_LIST), panel = _d[0], setPanel = _d[1];
  var store = useSendbirdStateContext();
  var sdk = (_b = (_a = store === null || store === void 0 ? void 0 : store.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;
  var userId = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.userId;
  var pause = useVoicePlayerContext().pause;
  var goToMessage = function(message, timeoutCb) {
    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint((message === null || message === void 0 ? void 0 : message.createdAt) || null);
    setTimeout(function() {
      timeoutCb === null || timeoutCb === void 0 ? void 0 : timeoutCb((message === null || message === void 0 ? void 0 : message.messageId) || null);
    }, 500);
  };
  (0, import_react50.useEffect)(function() {
    if (panel !== PANELS.CHANNEL) {
      goToMessage(null, function() {
        return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
      });
    }
  }, [panel]);
  (0, import_react50.useEffect)(function() {
    var _a2, _b2;
    var handlerId = uuidv4();
    if ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.addGroupChannelHandler) {
      var handler = new Ye({
        onUserBanned: function(groupChannel, user) {
          if (groupChannel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === userId) {
            setPanel(PANELS.CHANNEL_LIST);
          }
        },
        onChannelDeleted: function(channelUrl) {
          if (channelUrl === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
            setPanel(PANELS.CHANNEL_LIST);
          }
        },
        onUserLeft: function(groupChannel, user) {
          if (groupChannel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === userId) {
            setPanel(PANELS.CHANNEL_LIST);
          }
        }
      });
      (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.addGroupChannelHandler(handlerId, handler);
    }
    return function() {
      var _a3, _b3;
      (_b3 = (_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, handlerId);
    };
  }, [sdk, currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  (0, import_react50.useEffect)(function() {
    if (panel === PANELS.THREAD) {
      setPanel(PANELS.CHANNEL);
    }
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  var channelListProps = {
    allowProfileEdit,
    onProfileEditSuccess,
    disableAutoSelect: true,
    onChannelSelect: function(channel) {
      setCurrentChannel(channel !== null && channel !== void 0 ? channel : void 0);
      if (channel) {
        setPanel(PANELS.CHANNEL);
      } else {
        setPanel(PANELS.CHANNEL_LIST);
      }
    },
    // for GroupChannelList
    onChannelCreated: function(channel) {
      setCurrentChannel(channel);
      setPanel(PANELS.CHANNEL);
    },
    onUserProfileUpdated: onProfileEditSuccess
  };
  var channelProps = {
    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "",
    onChatHeaderActionClick: function() {
      setPanel(PANELS.CHANNEL_SETTINGS);
    },
    onBackClick: function() {
      setPanel(PANELS.CHANNEL_LIST);
      pause(ALL);
    },
    onSearchClick: function() {
      setPanel(PANELS.MESSAGE_SEARCH);
    },
    onReplyInThread: function(_a2) {
      var message = _a2.message;
      if (replyType === "THREAD") {
        setPanel(PANELS.THREAD);
        setThreadTargetMessage(message);
      }
    },
    onQuoteMessageClick: function(_a2) {
      var message = _a2.message;
      if (replyType === "THREAD") {
        setThreadTargetMessage(message);
        setPanel(PANELS.THREAD);
      }
    },
    animatedMessage: highlightedMessage,
    onMessageAnimated: function() {
      return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
    },
    showSearchIcon,
    startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : void 0,
    isReactionEnabled,
    replyType,
    isMessageGroupingEnabled,
    isMultipleFilesMessageEnabled,
    // for GroupChannel
    animatedMessageId: highlightedMessage,
    onReplyInThreadClick: function(_a2) {
      var message = _a2.message;
      if (replyType === "THREAD") {
        setPanel(PANELS.THREAD);
        setThreadTargetMessage(message);
      }
    }
  };
  return import_react50.default.createElement(
    "div",
    { className: "sb_mobile", id: APP_LAYOUT_ROOT },
    panel === PANELS.CHANNEL_LIST && import_react50.default.createElement("div", { className: "sb_mobile__panelwrap" }, enableLegacyChannelModules ? import_react50.default.createElement(ChannelList, __assign({}, channelListProps)) : import_react50.default.createElement(GroupChannelList, __assign({}, channelListProps))),
    panel === PANELS.CHANNEL && import_react50.default.createElement("div", { className: "sb_mobile__panelwrap" }, enableLegacyChannelModules ? import_react50.default.createElement(Channel, __assign({}, channelProps)) : import_react50.default.createElement(GroupChannel, __assign({}, channelProps))),
    panel === PANELS.CHANNEL_SETTINGS && import_react50.default.createElement(
      "div",
      { className: "sb_mobile__panelwrap" },
      import_react50.default.createElement(ChannelSettings, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", onCloseClick: function() {
        setPanel(PANELS.CHANNEL);
      }, onLeaveChannel: function() {
        setPanel(PANELS.CHANNEL_LIST);
      } })
    ),
    panel === PANELS.MESSAGE_SEARCH && import_react50.default.createElement(
      "div",
      { className: "sb_mobile__panelwrap" },
      import_react50.default.createElement(MessageSearchPannel, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", onCloseClick: function() {
        setPanel(PANELS.CHANNEL);
      }, onResultClick: function(message) {
        setPanel(PANELS.CHANNEL);
        goToMessage(message, function(messageId) {
          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(messageId);
        });
      } })
    ),
    panel === PANELS.THREAD && import_react50.default.createElement(
      "div",
      { className: "sb_mobile__panelwrap" },
      import_react50.default.createElement(Thread, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", message: threadTargetMessage, onHeaderActionClick: function() {
        setPanel(PANELS.CHANNEL);
        pause(ALL);
      }, onMoveToParentMessage: function(_a2) {
        var message = _a2.message, channel = _a2.channel;
        setCurrentChannel(channel);
        goToMessage(message, function(messageId) {
          setPanel(PANELS.CHANNEL);
          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(messageId);
        });
      } })
    )
  );
};
var AppLayout = function(props) {
  var _a, _b, _c;
  var isMessageGroupingEnabled = props.isMessageGroupingEnabled, allowProfileEdit = props.allowProfileEdit, onProfileEditSuccess = props.onProfileEditSuccess, disableAutoSelect = props.disableAutoSelect, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, enableLegacyChannelModules = props.enableLegacyChannelModules;
  var globalStore = useSendbirdStateContext();
  var globalConfigs = globalStore.config;
  var _d = (0, import_react50.useState)(false), showThread = _d[0], setShowThread = _d[1];
  var _e = (0, import_react50.useState)(null), threadTargetMessage = _e[0], setThreadTargetMessage = _e[1];
  var _f = (0, import_react50.useState)(false), showSettings = _f[0], setShowSettings = _f[1];
  var _g = (0, import_react50.useState)(false), showSearch = _g[0], setShowSearch = _g[1];
  var _h = (0, import_react50.useState)(null), highlightedMessage = _h[0], setHighlightedMessage = _h[1];
  var _j = (0, import_react50.useState)(null), startingPoint = _j[0], setStartingPoint = _j[1];
  var isMobile = useMediaQueryContext().isMobile;
  var replyType = (_a = props.replyType) !== null && _a !== void 0 ? _a : getCaseResolvedReplyType(globalConfigs.groupChannel.replyType).upperCase;
  var isReactionEnabled = (_b = props.isReactionEnabled) !== null && _b !== void 0 ? _b : globalConfigs.groupChannel.enableReactions;
  var showSearchIcon = (_c = props.showSearchIcon) !== null && _c !== void 0 ? _c : globalConfigs.groupChannelSettings.enableMessageSearch;
  return import_react50.default.createElement(import_react50.default.Fragment, null, isMobile ? import_react50.default.createElement(MobileLayout, { replyType, showSearchIcon, isReactionEnabled, isMessageGroupingEnabled, allowProfileEdit, onProfileEditSuccess, currentChannel, setCurrentChannel, highlightedMessage, setHighlightedMessage, startingPoint, setStartingPoint, threadTargetMessage, setThreadTargetMessage, enableLegacyChannelModules }) : import_react50.default.createElement(DesktopLayout, { replyType, isReactionEnabled, showSearchIcon, isMessageGroupingEnabled, allowProfileEdit, onProfileEditSuccess, disableAutoSelect, currentChannel, setCurrentChannel, showThread, setShowThread, threadTargetMessage, setThreadTargetMessage, showSettings, setShowSettings, showSearch, setShowSearch, highlightedMessage, setHighlightedMessage, startingPoint, setStartingPoint, enableLegacyChannelModules }));
};
function App(props) {
  var appId = props.appId, userId = props.userId, _a = props.accessToken, accessToken = _a === void 0 ? "" : _a, _b = props.customApiHost, customApiHost = _b === void 0 ? "" : _b, _c = props.customWebSocketHost, customWebSocketHost = _c === void 0 ? "" : _c, breakpoint = props.breakpoint, _d = props.theme, theme = _d === void 0 ? "light" : _d, userListQuery = props.userListQuery, _e = props.nickname, nickname = _e === void 0 ? "" : _e, _f = props.profileUrl, profileUrl = _f === void 0 ? "" : _f, dateLocale = props.dateLocale, _g = props.config, config = _g === void 0 ? {} : _g, voiceRecord = props.voiceRecord, _h = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _h === void 0 ? true : _h, colorSet = props.colorSet, stringSet = props.stringSet, _j = props.allowProfileEdit, allowProfileEdit = _j === void 0 ? false : _j, _k = props.disableMarkAsDelivered, disableMarkAsDelivered = _k === void 0 ? false : _k, renderUserProfile = props.renderUserProfile, onProfileEditSuccess = props.onProfileEditSuccess, _l = props.imageCompression, imageCompression = _l === void 0 ? {} : _l, _m = props.disableAutoSelect, disableAutoSelect = _m === void 0 ? false : _m, sdkInitParams = props.sdkInitParams, customExtensionParams = props.customExtensionParams, eventHandlers = props.eventHandlers, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, _o = props.isUserIdUsedForNickname, isUserIdUsedForNickname = _o === void 0 ? true : _o, _p = props.enableLegacyChannelModules, enableLegacyChannelModules = _p === void 0 ? false : _p, uikitOptions = props.uikitOptions, _q = props.htmlTextDirection, htmlTextDirection = _q === void 0 ? "ltr" : _q, _r = props.forceLeftToRightMessageLayout, forceLeftToRightMessageLayout = _r === void 0 ? false : _r, showSearchIcon = props.showSearchIcon, isMentionEnabled = props.isMentionEnabled, isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, disableUserProfile = props.disableUserProfile, isVoiceMessageEnabled = props.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = props.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = props.isMessageReceiptStatusEnabledOnChannelList;
  var _s = (0, import_react50.useState)(), currentChannel = _s[0], setCurrentChannel = _s[1];
  return import_react50.default.createElement(
    SendbirdProvider,
    { stringSet, appId, userId, accessToken, customApiHost, customWebSocketHost, breakpoint, theme, nickname, profileUrl, dateLocale, userListQuery, config, colorSet, disableMarkAsDelivered, renderUserProfile, imageCompression, isMultipleFilesMessageEnabled, voiceRecord, onUserProfileMessage: function(channel) {
      setCurrentChannel(channel);
    }, uikitOptions, isUserIdUsedForNickname, sdkInitParams, customExtensionParams, eventHandlers, isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList, replyType, showSearchIcon, disableUserProfile, isReactionEnabled, isMentionEnabled, isVoiceMessageEnabled, htmlTextDirection, forceLeftToRightMessageLayout },
    import_react50.default.createElement(AppLayout, { isMessageGroupingEnabled, allowProfileEdit, onProfileEditSuccess, disableAutoSelect, currentChannel, setCurrentChannel, enableLegacyChannelModules, isReactionEnabled, replyType, showSearchIcon })
  );
}

// node_modules/@sendbird/uikit-react/OpenChannel.js
var import_react64 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelUI.js
var import_react63 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-v7PcSk1i.js
var import_react51 = __toESM(require_react(), 1);
var shouldFetchMore = function(messageLength, maxMessages) {
  if (typeof maxMessages !== "number") {
    return true;
  }
  return maxMessages > messageLength;
};
var scrollIntoLast3 = function(initialTry, scrollRef) {
  if (initialTry === void 0) {
    initialTry = 0;
  }
  var MAX_TRIES = 10;
  var currentTry = initialTry;
  if (currentTry > MAX_TRIES) {
    return;
  }
  try {
    var scrollDOM = (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) || document.querySelector(".sendbird-openchannel-conversation-scroll__container__item-container");
    if (scrollDOM) {
      scrollDOM.scrollTop = scrollDOM.scrollHeight;
    }
  } catch (error) {
    setTimeout(function() {
      scrollIntoLast3(currentTry + 1, scrollRef);
    }, 500 * currentTry);
  }
};
var kFormatter2 = function(num) {
  if (Math.abs(num) > 999999) {
    return "".concat((Math.abs(num) / 1e6).toFixed(1), "M");
  }
  if (Math.abs(num) > 999) {
    return "".concat((Math.abs(num) / 1e3).toFixed(1), "K");
  }
  return "".concat(num);
};
var isOperator2 = function(openChannel, userId) {
  var operators = openChannel === null || openChannel === void 0 ? void 0 : openChannel.operators;
  if (operators.map(function(operator) {
    return operator.userId;
  }).indexOf(userId) < 0) {
    return false;
  }
  return true;
};
var isDisabledBecauseFrozen2 = function(openChannel, userId) {
  if (!openChannel)
    return false;
  var isFrozen = openChannel.isFrozen;
  return isFrozen && !isOperator2(openChannel, userId);
};
var isDisabledBecauseMuted2 = function(mutedParticipantIds, userId) {
  return mutedParticipantIds.indexOf(userId) > -1;
};
var fetchWithListQuery = function(listQuery, logger, eachQueryNextCallback) {
  var fetchList = function(query) {
    var hasNext = query.hasNext;
    if (hasNext) {
      query.next().then(function(users) {
        eachQueryNextCallback(users);
        fetchList(query);
      }).catch(function(error) {
        logger.warning("OpenChannel | FetchUserList failed", error);
      });
    } else {
      logger.info("OpenChannel | FetchUserList finished");
    }
  };
  logger.info("OpenChannel | FetchUserList start", listQuery);
  fetchList(listQuery);
};
var SET_CURRENT_CHANNEL4 = "SET_CURRENT_CHANNEL";
var SET_CHANNEL_INVALID2 = "SET_CHANNEL_INVALID";
var RESET_MESSAGES2 = "RESET_MESSAGES";
var EXIT_CURRENT_CHANNEL = "EXIT_CURRENT_CHANNEL";
var GET_PREV_MESSAGES_START = "GET_PREV_MESSAGES_START";
var GET_PREV_MESSAGES_SUCESS = "GET_PREV_MESSAGES_SUCESS";
var GET_PREV_MESSAGES_FAIL = "GET_PREV_MESSAGES_FAIL";
var SENDING_MESSAGE_FAILED = "SENDING_MESSAGE_FAILED";
var SENDING_MESSAGE_SUCCEEDED = "SENDING_MESSAGE_SUCCEEDED";
var SENDING_MESSAGE_START = "SENDING_MESSAGE_START";
var RESENDING_MESSAGE_START = "RESENDING_MESSAGE_START";
var FETCH_PARTICIPANT_LIST = "FETCH_PARTICIPANT_LIST";
var FETCH_BANNED_USER_LIST = "FETCH_BANNED_USER_LIST";
var FETCH_MUTED_USER_LIST = "FETCH_MUTED_USER_LIST";
var TRIM_MESSAGE_LIST = "TRIM_MESSAGE_LIST";
var ON_MESSAGE_RECEIVED2 = "ON_MESSAGE_RECEIVED";
var ON_MESSAGE_UPDATED2 = "ON_MESSAGE_UPDATED";
var ON_MESSAGE_DELETED2 = "ON_MESSAGE_DELETED";
var ON_MESSAGE_DELETED_BY_REQ_ID2 = "ON_MESSAGE_DELETED_BY_REQ_ID";
var ON_OPERATOR_UPDATED = "ON_OPERATOR_UPDATED";
var ON_USER_ENTERED = "ON_USER_ENTERED";
var ON_USER_EXITED = "ON_USER_EXITED";
var ON_USER_MUTED = "ON_USER_MUTED";
var ON_USER_UNMUTED = "ON_USER_UNMUTED";
var ON_USER_BANNED = "ON_USER_BANNED";
var ON_USER_UNBANNED = "ON_USER_UNBANNED";
var ON_CHANNEL_FROZEN2 = "ON_CHANNEL_FROZEN";
var ON_CHANNEL_UNFROZEN2 = "ON_CHANNEL_UNFROZEN";
var ON_CHANNEL_CHANGED2 = "ON_CHANNEL_CHANGED";
var ON_CHANNEL_DELETED2 = "ON_CHANNEL_DELETED";
var ON_META_DATA_CREATED = "ON_META_DATA_CREATED";
var ON_META_DATA_UPDATED = "ON_META_DATA_UPDATED";
var ON_META_DATA_DELETED = "ON_META_DATA_DELETED";
var ON_META_COUNTERS_CREATED = "ON_META_COUNTERS_CREATED";
var ON_META_COUNTERS_UPDATED = "ON_META_COUNTERS_UPDATED";
var ON_META_COUNTERS_DELETED = "ON_META_COUNTERS_DELETED";
var ON_MENTION_RECEIVED = "ON_MENTION_RECEIVED";
function reducer4(state, action) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  switch (action.type) {
    case RESET_MESSAGES2: {
      return __assign(__assign({}, state), { allMessages: [] });
    }
    case EXIT_CURRENT_CHANNEL: {
      if (((_a = action.payload) === null || _a === void 0 ? void 0 : _a.url) === ((_b = state.currentOpenChannel) === null || _b === void 0 ? void 0 : _b.url)) {
        return __assign(__assign({}, state), { currentOpenChannel: null });
      }
      return state;
    }
    case SET_CURRENT_CHANNEL4: {
      var gottenChannel = action.payload;
      var operators = gottenChannel.operators;
      if (!state.isInvalid && state.currentOpenChannel && state.currentOpenChannel.url && state.currentOpenChannel.url === gottenChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { currentOpenChannel: gottenChannel, isInvalid: false, operators, participants: operators, bannedParticipantIds: [], mutedParticipantIds: [] });
    }
    case SET_CHANNEL_INVALID2: {
      return __assign(__assign({}, state), { isInvalid: true });
    }
    case GET_PREV_MESSAGES_START: {
      return __assign(__assign({}, state), { loading: true });
    }
    case GET_PREV_MESSAGES_SUCESS:
    case GET_PREV_MESSAGES_FAIL: {
      var isFailed = action.type === GET_PREV_MESSAGES_FAIL;
      var _j = action.payload, _k = _j.currentOpenChannel, currentOpenChannel = _k === void 0 ? {} : _k, _l = _j.messages, messages = _l === void 0 ? [] : _l, hasMore = _j.hasMore, lastMessageTimestamp = _j.lastMessageTimestamp;
      var actionChannelUrl = currentOpenChannel.url;
      var receivedMessages_1 = isFailed ? [] : messages;
      var _hasMore = isFailed ? false : hasMore;
      var _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;
      var stateChannel = state.currentOpenChannel;
      var stateChannelUrl = stateChannel === null || stateChannel === void 0 ? void 0 : stateChannel.url;
      if (actionChannelUrl !== stateChannelUrl) {
        return state;
      }
      var filteredAllMessages = state.allMessages.filter(function(message) {
        return !receivedMessages_1.find(function(_a2) {
          var messageId = _a2.messageId;
          return compareIds(messageId, message.messageId);
        });
      });
      return __assign(__assign({}, state), { loading: false, initialized: true, hasMore: _hasMore, lastMessageTimestamp: _lastMessageTimestamp, allMessages: __spreadArray(__spreadArray([], receivedMessages_1, true), filteredAllMessages, true) });
    }
    case SENDING_MESSAGE_START: {
      var _m = action.payload, message_1 = _m.message, channel = _m.channel;
      if ((channel === null || channel === void 0 ? void 0 : channel.url) !== ((_c = state.currentOpenChannel) === null || _c === void 0 ? void 0 : _c.url) || state.allMessages.some(function(m) {
        return m.reqId === message_1.reqId;
      })) {
        return state;
      }
      return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [
        message_1
      ], false) });
    }
    case SENDING_MESSAGE_SUCCEEDED: {
      var sentMessage_1 = action.payload;
      var newMessages = state.allMessages.map(function(m) {
        return compareIds(m.reqId, sentMessage_1.reqId) ? sentMessage_1 : m;
      });
      return __assign(__assign({}, state), { allMessages: newMessages });
    }
    case SENDING_MESSAGE_FAILED: {
      var sentMessage_2 = action.payload;
      sentMessage_2.sendingStatus = "failed";
      if (!state.allMessages.some(function(m) {
        return (m === null || m === void 0 ? void 0 : m.reqId) === (sentMessage_2 === null || sentMessage_2 === void 0 ? void 0 : sentMessage_2.reqId);
      })) {
        return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], state.allMessages.filter(function(m) {
          return !compareIds(m.reqId, sentMessage_2);
        }), true), [
          sentMessage_2
        ], false) });
      } else {
        return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m) {
          return compareIds(m.reqId, sentMessage_2.reqId) ? sentMessage_2 : m;
        }) });
      }
    }
    case TRIM_MESSAGE_LIST: {
      var allMessages = state.allMessages;
      var messageLimit = (_d = action.payload) === null || _d === void 0 ? void 0 : _d.messageLimit;
      if (messageLimit && messageLimit > 0 && (allMessages === null || allMessages === void 0 ? void 0 : allMessages.length) > messageLimit) {
        var sliceAt = allMessages.length - messageLimit;
        return __assign(__assign({}, state), { allMessages: allMessages.slice(sliceAt) });
      }
      return state;
    }
    case RESENDING_MESSAGE_START: {
      var eventedChannel = action.payload.channel;
      var resentMessage_1 = action.payload.message;
      if (eventedChannel.url !== ((_e = state.currentOpenChannel) === null || _e === void 0 ? void 0 : _e.url)) {
        return state;
      }
      return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m) {
        return compareIds(m.reqId, resentMessage_1.reqId) ? resentMessage_1 : m;
      }) });
    }
    case FETCH_PARTICIPANT_LIST: {
      var eventedChannel = action.payload.channel;
      var fetchedParticipantList = action.payload.users;
      if (eventedChannel.url !== ((_f = state.currentOpenChannel) === null || _f === void 0 ? void 0 : _f.url)) {
        return state;
      }
      return __assign(__assign({}, state), { participants: __spreadArray(__spreadArray([], state.participants, true), fetchedParticipantList, true) });
    }
    case FETCH_BANNED_USER_LIST: {
      var eventedChannel = action.payload.channel;
      var fetchedBannedUserList = action.payload.users;
      if (eventedChannel.url !== ((_g = state.currentOpenChannel) === null || _g === void 0 ? void 0 : _g.url) || !fetchedBannedUserList.every(function(user) {
        return typeof user.userId === "string";
      })) {
        return state;
      }
      return __assign(__assign({}, state), { bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedBannedUserList.map(function(user) {
        return user.userId;
      }), true) });
    }
    case FETCH_MUTED_USER_LIST: {
      var eventedChannel = action.payload.channel;
      var fetchedMutedUserList = action.payload.users;
      if (eventedChannel.url !== ((_h = state.currentOpenChannel) === null || _h === void 0 ? void 0 : _h.url) || !fetchedMutedUserList.every(function(user) {
        return typeof user.userId === "string";
      })) {
        return state;
      }
      return __assign(__assign({}, state), { mutedParticipantIds: __spreadArray(__spreadArray([], state.mutedParticipantIds, true), fetchedMutedUserList.map(function(user) {
        return user.userId;
      }), true) });
    }
    case ON_MESSAGE_RECEIVED2: {
      var eventedChannel = action.payload.channel;
      var receivedMessage = action.payload.message;
      var currentOpenChannel = state.currentOpenChannel;
      if (!compareIds(eventedChannel.url, currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.url) || !(state.allMessages.map(function(message) {
        return message.messageId;
      }).indexOf(receivedMessage.messageId) < 0)) {
        return state;
      }
      return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [receivedMessage], false) });
    }
    case ON_MESSAGE_UPDATED2: {
      var eventedChannel = action.payload.channel;
      var updatedMessage_1 = action.payload.message;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(message) {
        return message.isIdentical(updatedMessage_1) ? updatedMessage_1 : message;
      }) });
    }
    case ON_MESSAGE_DELETED2: {
      var eventedChannel = action.payload.channel;
      var deletedMessageId_1 = action.payload.messageId;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { allMessages: state.allMessages.filter(function(message) {
        return !compareIds(message.messageId, deletedMessageId_1);
      }) });
    }
    case ON_MESSAGE_DELETED_BY_REQ_ID2: {
      return __assign(__assign({}, state), { allMessages: state.allMessages.filter(function(m) {
        return !compareIds(m.reqId, action.payload);
      }) });
    }
    case ON_OPERATOR_UPDATED: {
      var eventedChannel = action.payload.channel;
      var updatedOperators = action.payload.operators;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { currentOpenChannel: eventedChannel, operators: updatedOperators });
    }
    case ON_USER_ENTERED: {
      var eventedChannel = action.payload.channel;
      var enteredUser = action.payload.user;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { participants: __spreadArray(__spreadArray([], state.participants, true), [enteredUser], false) });
    }
    case ON_USER_EXITED: {
      var eventedChannel = action.payload.channel;
      var exitedUser_1 = action.payload.user;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { participants: state.participants.filter(function(participant) {
        return !compareIds(participant.userId, exitedUser_1.userId);
      }) });
    }
    case ON_USER_MUTED: {
      var eventedChannel = action.payload.channel;
      var mutedUser = action.payload.user;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0) {
        return state;
      }
      return __assign(__assign({}, state), { mutedParticipantIds: __spreadArray(__spreadArray([], state.mutedParticipantIds, true), [mutedUser.userId], false) });
    }
    case ON_USER_UNMUTED: {
      var eventedChannel = action.payload.channel;
      var unmutedUser_1 = action.payload.user;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(unmutedUser_1.userId) < 0) {
        return state;
      }
      return __assign(__assign({}, state), { mutedParticipantIds: state.mutedParticipantIds.filter(function(userId) {
        return userId !== unmutedUser_1.userId;
      }) });
    }
    case ON_USER_BANNED: {
      var eventedChannel = action.payload.channel;
      var bannedUser = action.payload.user;
      var currentUser = action.payload.currentUser;
      var currentChannel = state.currentOpenChannel;
      if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (eventedChannel === null || eventedChannel === void 0 ? void 0 : eventedChannel.url) && (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId)) {
        return __assign(__assign({}, state), { currentOpenChannel: null });
      } else if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (eventedChannel === null || eventedChannel === void 0 ? void 0 : eventedChannel.url)) {
        return __assign(__assign({}, state), { bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), [bannedUser.userId], false) });
      }
      return state;
    }
    case ON_USER_UNBANNED: {
      var eventedChannel = action.payload.channel;
      var unbannedUser_1 = action.payload.user;
      var currentChannel = state.currentOpenChannel;
      if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (eventedChannel === null || eventedChannel === void 0 ? void 0 : eventedChannel.url)) {
        return __assign(__assign({}, state), { bannedParticipantIds: state.bannedParticipantIds.filter(function(userId) {
          return userId !== unbannedUser_1.userId;
        }) });
      }
      return state;
    }
    case ON_CHANNEL_FROZEN2: {
      var frozenChannel = action.payload;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== frozenChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { frozen: true });
    }
    case ON_CHANNEL_UNFROZEN2: {
      var unfrozenChannel = action.payload;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== unfrozenChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { frozen: false });
    }
    case ON_CHANNEL_CHANGED2: {
      var changedChannel = action.payload;
      var currentChannel = state.currentOpenChannel;
      if (!currentChannel || currentChannel.url && currentChannel.url !== changedChannel.url) {
        return state;
      }
      return __assign(__assign({}, state), { currentOpenChannel: changedChannel });
    }
    case ON_CHANNEL_DELETED2: {
      var deletedChannelUrl = action.payload;
      var currentChannel = state === null || state === void 0 ? void 0 : state.currentOpenChannel;
      if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === deletedChannelUrl) {
        return __assign(__assign({}, state), { currentOpenChannel: null });
      }
      return state;
    }
    case ON_META_DATA_CREATED: {
      return state;
    }
    case ON_META_DATA_UPDATED: {
      return state;
    }
    case ON_META_DATA_DELETED: {
      return state;
    }
    case ON_META_COUNTERS_CREATED: {
      return state;
    }
    case ON_META_COUNTERS_UPDATED: {
      return state;
    }
    case ON_META_COUNTERS_DELETED: {
      return state;
    }
    case ON_MENTION_RECEIVED: {
      return state;
    }
    default:
      return state;
  }
}
var initialState6 = {
  allMessages: [],
  loading: false,
  initialized: false,
  currentOpenChannel: null,
  isInvalid: false,
  hasMore: false,
  lastMessageTimestamp: 0,
  frozen: false,
  operators: [],
  participants: [],
  bannedParticipantIds: [],
  mutedParticipantIds: []
};
function useSetChannel2(_a, _b) {
  var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit, fetchingParticipants = _a.fetchingParticipants, userId = _a.userId, currentOpenChannel = _a.currentOpenChannel;
  var sdk = _b.sdk, logger = _b.logger, messagesDispatcher = _b.messagesDispatcher;
  (0, import_react51.useEffect)(function() {
    var _a2;
    if (channelUrl && sdkInit && (sdk === null || sdk === void 0 ? void 0 : sdk.openChannel)) {
      if (currentOpenChannel && (currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.exit)) {
        (_a2 = currentOpenChannel.exit) === null || _a2 === void 0 ? void 0 : _a2.call(currentOpenChannel).then(function() {
          logger.info("OpenChannel | useSetChannel: Exit from the previous open channel", currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.url);
          messagesDispatcher({
            type: EXIT_CURRENT_CHANNEL,
            payload: currentOpenChannel
          });
        });
      }
      logger.info("OpenChannel | useSetChannel: Fetching channel", channelUrl);
      sdk.openChannel.getChannel(channelUrl).then(function(openChannel) {
        logger.info("OpenChannel | useSetChannel: Succeeded to fetch channel", openChannel);
        messagesDispatcher({
          type: SET_CURRENT_CHANNEL4,
          payload: openChannel
        });
        openChannel.enter().then(function() {
          if (openChannel.isOperator(userId)) {
            var bannedParticipantListQuery = openChannel.createBannedUserListQuery();
            var mutedParticipantListQuery = openChannel.createMutedUserListQuery();
            fetchWithListQuery(bannedParticipantListQuery, logger, function(users) {
              messagesDispatcher({
                type: FETCH_BANNED_USER_LIST,
                payload: {
                  channel: openChannel,
                  users
                }
              });
            });
            fetchWithListQuery(mutedParticipantListQuery, logger, function(users) {
              messagesDispatcher({
                type: FETCH_MUTED_USER_LIST,
                payload: {
                  channel: openChannel,
                  users
                }
              });
            });
          } else {
            openChannel.getMyMutedInfo().then(function(mutedInfo) {
              if (mutedInfo === null || mutedInfo === void 0 ? void 0 : mutedInfo.isMuted) {
                messagesDispatcher({
                  type: FETCH_MUTED_USER_LIST,
                  payload: {
                    channel: openChannel,
                    users: [sdk === null || sdk === void 0 ? void 0 : sdk.currentUser]
                  }
                });
              }
            });
          }
          if (fetchingParticipants) {
            var participantListQuery = openChannel.createParticipantListQuery({
              limit: openChannel.participantCount
            });
            fetchWithListQuery(participantListQuery, logger, function(users) {
              messagesDispatcher({
                type: FETCH_PARTICIPANT_LIST,
                payload: {
                  channel: openChannel,
                  users
                }
              });
            });
          }
        }).catch(function(error) {
          logger.warning("OpenChannel | useSetChannel: Failed to enter channel", { channelUrl, error });
          messagesDispatcher({
            type: SET_CHANNEL_INVALID2,
            payload: null
          });
        });
      }).catch(function(error) {
        logger.warning("OpenChannel | useSetChannel: Failed to fetch channel", { channelUrl, error });
        messagesDispatcher({
          type: SET_CHANNEL_INVALID2,
          payload: null
        });
      });
    }
  }, [channelUrl, sdkInit, fetchingParticipants]);
}
function useHandleChannelEvents3(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel, checkScrollBottom = _a.checkScrollBottom;
  var sdk = _b.sdk, logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, scrollRef = _b.scrollRef;
  (0, import_react51.useEffect)(function() {
    var _a2, _b2;
    var messageReceiverId = uuidv4();
    if (currentOpenChannel && currentOpenChannel.url && ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a2 === void 0 ? void 0 : _a2.addOpenChannelHandler)) {
      logger.info("OpenChannel | useHandleChannelEvents: Setup evnet handler", messageReceiverId);
      var channelHandlerParams = {
        onMessageReceived: function(channel, message) {
          var scrollToEnd = checkScrollBottom();
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMessageReceived", { channelUrl, message });
          messagesDispatcher({
            type: ON_MESSAGE_RECEIVED2,
            payload: { channel, message }
          });
          if (scrollToEnd) {
            try {
              setTimeout(function() {
                scrollIntoLast3(0, scrollRef);
              });
            } catch (error) {
              logger.warning("OpenChannel | onMessageReceived | scroll to end failed");
            }
          }
        },
        onMessageUpdated: function(channel, message) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMessageUpdated", { channelUrl, message });
          messagesDispatcher({
            type: ON_MESSAGE_UPDATED2,
            payload: { channel, message }
          });
        },
        onMessageDeleted: function(channel, messageId) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMessageDeleted", { channelUrl, messageId });
          messagesDispatcher({
            type: ON_MESSAGE_DELETED2,
            payload: { channel, messageId }
          });
        },
        onOperatorUpdated: function(channel, operators) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onOperatorUpdated", { channelUrl, operators });
          messagesDispatcher({
            type: ON_OPERATOR_UPDATED,
            payload: { channel, operators }
          });
        },
        onUserEntered: function(channel, user) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onUserEntered", { channelUrl, user });
          messagesDispatcher({
            type: ON_USER_ENTERED,
            payload: { channel, user }
          });
        },
        onUserExited: function(channel, user) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onUserExited", { channelUrl, user });
          messagesDispatcher({
            type: ON_USER_EXITED,
            payload: { channel, user }
          });
        },
        onUserMuted: function(channel, user) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onUserMuted", { channelUrl, user });
          messagesDispatcher({
            type: ON_USER_MUTED,
            payload: { channel, user }
          });
        },
        onUserUnmuted: function(channel, user) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onUserUnmuted", { channelUrl, user });
          messagesDispatcher({
            type: ON_USER_UNMUTED,
            payload: { channel, user }
          });
        },
        onUserBanned: function(channel, user) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onUserBanned", { channelUrl, user });
          messagesDispatcher({
            type: ON_USER_BANNED,
            payload: { channel, user, currentUser: sdk === null || sdk === void 0 ? void 0 : sdk.currentUser }
          });
        },
        onUserUnbanned: function(channel, user) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onUserUnbanned", { channelUrl, user });
          messagesDispatcher({
            type: ON_USER_UNBANNED,
            payload: { channel, user }
          });
        },
        onChannelFrozen: function(channel) {
          logger.info("OpenChannel | useHandleChannelEvents: onChannelFrozen", channel);
          messagesDispatcher({
            type: ON_CHANNEL_FROZEN2,
            payload: channel
          });
        },
        onChannelUnfrozen: function(channel) {
          logger.info("OpenChannel | useHandleChannelEvents: onChannelUnfrozen", channel);
          messagesDispatcher({
            type: ON_CHANNEL_UNFROZEN2,
            payload: channel
          });
        },
        onChannelChanged: function(channel) {
          logger.info("OpenChannel | useHandleChannelEvents: onChannelChanged", channel);
          messagesDispatcher({
            type: ON_CHANNEL_CHANGED2,
            payload: channel
          });
        },
        onMetaDataCreated: function(channel, metaData) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMetaDataCreated", { channelUrl, metaData });
          messagesDispatcher({
            type: ON_META_DATA_CREATED,
            payload: { channel, metaData }
          });
        },
        onMetaDataUpdated: function(channel, metaData) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMetaDataUpdated", { channelUrl, metaData });
          messagesDispatcher({
            type: ON_META_DATA_UPDATED,
            payload: { channel, metaData }
          });
        },
        onMetaDataDeleted: function(channel, metaDataKeys) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMetaDataDeleted", { channelUrl, metaDataKeys });
          messagesDispatcher({
            type: ON_META_DATA_DELETED,
            payload: { channel, metaDataKeys }
          });
        },
        onMetaCounterCreated: function(channel, metaCounter) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMetaCountersCreated", { channelUrl, metaCounter });
          messagesDispatcher({
            type: ON_META_COUNTERS_CREATED,
            payload: { channel, metaCounter }
          });
        },
        onMetaCounterUpdated: function(channel, metaCounter) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMetaCountersUpdated", { channelUrl, metaCounter });
          messagesDispatcher({
            type: ON_META_COUNTERS_UPDATED,
            payload: { channel, metaCounter }
          });
        },
        onMetaCounterDeleted: function(channel, metaCounterKeys) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMetaCountersDeleted", { channelUrl, metaCounterKeys });
          messagesDispatcher({
            type: ON_META_COUNTERS_DELETED,
            payload: { channel, metaCounterKeys }
          });
        },
        onMentionReceived: function(channel, message) {
          var channelUrl = channel === null || channel === void 0 ? void 0 : channel.url;
          logger.info("OpenChannel | useHandleChannelEvents: onMentionReceived", { channelUrl, message });
          messagesDispatcher({
            type: ON_MENTION_RECEIVED,
            payload: { channel, message }
          });
        },
        onChannelDeleted: function(channelUrl, channelType) {
          if (channelType === q.OPEN && (currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.url) === channelUrl) {
            messagesDispatcher({
              type: ON_CHANNEL_DELETED2,
              payload: channelUrl
            });
          }
        }
      };
      var ChannelHandler = new Ae(channelHandlerParams);
      (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _b2 === void 0 ? void 0 : _b2.addOpenChannelHandler(messageReceiverId, ChannelHandler);
    }
    return function() {
      var _a3;
      if ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a3 === void 0 ? void 0 : _a3.removeOpenChannelHandler) {
        logger.info("OpenChannel | useHandleChannelEvents: Removing message receiver handler", messageReceiverId);
        sdk.openChannel.removeOpenChannelHandler(messageReceiverId);
      }
    };
  }, [currentOpenChannel]);
}
function useInitialMessagesFetch2(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel, userFilledMessageListParams = _a.userFilledMessageListParams;
  var logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, scrollRef = _b.scrollRef;
  (0, import_react51.useEffect)(function() {
    logger.info("OpenChannel | useInitialMessagesFetch: Setup started", currentOpenChannel);
    messagesDispatcher({
      type: RESET_MESSAGES2,
      payload: null
    });
    if (currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {
      var messageListParams_1 = {
        nextResultSize: 0,
        prevResultSize: 30,
        isInclusive: true,
        includeReactions: false
      };
      if (userFilledMessageListParams) {
        Object.keys(userFilledMessageListParams).forEach(function(key) {
          messageListParams_1[key] = userFilledMessageListParams[key];
        });
        logger.info("OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams");
      }
      logger.info("OpenChannel | useInitialMessagesFetch: Fetching messages", { currentOpenChannel, messageListParams: messageListParams_1 });
      messagesDispatcher({
        type: GET_PREV_MESSAGES_START,
        payload: null
      });
      currentOpenChannel.getMessagesByTimestamp((/* @__PURE__ */ new Date()).getTime(), messageListParams_1).then(function(messages) {
        logger.info("OpenChannel | useInitialMessagesFetch: Fetching messages succeeded", messages);
        var hasMore = messages && messages.length > 0;
        var lastMessageTimestamp = hasMore ? messages[0].createdAt : null;
        messagesDispatcher({
          type: GET_PREV_MESSAGES_SUCESS,
          payload: {
            currentOpenChannel,
            messages,
            hasMore,
            lastMessageTimestamp
          }
        });
        setTimeout(function() {
          scrollIntoLast3(0, scrollRef);
        });
      }).catch(function(error) {
        logger.error("OpenChannel | useInitialMessagesFetch: Fetching messages failed", error);
        messagesDispatcher({
          type: GET_PREV_MESSAGES_FAIL,
          payload: {
            currentOpenChannel,
            messages: [],
            hasMore: false,
            lastMessageTimestamp: 0
          }
        });
      });
    }
  }, [currentOpenChannel, userFilledMessageListParams]);
}
function useScrollCallback3(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel, lastMessageTimestamp = _a.lastMessageTimestamp, fetchMore = _a.fetchMore;
  var sdk = _b.sdk, logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, hasMore = _b.hasMore, userFilledMessageListParams = _b.userFilledMessageListParams;
  return (0, import_react51.useCallback)(function(callback) {
    if (fetchMore && hasMore) {
      logger.info("OpenChannel | useScrollCallback: start");
      var messageListParams_1 = {
        prevResultSize: 30,
        includeReactions: false,
        nextResultSize: 0
      };
      if (userFilledMessageListParams) {
        Object.keys(userFilledMessageListParams).forEach(function(key) {
          messageListParams_1[key] = userFilledMessageListParams[key];
        });
        logger.info("OpenChannel | useScrollCallback: Used userFilledMessageListParams", userFilledMessageListParams);
      }
      logger.info("OpenChannel | useScrollCallback: Fetching messages", { currentOpenChannel, messageListParams: messageListParams_1 });
      currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams_1).then(function(messages) {
        logger.info("OpenChannel | useScrollCallback: Fetching messages succeeded", messages);
        var hasMore2 = messages && messages.length > 0;
        var lastMessageTimestamp2 = hasMore2 ? messages[0].createdAt : null;
        messagesDispatcher({
          type: GET_PREV_MESSAGES_SUCESS,
          payload: {
            currentOpenChannel,
            messages,
            hasMore: hasMore2,
            lastMessageTimestamp: lastMessageTimestamp2
          }
        });
        setTimeout(function() {
          callback();
        });
      }).catch(function(error) {
        logger.error("OpenChannel | useScrollCallback: Fetching messages failed", error);
        messagesDispatcher({
          type: GET_PREV_MESSAGES_FAIL,
          payload: {
            currentOpenChannel,
            messages: [],
            hasMore: false,
            lastMessageTimestamp: 0
          }
        });
      });
    }
  }, [currentOpenChannel, lastMessageTimestamp, fetchMore, sdk]);
}
function useCheckScrollBottom(_a, _b) {
  var conversationScrollRef = _a.conversationScrollRef;
  var logger = _b.logger;
  return (0, import_react51.useCallback)(function() {
    var isBottom = true;
    if (conversationScrollRef && (conversationScrollRef === null || conversationScrollRef === void 0 ? void 0 : conversationScrollRef.current)) {
      try {
        var conversationScroll = conversationScrollRef.current;
        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;
      } catch (error) {
        logger.error("OpenChannel | useCheckScrollBottom", error);
      }
    }
    return isBottom;
  }, [conversationScrollRef]);
}
function useSendMessageCallback2(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel, onBeforeSendUserMessage = _a.onBeforeSendUserMessage, messageInputRef = _a.messageInputRef;
  var sdk = _b.sdk, logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, scrollRef = _b.scrollRef;
  return (0, import_react51.useCallback)(function() {
    var _a2;
    if (sdk) {
      var text = (_a2 = messageInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.innerText;
      var createParamsDefault = function(txt) {
        var message = txt;
        var params2 = {
          message
        };
        return params2;
      };
      var createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === "function";
      if (createCustomParams) {
        logger.info("OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage", onBeforeSendUserMessage);
      }
      var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text !== null && text !== void 0 ? text : "") : createParamsDefault(text !== null && text !== void 0 ? text : "");
      logger.info("OpenChannel | useSendMessageCallback: Sending message has started", params);
      var pendingMsg_1;
      currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.sendUserMessage(params).onPending(function(pendingMessage) {
        messagesDispatcher({
          type: SENDING_MESSAGE_START,
          payload: {
            message: pendingMessage,
            channel: currentOpenChannel
          }
        });
        pendingMsg_1 = pendingMessage;
        setTimeout(function() {
          return scrollIntoLast3(0, scrollRef);
        });
      }).onSucceeded(function(message) {
        logger.info("OpenChannel | useSendMessageCallback: Sending message succeeded", message);
        messagesDispatcher({
          type: SENDING_MESSAGE_SUCCEEDED,
          payload: message
        });
      }).onFailed(function(error) {
        logger.warning("OpenChannel | useSendMessageCallback: Sending message failed", error);
        messagesDispatcher({
          type: SENDING_MESSAGE_FAILED,
          payload: pendingMsg_1
        });
        if ((error === null || error === void 0 ? void 0 : error.code) === 900041) {
          messagesDispatcher({
            type: ON_USER_MUTED,
            payload: {
              channel: currentOpenChannel,
              user: sdk.currentUser
            }
          });
        }
      });
    }
  }, [currentOpenChannel, onBeforeSendUserMessage, messageInputRef]);
}
function useFileUploadCallback(_a, _b) {
  var _this = this;
  var currentOpenChannel = _a.currentOpenChannel, _c = _a.imageCompression, imageCompression = _c === void 0 ? {} : _c, onBeforeSendFileMessage = _a.onBeforeSendFileMessage;
  var sdk = _b.sdk, logger = _b.logger, messagesDispatcher = _b.messagesDispatcher, scrollRef = _b.scrollRef;
  var stringSet = useLocalization().stringSet;
  var openModal = useGlobalModalContext().openModal;
  var config = useSendbirdStateContext().config;
  var uikitUploadSizeLimit = config.uikitUploadSizeLimit;
  return (0, import_react51.useCallback)(function(files) {
    return __awaiter(_this, void 0, void 0, function() {
      var file_1, createCustomParams, createParamsDefault, compressedFiles, compressedFile, params;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!sdk) return [3, 2];
            file_1 = Array.isArray(files) ? files[0] : files;
            createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === "function";
            createParamsDefault = function(file) {
              var params2 = {};
              params2.file = file;
              return params2;
            };
            if (file_1.size > uikitUploadSizeLimit) {
              logger.info("OpenChannel | useFileUploadCallback: Cannot upload file size exceeding ".concat(uikitUploadSizeLimit));
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace("%d", "".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),
                  hideFooter: true
                },
                childElement: function(_a3) {
                  var closeModal = _a3.closeModal;
                  return import_react51.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            return [4, compressImages({
              files: [file_1],
              imageCompression,
              logger
            })];
          case 1:
            compressedFiles = _a2.sent().compressedFiles;
            compressedFile = compressedFiles[0];
            if (createCustomParams) {
              logger.info("OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage", onBeforeSendFileMessage);
            }
            params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);
            logger.info("OpenChannel | useFileUploadCallback: Uploading file message start", params);
            currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.sendFileMessage(params).onPending(function(pendingMessage) {
              messagesDispatcher({
                type: SENDING_MESSAGE_START,
                payload: {
                  // TODO: remove data pollution
                  message: __assign(__assign({}, pendingMessage), {
                    url: URL.createObjectURL(file_1),
                    // pending thumbnail message seems to be failed
                    requestState: "pending",
                    isUserMessage: pendingMessage.isUserMessage,
                    isFileMessage: pendingMessage.isFileMessage,
                    isAdminMessage: pendingMessage.isAdminMessage,
                    isMultipleFilesMessage: pendingMessage.isMultipleFilesMessage
                  }),
                  channel: currentOpenChannel
                }
              });
              setTimeout(function() {
                return scrollIntoLast3(0, scrollRef);
              });
            }).onSucceeded(function(message) {
              logger.info("OpenChannel | useFileUploadCallback: Sending message succeeded", message);
              messagesDispatcher({
                type: SENDING_MESSAGE_SUCCEEDED,
                payload: message
              });
            }).onFailed(function(error, message) {
              logger.error("OpenChannel | useFileUploadCallback: Sending file message failed", { message, error });
              message.localUrl = URL.createObjectURL(file_1);
              message.file = file_1;
              messagesDispatcher({
                type: SENDING_MESSAGE_FAILED,
                payload: message
              });
            });
            _a2.label = 2;
          case 2:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [currentOpenChannel, onBeforeSendFileMessage, imageCompression]);
}
function useUpdateMessageCallback3(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel, onBeforeSendUserMessage = _a.onBeforeSendUserMessage;
  var logger = _b.logger, messagesDispatcher = _b.messagesDispatcher;
  return (0, import_react51.useCallback)(function(messageId, text, callback) {
    var createParamsDefault = function(txt) {
      return {
        message: txt
      };
    };
    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === "function") {
      logger.info("OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage");
    }
    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);
    currentOpenChannel.updateUserMessage(messageId, params).then(function(message) {
      if (callback) {
        callback();
      }
      logger.info("OpenChannel | useUpdateMessageCallback: Updating message succeeded", { message, params });
      messagesDispatcher({
        type: ON_MESSAGE_UPDATED2,
        payload: {
          channel: currentOpenChannel,
          message
        }
      });
    });
  }, [currentOpenChannel, onBeforeSendUserMessage]);
}
function useDeleteMessageCallback3(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel;
  var logger = _b.logger, messagesDispatcher = _b.messagesDispatcher;
  return (0, import_react51.useCallback)(function(message, callback) {
    logger.info("OpenChannel | useDeleteMessageCallback: Deleting message", message);
    var sendingStatus = message.sendingStatus;
    logger.info("OpenChannel | useDeleteMessageCallback: Deleting message requestState", sendingStatus);
    if (sendingStatus === "failed" || sendingStatus === "pending") {
      logger.info("OpenChannel | useDeleteMessageCallback: Deleted message from local", message);
      messagesDispatcher({
        type: ON_MESSAGE_DELETED_BY_REQ_ID2,
        payload: message.reqId
      });
      if (callback) {
        callback();
      }
    } else {
      if (!(message.messageType === "file" || message.messageType === "user")) {
        return;
      }
      var messageToDelete = message;
      currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.deleteMessage(messageToDelete).then(function() {
        logger.info("OpenChannel | useDeleteMessageCallback: Deleting message on server", sendingStatus);
        if (callback) {
          callback();
        }
        logger.info("OpenChannel | useDeleteMessageCallback: Deleting message succeeded", message);
        messagesDispatcher({
          type: ON_MESSAGE_DELETED2,
          payload: {
            channel: currentOpenChannel,
            messageId: message.messageId
          }
        });
      }).catch(function(error) {
        logger.warning("OpenChannel | useDeleteMessageCallback: Deleting message failed", error);
      });
    }
  }, [currentOpenChannel]);
}
function useResendMessageCallback3(_a, _b) {
  var currentOpenChannel = _a.currentOpenChannel;
  var logger = _b.logger, messagesDispatcher = _b.messagesDispatcher;
  return (0, import_react51.useCallback)(function(failedMessage) {
    logger.info("OpenChannel | useResendMessageCallback: Resending message has started", failedMessage);
    if (typeof (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isResendable) === "boolean" && failedMessage.isResendable) {
      if (failedMessage.isUserMessage()) {
        currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.resendMessage(failedMessage).onPending(function(message) {
          messagesDispatcher({
            type: RESENDING_MESSAGE_START,
            payload: {
              channel: currentOpenChannel,
              message
            }
          });
        }).onSucceeded(function(message) {
          logger.info("OpenChannel | useResendMessageCallback: Reseding message succeeded", message);
          messagesDispatcher({
            type: SENDING_MESSAGE_SUCCEEDED,
            payload: message
          });
        }).onFailed(function(error, message) {
          logger.warning("OpenChannel | useResendMessageCallback: Resending message failed", error);
          messagesDispatcher({
            type: SENDING_MESSAGE_FAILED,
            payload: message
          });
        });
      }
      if (failedMessage.isFileMessage()) {
        currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.resendMessage(failedMessage).onPending(function(message) {
          messagesDispatcher({
            type: RESENDING_MESSAGE_START,
            payload: {
              channel: currentOpenChannel,
              message
            }
          });
        }).onSucceeded(function(message) {
          logger.info("OpenChannel | useResendMessageCallback: Resending file message succeeded", message);
          messagesDispatcher({
            type: SENDING_MESSAGE_SUCCEEDED,
            payload: message
          });
        }).onFailed(function(error, message) {
          logger.warning("OpenChannel | useResendMessageCallback: Resending file message failed", error);
          messagesDispatcher({
            type: SENDING_MESSAGE_FAILED,
            payload: message
          });
        });
      }
    } else {
      console.error("OpenChannel | useResendMessageCallback: Message is not resendable");
      logger.warning("OpenChannel | useResendMessageCallback: Message is not resendable", failedMessage);
    }
  }, [currentOpenChannel]);
}
var THROTTLE_TIMER = 5e3;
function useTrimMessageList(_a, _b) {
  var messagesLength = _a.messagesLength, messageLimit = _a.messageLimit;
  var messagesDispatcher = _b.messagesDispatcher, logger = _b.logger;
  var _c = (0, import_react51.useState)(false), inProgress = _c[0], setInProgress = _c[1];
  (0, import_react51.useEffect)(function() {
    if (inProgress) {
      return;
    }
    if (typeof messagesLength === "number" && typeof messageLimit === "number" && messagesLength > messageLimit) {
      logger.info("Trimming MessageList");
      messagesDispatcher({
        type: TRIM_MESSAGE_LIST,
        payload: { messageLimit }
      });
    }
    setInProgress(true);
    setTimeout(function() {
      setInProgress(false);
    }, THROTTLE_TIMER);
  }, [messagesLength, messageLimit]);
}
var OpenChannelContext = import_react51.default.createContext(null);
var OpenChannelProvider = function(props) {
  var _a, _b, _c, _d, _e, _f, _g;
  var channelUrl = props.channelUrl, children = props.children, _h = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _h === void 0 ? true : _h, queries = props.queries, onBeforeSendUserMessage = props.onBeforeSendUserMessage, messageLimit = props.messageLimit, onBeforeSendFileMessage = props.onBeforeSendFileMessage, onChatHeaderActionClick = props.onChatHeaderActionClick, onBackClick = props.onBackClick, disableUserProfile = props.disableUserProfile, renderUserProfile = props.renderUserProfile;
  var fetchingParticipants = false;
  var globalStore = useSendbirdStateContext();
  var sdk = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;
  var sdkInit = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.initialized;
  var user = (_f = (_e = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _e === void 0 ? void 0 : _e.userStore) === null || _f === void 0 ? void 0 : _f.user;
  var config = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config;
  var userId = config.userId, isOnline = config.isOnline, logger = config.logger, pubSub = config.pubSub, imageCompression = config.imageCompression;
  var _j = (0, import_react51.useReducer)(reducer4, initialState6), messagesStore = _j[0], messagesDispatcher = _j[1];
  var allMessages = messagesStore.allMessages, loading = messagesStore.loading, initialized = messagesStore.initialized, currentOpenChannel = messagesStore.currentOpenChannel, isInvalid = messagesStore.isInvalid, hasMore = messagesStore.hasMore, lastMessageTimestamp = messagesStore.lastMessageTimestamp, operators = messagesStore.operators, bannedParticipantIds = messagesStore.bannedParticipantIds, mutedParticipantIds = messagesStore.mutedParticipantIds;
  var messageInputRef = (0, import_react51.useRef)(null);
  var conversationScrollRef = (0, import_react51.useRef)(null);
  var userFilledMessageListParams = queries === null || queries === void 0 ? void 0 : queries.messageListParams;
  var disabled = !initialized || !isOnline || isDisabledBecauseFrozen2(currentOpenChannel, userId) || isDisabledBecauseMuted2(mutedParticipantIds, userId);
  var amIBanned = (0, import_react51.useMemo)(function() {
    return bannedParticipantIds.indexOf(user.userId) >= 0;
  }, [channelUrl, bannedParticipantIds, user]);
  var amIMuted = (0, import_react51.useMemo)(function() {
    return mutedParticipantIds.indexOf(user.userId) >= 0;
  }, [channelUrl, mutedParticipantIds, user]);
  var amIOperator = (0, import_react51.useMemo)(function() {
    return operators.map(function(operator) {
      return operator.userId;
    }).indexOf(user.userId) >= 0;
  }, [channelUrl, operators, user]);
  useSetChannel2({ channelUrl, sdkInit, fetchingParticipants, userId, currentOpenChannel }, { sdk, logger, messagesDispatcher });
  var checkScrollBottom = useCheckScrollBottom({ conversationScrollRef }, { logger });
  useHandleChannelEvents3({ currentOpenChannel, checkScrollBottom }, { sdk, logger, messagesDispatcher, scrollRef: conversationScrollRef });
  useInitialMessagesFetch2({ currentOpenChannel, userFilledMessageListParams }, { logger, messagesDispatcher, scrollRef: conversationScrollRef });
  var fetchMore = shouldFetchMore(allMessages === null || allMessages === void 0 ? void 0 : allMessages.length, messageLimit);
  var onScroll = useScrollCallback3({ currentOpenChannel, lastMessageTimestamp, fetchMore }, { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams });
  var handleSendMessage = useSendMessageCallback2({ currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef }, { sdk, logger, messagesDispatcher, scrollRef: conversationScrollRef });
  var handleFileUpload = useFileUploadCallback({ currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression }, { sdk, logger, messagesDispatcher, scrollRef: conversationScrollRef });
  var updateMessage = useUpdateMessageCallback3({ currentOpenChannel, onBeforeSendUserMessage }, { logger, messagesDispatcher });
  var deleteMessage = useDeleteMessageCallback3({ currentOpenChannel }, { logger, messagesDispatcher });
  var resendMessage = useResendMessageCallback3({ currentOpenChannel }, { logger, messagesDispatcher });
  useTrimMessageList({ messagesLength: allMessages === null || allMessages === void 0 ? void 0 : allMessages.length, messageLimit }, { messagesDispatcher, logger });
  (0, import_react51.useEffect)(function() {
    var subscriber = /* @__PURE__ */ new Map();
    if (!pubSub || !pubSub.subscribe) {
      return;
    }
    subscriber.set(pubSubTopics.SEND_USER_MESSAGE, pubSub.subscribe(pubSubTopics.SEND_USER_MESSAGE, function(msg) {
      var channel = msg.channel, message = msg.message;
      scrollIntoLast3(0, conversationScrollRef);
      if (channel && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        messagesDispatcher({
          type: SENDING_MESSAGE_SUCCEEDED,
          payload: message
        });
      }
    }));
    subscriber.set(pubSubTopics.SEND_MESSAGE_START, pubSub.subscribe(pubSubTopics.SEND_MESSAGE_START, function(msg) {
      var channel = msg.channel, message = msg.message;
      if (channel && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        messagesDispatcher({
          type: SENDING_MESSAGE_START,
          payload: { message, channel }
        });
      }
    }));
    subscriber.set(pubSubTopics.SEND_FILE_MESSAGE, pubSub.subscribe(pubSubTopics.SEND_FILE_MESSAGE, function(msg) {
      var channel = msg.channel, message = msg.message;
      scrollIntoLast3(0, conversationScrollRef);
      if (channel && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        messagesDispatcher({
          type: SENDING_MESSAGE_SUCCEEDED,
          payload: { message, channel }
        });
      }
    }));
    subscriber.set(pubSubTopics.UPDATE_USER_MESSAGE, pubSub.subscribe(pubSubTopics.UPDATE_USER_MESSAGE, function(msg) {
      var channel = msg.channel, message = msg.message, fromSelector = msg.fromSelector;
      if (fromSelector && channel && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        messagesDispatcher({
          type: ON_MESSAGE_UPDATED2,
          payload: { channel, message }
        });
      }
    }));
    subscriber.set(pubSubTopics.DELETE_MESSAGE, pubSub.subscribe(pubSubTopics.DELETE_MESSAGE, function(msg) {
      var channel = msg.channel, messageId = msg.messageId;
      if (channel && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
        messagesDispatcher({
          type: ON_MESSAGE_DELETED2,
          payload: messageId
        });
      }
    }));
    return function() {
      if (subscriber) {
        subscriber.forEach(function(s) {
          try {
            s.remove();
          } catch (_a2) {
          }
        });
      }
    };
  }, [channelUrl, sdkInit]);
  return import_react51.default.createElement(
    OpenChannelContext.Provider,
    { value: {
      // props
      channelUrl,
      children,
      isMessageGroupingEnabled,
      queries,
      onBeforeSendUserMessage,
      messageLimit,
      onBeforeSendFileMessage,
      onChatHeaderActionClick,
      onBackClick,
      // store
      allMessages,
      loading,
      initialized,
      currentOpenChannel,
      isInvalid,
      hasMore,
      lastMessageTimestamp,
      operators,
      bannedParticipantIds,
      mutedParticipantIds,
      // derived/utils
      messageInputRef,
      conversationScrollRef,
      disabled,
      amIBanned,
      amIMuted,
      amIOperator,
      checkScrollBottom,
      fetchMore,
      onScroll,
      handleSendMessage,
      handleFileUpload,
      updateMessage,
      deleteMessage,
      resendMessage,
      frozen: messagesStore.frozen,
      disableUserProfile,
      renderUserProfile,
      participants: messagesStore.participants
    } },
    import_react51.default.createElement(UserProfileProvider, { isOpenChannel: true, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile, disableUserProfile: (_g = props === null || props === void 0 ? void 0 : props.disableUserProfile) !== null && _g !== void 0 ? _g : config === null || config === void 0 ? void 0 : config.disableUserProfile }, children)
  );
};
var useOpenChannelContext = function() {
  var context = import_react51.default.useContext(OpenChannelContext);
  if (!context)
    throw new Error("OpenChannelContext not found. Use within the OpenChannel module");
  return context;
};

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelInput.js
var import_react52 = __toESM(require_react(), 1);
var import_react_dom29 = __toESM(require_react_dom(), 1);
var OpenChannelInput = import_react52.default.forwardRef(function(props, ref) {
  var _a = useOpenChannelContext(), currentOpenChannel = _a.currentOpenChannel, disabled = _a.disabled, handleSendMessage = _a.handleSendMessage, handleFileUpload = _a.handleFileUpload, amIMuted = _a.amIMuted;
  var channel = currentOpenChannel;
  var stringSet = (0, import_react52.useContext)(LocalizationContext).stringSet;
  var value = props.value;
  function getPlaceHolderString() {
    if (amIMuted) {
      return stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED;
    }
    if (disabled) {
      return stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED;
    }
    return "";
  }
  if (!channel) {
    return null;
  }
  return import_react52.default.createElement(
    "div",
    { className: "sendbird-openchannel-footer" },
    import_react52.default.createElement(MessageInput, { channel: currentOpenChannel, ref, value, disabled, isVoiceMessageEnabled: false, onSendMessage: handleSendMessage, onFileUpload: handleFileUpload, placeholder: getPlaceHolderString() })
  );
});

// node_modules/@sendbird/uikit-react/OpenChannel/components/FrozenChannelNotification.js
var import_react53 = __toESM(require_react(), 1);
var FrozenNotification2 = function() {
  var stringSet = (0, import_react53.useContext)(LocalizationContext).stringSet;
  return import_react53.default.createElement(
    "div",
    { className: "sendbird-frozen-channel-notification" },
    import_react53.default.createElement(Label, { className: "sendbird-frozen-channel-notification__text", type: LabelTypography.CAPTION_2 }, stringSet.CHANNEL_FROZEN)
  );
};

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelHeader.js
var import_react54 = __toESM(require_react(), 1);
var import_react_dom30 = __toESM(require_react_dom(), 1);
function OpenchannelConversationHeader() {
  var stringSet = (0, import_react54.useContext)(LocalizationContext).stringSet;
  var _a = useOpenChannelContext(), currentOpenChannel = _a.currentOpenChannel, onChatHeaderActionClick = _a.onChatHeaderActionClick, amIOperator = _a.amIOperator, onBackClick = _a.onBackClick;
  var title = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.name;
  var subTitle = "".concat(kFormatter2(currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.participantCount), " ").concat(stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS);
  var coverImage = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.coverUrl;
  var isMobile = useMediaQueryContext().isMobile;
  return import_react54.default.createElement(
    "div",
    { className: "sendbird-openchannel-conversation-header" },
    import_react54.default.createElement(
      "div",
      { className: "sendbird-openchannel-conversation-header__left" },
      isMobile && import_react54.default.createElement(Icon, { className: "sendbird-oepnchannel-header__icon_back", onClick: onBackClick, fillColor: IconColors.PRIMARY, width: "24px", height: "24px", type: IconTypes.ARROW_LEFT }),
      coverImage ? import_react54.default.createElement(Avatar$1, { className: "sendbird-openchannel-conversation-header__left__cover-image", src: coverImage, alt: "channel cover image", width: "32px", height: "32px" }) : import_react54.default.createElement(
        "div",
        { className: "sendbird-openchannel-conversation-header__left__cover-image--icon", style: { width: 32, height: 32 } },
        import_react54.default.createElement(Icon, { type: IconTypes.CHANNELS, fillColor: IconColors.CONTENT, width: "18px", height: "18px" })
      ),
      import_react54.default.createElement(Label, { className: "sendbird-openchannel-conversation-header__left__title", type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, title || stringSet.NO_TITLE),
      import_react54.default.createElement(Label, { className: "sendbird-openchannel-conversation-header__left__sub-title", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_2 }, subTitle || stringSet.NO_TITLE)
    ),
    import_react54.default.createElement(
      "div",
      { className: "sendbird-openchannel-conversation-header__right" },
      import_react54.default.createElement(
        IconButton,
        { className: "sendbird-openchannel-conversation-header__right__trigger", width: "32px", height: "32px", onClick: onChatHeaderActionClick },
        import_react54.default.createElement(Icon, { type: amIOperator ? IconTypes.INFO : IconTypes.MEMBERS, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelMessageList.js
var import_react62 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelMessage.js
var import_react61 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/OpenchannelUserMessage.js
var import_react56 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-MlowEcAQ.js
var copyToClipboard = function(text) {
  if (window.clipboardData && window.clipboardData.setData) {
    return window.clipboardData.setData("Text", text);
  }
  if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
    var textarea = document.createElement("textarea");
    textarea.textContent = text;
    textarea.style.position = "fixed";
    document.body.appendChild(textarea);
    textarea.select();
    try {
      return document.execCommand("copy");
    } catch (ex) {
      return false;
    } finally {
      document.body.removeChild(textarea);
    }
  }
  return false;
};

// node_modules/@sendbird/uikit-react/chunks/bundle-BOC6Vh1w.js
var import_react55 = __toESM(require_react(), 1);
var OpenChannelMessageStatusTypes = {
  NONE: "none",
  PENDING: "pending",
  FAILED: "failed",
  CANCELED: "canceled",
  SUCCEEDED: "succeeded"
};
var getSenderFromMessage = function(message) {
  return message.sender || message._sender;
};
var checkIsSent = function(status) {
  return status === OpenChannelMessageStatusTypes.SUCCEEDED;
};
var checkIsPending = function(status) {
  return status === OpenChannelMessageStatusTypes.PENDING;
};
var checkIsFailed = function(status) {
  return status === OpenChannelMessageStatusTypes.FAILED;
};
var checkIsByMe = function(message, userId) {
  return getSenderFromMessage(message).userId === userId;
};
var isFineCopy = function(_a) {
  var _b;
  var message = _a.message;
  return (message === null || message === void 0 ? void 0 : message.messageType) === "user" && ((_b = message === null || message === void 0 ? void 0 : message.message) === null || _b === void 0 ? void 0 : _b.length) > 0;
};
var isFineResend = function(_a) {
  var message = _a.message, status = _a.status, userId = _a.userId;
  return checkIsByMe(message, userId) && checkIsFailed(status) && (message === null || message === void 0 ? void 0 : message.isResendable);
};
var isFineEdit = function(_a) {
  var _b;
  var message = _a.message, status = _a.status, userId = _a.userId;
  return checkIsByMe(message, userId) && checkIsSent(status) && ((_b = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b === void 0 ? void 0 : _b.call(message));
};
var isFineDelete = function(_a) {
  var message = _a.message, userId = _a.userId;
  return checkIsByMe(message, userId);
};
var isFineDownload = function(_a) {
  var _b;
  var message = _a.message, status = _a.status;
  if (((_b = message === null || message === void 0 ? void 0 : message.isFileMessage) === null || _b === void 0 ? void 0 : _b.call(message)) && checkIsSent(status)) {
    return true;
  }
  return false;
};
var showMenuTrigger = function(props) {
  var message = props.message, status = props.status, userId = props.userId;
  if (message.messageType === "user") {
    return isFineDelete({ message, status, userId }) || isFineEdit({ message, status, userId }) || isFineCopy({ message, status, userId }) || isFineResend({ message, status, userId });
  } else {
    return isFineDelete({ message, status, userId }) || isFineResend({ message, status, userId });
  }
};
var OpenChannelMobileMenu = function(props) {
  var _a, _b;
  var message = props.message, parentRef = props.parentRef, resendMessage = props.resendMessage, showEdit = props.showEdit, showRemove = props.showRemove, copyToClipboard3 = props.copyToClipboard, hideMenu = props.hideMenu, _c = props.isEphemeral, isEphemeral = _c === void 0 ? false : _c;
  var userMessage = message;
  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;
  var stringSet = useLocalization().stringSet;
  var userId = (_b = (_a = useSendbirdStateContext()) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.userId;
  var fileMessage = message;
  return import_react55.default.createElement(ContextMenu, { isOpen: true, menuItems: function() {
    return import_react55.default.createElement(
      MenuItems,
      { className: "sendbird-openchannel__mobile-menu", parentRef, parentContainRef: parentRef, closeDropdown: hideMenu },
      isFineCopy({ message: userMessage, userId, status }) && import_react55.default.createElement(
        MenuItem,
        { className: "sendbird-openchannel-og-message__top__context-menu__copy", onClick: function() {
          copyToClipboard3 === null || copyToClipboard3 === void 0 ? void 0 : copyToClipboard3();
        }, testID: "open_channel_mobile_context_menu_copy" },
        import_react55.default.createElement(import_react55.default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__COPY)
      ),
      !isEphemeral && isFineEdit({ message, userId, status }) && import_react55.default.createElement(
        MenuItem,
        { className: "sendbird-openchannel-og-message__top__context-menu__edit", onClick: function() {
          showEdit === null || showEdit === void 0 ? void 0 : showEdit();
        }, testID: "open_channel_mobile_context_menu_edit" },
        import_react55.default.createElement(import_react55.default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__EDIT)
      ),
      isFineResend({ message, userId, status }) && import_react55.default.createElement(
        MenuItem,
        { onClick: function() {
          resendMessage === null || resendMessage === void 0 ? void 0 : resendMessage();
        }, testID: "open_channel_mobile_context_menu_resend" },
        import_react55.default.createElement(import_react55.default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__RESEND)
      ),
      !isEphemeral && isFineDelete({ message, userId, status }) && import_react55.default.createElement(
        MenuItem,
        { onClick: function() {
          showRemove === null || showRemove === void 0 ? void 0 : showRemove();
        }, testID: "open_channel_mobile_context_menu_delete" },
        import_react55.default.createElement(import_react55.default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)
      ),
      isFineDownload({ message, status }) && import_react55.default.createElement(
        MenuItem,
        { onClick: function() {
          hideMenu();
        }, testID: "open_channel_mobile_context_menu_download_file" },
        import_react55.default.createElement("a", { className: "sendbird-openchannel__mobile-menu-hyperlink", rel: "noopener noreferrer", href: fileMessage === null || fileMessage === void 0 ? void 0 : fileMessage.url, target: "_blank" }, stringSet.CONTEXT_MENU_DROPDOWN__SAVE)
      )
    );
  } });
};

// node_modules/@sendbird/uikit-react/ui/OpenchannelUserMessage.js
var import_react_dom31 = __toESM(require_react_dom(), 1);
function OpenchannelUserMessage(_a) {
  var className = _a.className, message = _a.message, isOperator3 = _a.isOperator, _b = _a.isEphemeral, isEphemeral = _b === void 0 ? false : _b, userId = _a.userId, resendMessage = _a.resendMessage, disabled = _a.disabled, showEdit = _a.showEdit, showRemove = _a.showRemove, chainTop = _a.chainTop;
  var _c = useLocalization(), stringSet = _c.stringSet, dateLocale = _c.dateLocale;
  var _d = (0, import_react56.useContext)(UserProfileContext), disableUserProfile = _d.disableUserProfile, renderUserProfile = _d.renderUserProfile;
  var messageRef = (0, import_react56.useRef)();
  var avatarRef = (0, import_react56.useRef)();
  var contextMenuRef = (0, import_react56.useRef)();
  var mobileMenuRef = (0, import_react56.useRef)();
  var _e = (0, import_react56.useState)({}), contextStyle = _e[0], setContextStyle = _e[1];
  var _f = (0, import_react56.useState)(false), contextMenu = _f[0], setContextMenu = _f[1];
  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;
  var isPending = checkIsPending(status);
  var isFailed = checkIsFailed(status);
  var sender = getSenderFromMessage(message);
  (0, import_react56.useEffect)(function() {
    var _a2;
    if (((_a2 = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a2 === void 0 ? void 0 : _a2.clientHeight) && messageRef.current.clientHeight > 36) {
      setContextStyle({ top: "8px " });
    } else {
      setContextStyle({ top: "2px" });
    }
  }, [window.innerWidth]);
  var onLongPress = useLongPress({
    onLongPress: function() {
      setContextMenu(true);
    }
  });
  var isMobile = useMediaQueryContext().isMobile;
  if (!message || message.messageType !== "user") {
    return import_react56.default.createElement(import_react56.default.Fragment, null);
  }
  return import_react56.default.createElement(
    import_react56.default.Fragment,
    null,
    import_react56.default.createElement(
      "div",
      { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
        "sendbird-openchannel-user-message"
      ], false).join(" "), ref: messageRef },
      import_react56.default.createElement("div", { className: "sendbird-openchannel-user-message__left" }, !chainTop && import_react56.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return import_react56.default.createElement(Avatar$1, { className: "sendbird-openchannel-user-message__left__avatar", src: sender.profileUrl || "", ref: avatarRef, width: "28px", height: "28px", onClick: function() {
          if (!disableUserProfile) {
            toggleDropdown();
          }
        } });
      }, menuItems: function(closeDropdown) {
        return renderUserProfile ? renderUserProfile({
          user: sender,
          close: closeDropdown,
          currentUserId: userId,
          avatarRef
        }) : import_react56.default.createElement(
          MenuItems,
          { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown, style: { paddingTop: "0px", paddingBottom: "0px" } },
          import_react56.default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })
        );
      } })),
      import_react56.default.createElement(
        "div",
        { className: "sendbird-openchannel-user-message__right" },
        !chainTop && import_react56.default.createElement(
          "div",
          { className: "sendbird-openchannel-user-message__right__top" },
          import_react56.default.createElement(Label, { className: "sendbird-openchannel-user-message__right__top__sender-name", type: LabelTypography.CAPTION_2, color: isOperator3 ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName || sender.nickname || sender.userId)),
          import_react56.default.createElement(Label, { className: "sendbird-openchannel-user-message__right__top__sent-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message === null || message === void 0 ? void 0 : message.createdAt, "p", {
            locale: dateLocale
          }))
        ),
        import_react56.default.createElement(
          "div",
          __assign({}, isMobile ? __assign({}, onLongPress) : {}, { className: "sendbird-openchannel-user-message__right__bottom", ref: mobileMenuRef }),
          import_react56.default.createElement(
            Label,
            { className: "sendbird-openchannel-user-message__right__bottom__message", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 },
            message === null || message === void 0 ? void 0 : message.message,
            isEditedMessage(message) && import_react56.default.createElement(Label, { key: uuidv4(), type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2, className: "sendbird-openchannel-user-message-word" }, " ".concat(stringSet.MESSAGE_EDITED, " "))
          )
        ),
        (isPending || isFailed) && import_react56.default.createElement(
          "div",
          { className: "sendbird-openchannel-user-message__right__tail" },
          isPending && import_react56.default.createElement(
            Loader,
            { width: "16px", height: "16px" },
            import_react56.default.createElement(Icon, { className: "sendbird-openchannel-user-message__right__tail__pending", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
          ),
          isFailed && import_react56.default.createElement(Icon, { className: "sendbird-openchannel-user-message__right__tail__failed", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: "16px", height: "16px" })
        )
      ),
      !isMobile && import_react56.default.createElement(
        "div",
        { className: "sendbird-openchannel-user-message__context-menu", ref: contextMenuRef, style: contextStyle },
        import_react56.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return showMenuTrigger({ message, userId, status }) && import_react56.default.createElement(
            IconButton,
            { className: "sendbird-openchannel-user-message__context-menu--icon", width: "32px", height: "32px", onClick: function() {
              toggleDropdown();
            } },
            import_react56.default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE, width: "24px", height: "24px" })
          );
        }, menuItems: function(closeDropdown) {
          return import_react56.default.createElement(
            MenuItems,
            { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown, openLeft: true },
            isFineCopy({ message, userId, status }) && import_react56.default.createElement(MenuItem, { className: "sendbird-openchannel-user-message__context-menu__copy", onClick: function() {
              copyToClipboard(message.message);
              closeDropdown();
            }, testID: "open_channel_user_message_menu_copy" }, stringSet.CONTEXT_MENU_DROPDOWN__COPY),
            !isEphemeral && isFineEdit({ message, userId, status }) && import_react56.default.createElement(MenuItem, { className: "sendbird-openchannel-user-message__context-menu__edit", onClick: function() {
              if (disabled) {
                return;
              }
              showEdit(true);
              closeDropdown();
            }, testID: "open_channel_user_message_menu_edit" }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT),
            isFineResend({ message, userId, status }) && import_react56.default.createElement(MenuItem, { className: "sendbird-openchannel-user-message__context-menu__resend", onClick: function() {
              resendMessage(message);
              closeDropdown();
            }, testID: "open_channel_user_message_menu_resend" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND),
            !isEphemeral && isFineDelete({ message, userId, status }) && import_react56.default.createElement(MenuItem, { className: "sendbird-openchannel-user-message__context-menu__delete", onClick: function() {
              if (disabled) {
                return;
              }
              showRemove(true);
              closeDropdown();
            }, testID: "open_channel_user_message_menu_delete" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)
          );
        } })
      )
    ),
    contextMenu && import_react56.default.createElement(OpenChannelMobileMenu, { message, parentRef: mobileMenuRef, hideMenu: function() {
      setContextMenu(false);
    }, showRemove: function() {
      setContextMenu(false);
      showRemove(true);
    }, showEdit: function() {
      setContextMenu(false);
      showEdit(true);
    }, copyToClipboard: function() {
      setContextMenu(false);
      copyToClipboard(message === null || message === void 0 ? void 0 : message.message);
    }, resendMessage: function() {
      setContextMenu(false);
      resendMessage(message);
    } })
  );
}

// node_modules/@sendbird/uikit-react/ui/OpenChannelAdminMessage.js
var import_react57 = __toESM(require_react(), 1);
function OpenChannelAdminMessage(_a) {
  var className = _a.className, message = _a.message;
  return import_react57.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-openchannel-admin-message"
    ], false).join(" ") },
    import_react57.default.createElement(Label, { className: "sendbird-openchannel-admin-message__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, message.message || "")
  );
}

// node_modules/@sendbird/uikit-react/ui/OpenchannelOGMessage.js
var import_react58 = __toESM(require_react(), 1);
var import_react_dom32 = __toESM(require_react_dom(), 1);
function OpenChannelOGMessage(_a) {
  var _b, _c, _d;
  var message = _a.message, isOperator3 = _a.isOperator, _e = _a.isEphemeral, isEphemeral = _e === void 0 ? false : _e, className = _a.className, disabled = _a.disabled, showEdit = _a.showEdit, showRemove = _a.showRemove, resendMessage = _a.resendMessage, chainTop = _a.chainTop, userId = _a.userId;
  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;
  var ogMetaData = (_b = message.ogMetaData) !== null && _b !== void 0 ? _b : null;
  var defaultImage = ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.defaultImage;
  var _f = useLocalization(), stringSet = _f.stringSet, dateLocale = _f.dateLocale;
  var isMobile = useMediaQueryContext().isMobile;
  var _g = (0, import_react58.useContext)(UserProfileContext), disableUserProfile = _g.disableUserProfile, renderUserProfile = _g.renderUserProfile;
  var _h = (0, import_react58.useState)({}), contextStyle = _h[0], setContextStyle = _h[1];
  var _j = (0, import_react58.useState)(false), showContextMenu = _j[0], setShowContextMenu = _j[1];
  var openLink = function() {
    return openURL(ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url);
  };
  var onLongPress = useLongPress({
    onLongPress: function() {
      return setShowContextMenu(true);
    },
    onClick: openLink
  }, {
    delay: 300
  });
  var messageComponentRef = (0, import_react58.useRef)();
  var contextMenuRef = (0, import_react58.useRef)();
  var mobileMenuRef = (0, import_react58.useRef)();
  var avatarRef = (0, import_react58.useRef)();
  var isPending = checkIsPending(status);
  var isFailed = checkIsFailed(status);
  var sender = getSenderFromMessage(message);
  var tokens = (0, import_react58.useMemo)(function() {
    return tokenizeMessage({
      messageText: message.message
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  (0, import_react58.useEffect)(function() {
    var _a2, _b2;
    if (((_a2 = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a2 === void 0 ? void 0 : _a2.clientHeight) && ((_b2 = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _b2 === void 0 ? void 0 : _b2.clientHeight) > 36) {
      setContextStyle({ top: "8px " });
    } else {
      setContextStyle({ top: "2px" });
    }
  }, [window.innerWidth]);
  if (!message || message.messageType !== "user") {
    return import_react58.default.createElement(import_react58.default.Fragment, null);
  }
  return import_react58.default.createElement(
    import_react58.default.Fragment,
    null,
    import_react58.default.createElement(
      "div",
      __assign({ className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
        "sendbird-openchannel-og-message"
      ], false).join(" "), ref: messageComponentRef }, isMobile ? __assign({}, onLongPress) : {}),
      import_react58.default.createElement(
        "div",
        { className: "sendbird-openchannel-og-message__top" },
        import_react58.default.createElement("div", { className: "sendbird-openchannel-og-message__top__left" }, !chainTop && import_react58.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react58.default.createElement(Avatar$1, { className: "sendbird-openchannel-og-message__top__left__avatar", src: sender.profileUrl || "", ref: avatarRef, width: "28px", height: "28px", onClick: function() {
            if (!disableUserProfile) {
              toggleDropdown();
            }
          } });
        }, menuItems: function(closeDropdown) {
          return renderUserProfile ? renderUserProfile({
            user: sender,
            close: closeDropdown,
            currentUserId: userId,
            avatarRef
          }) : import_react58.default.createElement(
            MenuItems,
            { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown, style: { paddingTop: "0px", paddingBottom: "0px" } },
            import_react58.default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })
          );
        } })),
        import_react58.default.createElement(
          "div",
          { className: "sendbird-openchannel-og-message__top__right" },
          !chainTop && import_react58.default.createElement(
            "div",
            { className: "sendbird-openchannel-og-message__top__right__title" },
            import_react58.default.createElement(Label, { className: "sendbird-openchannel-og-message__top__right__title__sender-name", type: LabelTypography.CAPTION_2, color: isOperator3 ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName || sender.nickname || sender.userId)),
            import_react58.default.createElement(Label, { className: "sendbird-openchannel-og-message__top__right__title__sent-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message === null || message === void 0 ? void 0 : message.createdAt, "p", {
              locale: dateLocale
            }))
          ),
          import_react58.default.createElement(
            "div",
            { className: "sendbird-openchannel-og-message__top__right__description" },
            import_react58.default.createElement(
              Label,
              { className: "sendbird-openchannel-og-message__top__right__description__message", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 },
              import_react58.default.createElement(TextFragment, { tokens }),
              ((_c = message === null || message === void 0 ? void 0 : message.updatedAt) !== null && _c !== void 0 ? _c : 0) > 0 && import_react58.default.createElement(Label, { key: uuidv4(), className: "sendbird-openchannel-og-message--word", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, stringSet.MESSAGE_EDITED)
            )
          )
        ),
        !isMobile && import_react58.default.createElement(
          "div",
          { className: "sendbird-openchannel-og-message__top__context-menu", ref: contextMenuRef, style: contextStyle },
          import_react58.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return showMenuTrigger({ message, userId, status }) && import_react58.default.createElement(
              IconButton,
              { className: "sendbird-openchannel-og-message__top__context-menu--icon", width: "32px", height: "32px", onClick: function() {
                toggleDropdown();
              } },
              import_react58.default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE, width: "24px", height: "24px" })
            );
          }, menuItems: function(closeDropdown) {
            return import_react58.default.createElement(
              MenuItems,
              { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown, openLeft: true },
              isFineCopy({ message, userId, status }) && import_react58.default.createElement(MenuItem, { className: "sendbird-openchannel-og-message__top__context-menu__copy", onClick: function() {
                copyToClipboard(message.message);
                closeDropdown();
              }, testID: "open_channel_og_message_menu_copy" }, stringSet.CONTEXT_MENU_DROPDOWN__COPY),
              !isEphemeral && isFineEdit({ message, userId, status }) && import_react58.default.createElement(MenuItem, { className: "sendbird-openchannel-og-message__top__context-menu__edit", onClick: function() {
                if (disabled) {
                  return;
                }
                showEdit(true);
                closeDropdown();
              }, testID: "open_channel_og_message_menu_edit" }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT),
              isFineResend({ message, userId, status }) && import_react58.default.createElement(MenuItem, { className: "sendbird-openchannel-og-message__top__context-menu__resend", onClick: function() {
                resendMessage(message);
                closeDropdown();
              }, testID: "open_channel_og_message_menu_resend" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND),
              !isEphemeral && isFineDelete({ message, userId, status }) && import_react58.default.createElement(MenuItem, { className: "sendbird-openchannel-og-message__top__context-menu__delete", onClick: function() {
                if (disabled) {
                  return;
                }
                showRemove(true);
                closeDropdown();
              }, testID: "open_channel_og_message_menu_delete" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)
            );
          } })
        )
      ),
      import_react58.default.createElement(
        "div",
        { className: "sendbird-openchannel-og-message__bottom" },
        import_react58.default.createElement(
          "div",
          { className: "sendbird-openchannel-og-message__bottom__og-tag", ref: mobileMenuRef },
          (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url) && import_react58.default.createElement(Label, { className: "sendbird-openchannel-og-message__bottom__og-tag__url", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, ogMetaData.url),
          (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.title) && import_react58.default.createElement(LinkLabel, { className: "sendbird-openchannel-og-message__bottom__og-tag__title", src: (_d = ogMetaData.url) !== null && _d !== void 0 ? _d : "", type: LabelTypography.SUBTITLE_2, color: LabelColors.PRIMARY }, ogMetaData.title),
          (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.description) && import_react58.default.createElement(Label, { className: "sendbird-openchannel-og-message__bottom__og-tag__description", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, ogMetaData.description),
          (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url) && import_react58.default.createElement("div", { className: "sendbird-openchannel-og-message__bottom__og-tag__thumbnail", role: "button", onClick: openLink, onKeyDown: openLink, tabIndex: 0 }, defaultImage && import_react58.default.createElement(ImageRenderer, { className: "sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image", url: defaultImage.url || "", alt: defaultImage.alt || "", height: "189px", defaultComponent: import_react58.default.createElement(
            "div",
            { className: "sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder" },
            import_react58.default.createElement(Icon, { type: IconTypes.THUMBNAIL_NONE, width: "56px", height: "56px" })
          ) }))
        ),
        (isPending || isFailed) && import_react58.default.createElement(
          "div",
          { className: "sendbird-openchannel-og-message__top__right__tail" },
          isPending && import_react58.default.createElement(
            Loader,
            { width: "16px", height: "16px" },
            import_react58.default.createElement(Icon, { className: "sendbird-openchannel-og-message__top__right__tail__pending", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
          ),
          isFailed && import_react58.default.createElement(Icon, { className: "sendbird-openchannel-og-message__top__right__tail__failed", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: "16px", height: "16px" })
        )
      )
    ),
    showContextMenu && import_react58.default.createElement(OpenChannelMobileMenu, { message, parentRef: mobileMenuRef, hideMenu: function() {
      setShowContextMenu(false);
    }, showRemove: function() {
      setShowContextMenu(false);
      showRemove(true);
    }, showEdit: function() {
      setShowContextMenu(false);
      showEdit(true);
    }, copyToClipboard: function() {
      setShowContextMenu(false);
      copyToClipboard(message === null || message === void 0 ? void 0 : message.message);
    }, resendMessage: function() {
      setShowContextMenu(false);
      resendMessage(message);
    } })
  );
}

// node_modules/@sendbird/uikit-react/ui/OpenchannelThumbnailMessage.js
var import_react59 = __toESM(require_react(), 1);
var import_react_dom33 = __toESM(require_react_dom(), 1);
var SUPPORTING_TYPES = {
  IMAGE: "IMAGE",
  VIDEO: "VIDEO",
  UNSUPPORTED: "UNSUPPORTED"
};
var SUPPORTED_MIMES = {
  IMAGE: [
    "image/jpeg",
    "image/jpg",
    "image/png",
    "image/gif",
    "image/webp"
  ],
  VIDEO: [
    "video/mpeg",
    "video/ogg",
    "video/webm",
    "video/mp4"
  ]
};
var getSupportingFileType = function(type) {
  if (SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0) {
    return SUPPORTING_TYPES.IMAGE;
  }
  if (SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0) {
    return SUPPORTING_TYPES.VIDEO;
  }
  return SUPPORTING_TYPES.UNSUPPORTED;
};
function OpenchannelThumbnailMessage(_a) {
  var _b;
  var className = _a.className, message = _a.message, isOperator3 = _a.isOperator, _c = _a.isEphemeral, isEphemeral = _c === void 0 ? false : _c, disabled = _a.disabled, userId = _a.userId, chainTop = _a.chainTop, onClick = _a.onClick, showRemove = _a.showRemove, resendMessage = _a.resendMessage;
  var type = message.type, url = message.url, thumbnails = message.thumbnails, localUrl = message.localUrl;
  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;
  var thumbnailUrl = thumbnails && thumbnails.length > 0 && thumbnails[0].url || null;
  var _d = useLocalization(), stringSet = _d.stringSet, dateLocale = _d.dateLocale;
  var _e = (0, import_react59.useContext)(UserProfileContext), disableUserProfile = _e.disableUserProfile, renderUserProfile = _e.renderUserProfile;
  var _f = (0, import_react59.useState)(360), messageWidth = _f[0], setMessageWidth = _f[1];
  var _g = (0, import_react59.useState)(false), contextMenu = _g[0], setContextMenu = _g[1];
  var messageRef = (0, import_react59.useRef)(null);
  var mobileMenuRef = (0, import_react59.useRef)(null);
  var contextMenuRef = (0, import_react59.useRef)(null);
  var avatarRef = (0, import_react59.useRef)(null);
  var onLongPress = useLongPress({
    onLongPress: function() {
      setContextMenu(true);
    },
    onClick: function() {
      onClick(true);
    }
  });
  var isMobile = useMediaQueryContext().isMobile;
  var memorizedThumbnailPlaceHolder = (0, import_react59.useMemo)(function() {
    return function(type2) {
      return function(_a2) {
        var style = _a2.style;
        return (
          // eslint-disable-line
          import_react59.default.createElement(
            "div",
            { style },
            import_react59.default.createElement(Icon, { type: type2, fillColor: IconColors.ON_BACKGROUND_2, width: "56px", height: "56px" })
          )
        );
      };
    };
  }, []);
  var isMessageSent = checkIsSent(status);
  var isPending = checkIsPending(status);
  var isFailed = checkIsFailed(status);
  var sender = getSenderFromMessage(message);
  (0, import_react59.useEffect)(function() {
    var _a2, _b2;
    var thumbnailWidth = ((_b2 = (_a2 = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a2 === void 0 ? void 0 : _a2.clientWidth) !== null && _b2 !== void 0 ? _b2 : 0) - 80;
    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);
  }, []);
  return import_react59.default.createElement(
    import_react59.default.Fragment,
    null,
    import_react59.default.createElement(
      "div",
      { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
        "sendbird-openchannel-thumbnail-message"
      ], false).join(" "), ref: messageRef },
      import_react59.default.createElement("div", { className: "sendbird-openchannel-thumbnail-message__left" }, !chainTop && import_react59.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return import_react59.default.createElement(Avatar$1, { className: "sendbird-openchannel-thumbnail-message__left__avatar", src: sender.profileUrl || "", ref: avatarRef, width: "28px", height: "28px", onClick: function() {
          if (!disableUserProfile) {
            toggleDropdown();
          }
        } });
      }, menuItems: function(closeDropdown) {
        return renderUserProfile ? renderUserProfile({
          user: sender,
          close: closeDropdown,
          currentUserId: userId,
          avatarRef
        }) : import_react59.default.createElement(
          MenuItems,
          { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown, style: { paddingTop: "0px", paddingBottom: "0px" } },
          import_react59.default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })
        );
      } })),
      import_react59.default.createElement(
        "div",
        { className: "sendbird-openchannel-thumbnail-message__right" },
        !chainTop && import_react59.default.createElement(
          "div",
          { className: "sendbird-openchannel-thumbnail-message__right__title" },
          import_react59.default.createElement(Label, { className: "sendbird-openchannel-thumbnail-message__right__title__sender-name", type: LabelTypography.CAPTION_2, color: isOperator3 ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName || sender.nickname || sender.userId)),
          import_react59.default.createElement(Label, { className: "sendbird-openchannel-thumbnail-message__right__title__sent-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message.createdAt, "p", {
            locale: dateLocale
          }))
        ),
        import_react59.default.createElement(
          "div",
          { className: "sendbird-openchannel-thumbnail-message__right__body", ref: mobileMenuRef },
          import_react59.default.createElement(
            "div",
            __assign({ className: "sendbird-openchannel-thumbnail-message__right__body__wrap", role: "button", onClick: function() {
              if (isMessageSent) {
                onClick(true);
              }
            }, onKeyDown: function() {
              if (isMessageSent) {
                onClick(true);
              }
            }, tabIndex: 0 }, isMobile ? __assign({}, onLongPress) : {}),
            import_react59.default.createElement("div", { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__overlay" }),
            (_b = {}, _b[SUPPORTING_TYPES.VIDEO] = url || localUrl ? import_react59.default.createElement(
              "div",
              { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__video" },
              thumbnailUrl ? import_react59.default.createElement(ImageRenderer, { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__video", url: thumbnailUrl, width: messageWidth, height: "270px", alt: "image", placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY) }) : import_react59.default.createElement(
                "video",
                { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__video__video" },
                import_react59.default.createElement("source", { src: url || localUrl, type })
              ),
              import_react59.default.createElement(Icon, { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon", type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_2, width: "56px", height: "56px" })
            ) : import_react59.default.createElement(Icon, { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon", type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: "56px", height: "56px" }), _b[SUPPORTING_TYPES.IMAGE] = url || localUrl ? import_react59.default.createElement(ImageRenderer, { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__image", url: thumbnailUrl || url || localUrl || "", alt: "image", width: messageWidth, height: "270px", placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO) }) : import_react59.default.createElement(Icon, { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon", type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: "56px", height: "56px" }), _b[SUPPORTING_TYPES.UNSUPPORTED] = import_react59.default.createElement(Icon, { className: "sendbird-openchannel-thumbnail-message__right__body__wrap__unknown", type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: "56px", height: "56px" }), _b)[getSupportingFileType(type)]
          )
        ),
        (isPending || isFailed) && import_react59.default.createElement(
          "div",
          { className: "sendbird-openchannel-thumbnail-message__right__tail" },
          isPending && import_react59.default.createElement(
            Loader,
            { width: "16px", height: "16px" },
            import_react59.default.createElement(Icon, { className: "sendbird-openchannel-thumbnail-message__right__tail__pending", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
          ),
          isFailed && import_react59.default.createElement(Icon, { className: "sendbird-openchannel-thumbnail-message__right__tail__failed", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: "16px", height: "16px" })
        )
      ),
      !isMobile && import_react59.default.createElement("div", { className: "sendbird-openchannel-thumbnail-message__context-menu", ref: contextMenuRef }, (isFineResend({ message, userId, status }) || !isEphemeral) && import_react59.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return showMenuTrigger({ message, userId, status }) && import_react59.default.createElement(
          IconButton,
          { className: "sendbird-openchannel-thumbnail-message__context-menu--icon", width: "32px", height: "32px", onClick: toggleDropdown },
          import_react59.default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE, width: "24px", height: "24px" })
        );
      }, menuItems: function(closeDropdown) {
        return import_react59.default.createElement(
          MenuItems,
          { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown, openLeft: true },
          isFineResend({ message, userId, status }) && import_react59.default.createElement(MenuItem, { onClick: function() {
            resendMessage(message);
            closeDropdown();
          }, testID: "open_channel_thumbnail_message_menu_resend" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND),
          !isEphemeral && isFineDelete({ message, userId, status }) && import_react59.default.createElement(MenuItem, { onClick: function() {
            if (disabled) {
              return;
            }
            showRemove(true);
            closeDropdown();
          }, testID: "open_channel_thumbnail_message_menu_delete" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)
        );
      } }))
    ),
    contextMenu && import_react59.default.createElement(OpenChannelMobileMenu, { message, parentRef: mobileMenuRef, hideMenu: function() {
      setContextMenu(false);
    }, showRemove: function() {
      setContextMenu(false);
      showRemove(true);
    }, resendMessage: function() {
      setContextMenu(false);
      resendMessage(message);
    } })
  );
}

// node_modules/@sendbird/uikit-react/ui/OpenchannelFileMessage.js
var import_react60 = __toESM(require_react(), 1);
var import_react_dom34 = __toESM(require_react_dom(), 1);
var checkFileType = function(fileUrl) {
  var audioFile = /(\.mp3)$/i;
  var gifFile = /(\.gif)$/i;
  if (audioFile.test(fileUrl)) {
    return IconTypes.FILE_AUDIO;
  }
  if (gifFile.test(fileUrl)) {
    return IconTypes.GIF;
  }
  return IconTypes.FILE_DOCUMENT;
};
var truncate = function(fullStr, strLen) {
  if (fullStr === null || fullStr === void 0)
    return "";
  if (fullStr.length <= strLen)
    return fullStr;
  var separator = "...";
  var sepLen = separator.length;
  var charsToShow = strLen - sepLen;
  var frontChars = Math.ceil(charsToShow / 2);
  var backChars = Math.floor(charsToShow / 2);
  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);
};
function OpenChannelFileMessage(_a) {
  var className = _a.className, message = _a.message, isOperator3 = _a.isOperator, _b = _a.isEphemeral, isEphemeral = _b === void 0 ? false : _b, userId = _a.userId, disabled = _a.disabled, chainTop = _a.chainTop, showRemove = _a.showRemove, resendMessage = _a.resendMessage;
  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;
  var _c = useLocalization(), dateLocale = _c.dateLocale, stringSet = _c.stringSet;
  var contextMenuRef = (0, import_react60.useRef)(null);
  var mobileMenuRef = (0, import_react60.useRef)(null);
  var avatarRef = (0, import_react60.useRef)(null);
  var _d = (0, import_react60.useContext)(UserProfileContext), disableUserProfile = _d.disableUserProfile, renderUserProfile = _d.renderUserProfile;
  var isMobile = useMediaQueryContext().isMobile;
  var openFileUrl = function() {
    return openURL(message.url);
  };
  var isPending = checkIsPending(status);
  var isFailed = checkIsFailed(status);
  var sender = getSenderFromMessage(message);
  var _e = (0, import_react60.useState)(false), contextMenu = _e[0], setContextMenu = _e[1];
  var longPress = useLongPress({
    onLongPress: function() {
      if (isMobile) {
        setContextMenu(true);
      }
    },
    onClick: openFileUrl
  }, { delay: 300 });
  return import_react60.default.createElement(
    import_react60.default.Fragment,
    null,
    import_react60.default.createElement(
      "div",
      { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
        "sendbird-openchannel-file-message"
      ], false).join(" "), ref: mobileMenuRef },
      import_react60.default.createElement("div", { className: "sendbird-openchannel-file-message__left" }, !chainTop && import_react60.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return import_react60.default.createElement(Avatar$1, { className: "sendbird-openchannel-file-message__left__avatar", src: sender.profileUrl || "", ref: avatarRef, width: "28px", height: "28px", onClick: function() {
          if (!disableUserProfile) {
            toggleDropdown();
          }
        } });
      }, menuItems: function(closeDropdown) {
        return renderUserProfile ? renderUserProfile({
          user: sender,
          close: closeDropdown,
          currentUserId: userId,
          avatarRef
        }) : import_react60.default.createElement(
          MenuItems,
          { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown, style: { paddingTop: "0px", paddingBottom: "0px" } },
          import_react60.default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })
        );
      } })),
      import_react60.default.createElement(
        "div",
        { className: "sendbird-openchannel-file-message__right" },
        !chainTop && import_react60.default.createElement(
          "div",
          { className: "sendbird-openchannel-file-message__right__title" },
          import_react60.default.createElement(Label, { className: "sendbird-openchannel-file-message__right__title__sender-name", type: LabelTypography.CAPTION_2, color: isOperator3 ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName || sender.nickname || sender.userId)),
          import_react60.default.createElement(Label, { className: "sendbird-openchannel-file-message__right__title__sent-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message.createdAt, "p", {
            locale: dateLocale
          }))
        ),
        import_react60.default.createElement(
          "div",
          __assign({ className: "sendbird-openchannel-file-message__right__body" }, isMobile ? __assign({}, longPress) : {}),
          checkFileType(message.url) && import_react60.default.createElement(Icon, { className: "sendbird-openchannel-file-message__right__body__icon", type: checkFileType(message.url), fillColor: IconColors.PRIMARY, width: "48px", height: "48px" }),
          import_react60.default.createElement(
            TextButton,
            { className: "sendbird-openchannel-file-message__right__body__file-name", onClick: openFileUrl },
            import_react60.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, truncate(message.name || message.url, 40))
          )
        ),
        (isPending || isFailed) && import_react60.default.createElement(
          "div",
          { className: "sendbird-openchannel-file-message__right__tail" },
          isPending && import_react60.default.createElement(
            Loader,
            { width: "16px", height: "16px" },
            import_react60.default.createElement(Icon, { className: "sendbird-openchannel-file-message__right__tail__pending", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
          ),
          isFailed && import_react60.default.createElement(Icon, { className: "sendbird-openchannel-file-message__right__tail__failed", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: "16px", height: "16px" })
        )
      ),
      !isMobile && import_react60.default.createElement("div", { className: "sendbird-openchannel-file-message__context-menu", ref: contextMenuRef }, (isFineResend({ message, userId, status }) || !isEphemeral) && import_react60.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return showMenuTrigger({ message, userId, status }) && import_react60.default.createElement(
          IconButton,
          { className: "sendbird-openchannel-file-message__context-menu__icon", width: "32px", height: "32px", onClick: toggleDropdown },
          import_react60.default.createElement(Icon, { type: IconTypes.MORE, width: "24px", height: "24px" })
        );
      }, menuItems: function(closeDropdown) {
        return import_react60.default.createElement(
          MenuItems,
          { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown, openLeft: true },
          isFineResend({ message, userId, status }) && import_react60.default.createElement(MenuItem, { onClick: function() {
            if (disabled) {
              return;
            }
            resendMessage(message);
            closeDropdown();
          }, testID: "open_channel_file_message_context_menu_resend" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND),
          !isEphemeral && isFineDelete({ message, userId, status }) && import_react60.default.createElement(MenuItem, { onClick: function() {
            if (disabled) {
              return;
            }
            showRemove(true);
            closeDropdown();
          }, testID: "open_channel_file_message_context_menu_delete" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)
        );
      } }))
    ),
    contextMenu && import_react60.default.createElement(OpenChannelMobileMenu, { message, hideMenu: function() {
      setContextMenu(false);
    }, parentRef: mobileMenuRef, showRemove: function() {
      setContextMenu(false);
      showRemove(true);
    } })
  );
}

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelMessage.js
var import_react_dom35 = __toESM(require_react_dom(), 1);
function RemoveMessageModal2(_a) {
  var message = _a.message, onCloseModal = _a.onCloseModal, onDeleteMessage = _a.onDeleteMessage;
  var stringSet = (0, import_react61.useContext)(LocalizationContext).stringSet;
  return import_react61.default.createElement(Modal, { onCancel: onCloseModal, onSubmit: onDeleteMessage, submitText: stringSet.MESSAGE_MENU__DELETE, titleText: getModalDeleteMessageTitle(stringSet, message) });
}
var MessageTypes = {
  ADMIN: "ADMIN",
  USER: "USER",
  FILE: "FILE",
  THUMBNAIL: "THUMBNAIL",
  OG: "OG",
  UNKNOWN: "UNKNOWN"
};
var SendingMessageStatus = {
  NONE: "none",
  SUCCEEDED: "succeeded",
  FAILED: "failed",
  PENDING: "pending"
};
var getMessageType = function(message, options) {
  var _a, _b;
  var isOgMessageEnabledInOpenChannel = options === null || options === void 0 ? void 0 : options.isOgMessageEnabledInOpenChannel;
  if (((_a = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _a === void 0 ? void 0 : _a.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === "user") {
    return (message === null || message === void 0 ? void 0 : message.ogMetaData) && isOgMessageEnabledInOpenChannel ? MessageTypes.OG : MessageTypes.USER;
  }
  if ((_b = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _b === void 0 ? void 0 : _b.call(message)) {
    return MessageTypes.ADMIN;
  }
  if ((message === null || message === void 0 ? void 0 : message.messageType) === "file") {
    return isImage(message.type) || isVideo(message.type) ? MessageTypes.THUMBNAIL : MessageTypes.FILE;
  }
  return MessageTypes.UNKNOWN;
};
function OpenChannelMessage(props) {
  var _a;
  var _b;
  var message = props.message, chainTop = props.chainTop, chainBottom = props.chainBottom, hasSeparator = props.hasSeparator, renderMessage = props.renderMessage;
  var _c = useOpenChannelContext(), currentOpenChannel = _c.currentOpenChannel, deleteMessage = _c.deleteMessage, updateMessage = _c.updateMessage, resendMessage = _c.resendMessage;
  var _d = useLocalization(), dateLocale = _d.dateLocale, stringSet = _d.stringSet;
  var editDisabled = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isFrozen;
  var globalState = useSendbirdStateContext();
  var currentUserId = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.userId;
  var isOgMessageEnabledInOpenChannel = globalState.config.openChannel.enableOgtag;
  var sender;
  if ((message === null || message === void 0 ? void 0 : message.messageType) !== "admin") {
    sender = message === null || message === void 0 ? void 0 : message.sender;
  }
  var _e = (0, import_react61.useState)(false), showEdit = _e[0], setShowEdit = _e[1];
  var _f = (0, import_react61.useState)(false), showRemove = _f[0], setShowRemove = _f[1];
  var _g = (0, import_react61.useState)(false), showFileViewer = _g[0], setShowFileViewer = _g[1];
  var editMessageInputRef = (0, import_react61.useRef)(null);
  var isByMe = false;
  if (sender && (message === null || message === void 0 ? void 0 : message.messageType) !== "admin") {
    isByMe = currentUserId === sender.userId || (message === null || message === void 0 ? void 0 : message.sendingStatus) === SendingMessageStatus.PENDING || (message === null || message === void 0 ? void 0 : message.sendingStatus) === SendingMessageStatus.FAILED;
  }
  if (renderMessage) {
    return import_react61.default.createElement("div", { className: "sendbird-msg-hoc sendbird-msg--scroll-ref", "data-testid": "sendbird-message-hoc" }, renderMessage({ message, chainTop, chainBottom }));
  }
  if ((message === null || message === void 0 ? void 0 : message.messageType) === "user" && showEdit) {
    return import_react61.default.createElement(MessageInput, { isEdit: true, channel: currentOpenChannel, disabled: editDisabled, ref: editMessageInputRef, message, onUpdateMessage: function(_a2) {
      var messageId = _a2.messageId, message2 = _a2.message;
      updateMessage(messageId, message2);
      setShowEdit(false);
    }, onCancelEdit: function() {
      setShowEdit(false);
    } });
  }
  return import_react61.default.createElement(
    "div",
    { className: "sendbird-msg-hoc sendbird-msg--scroll-ref", "data-testid": "sendbird-message-hoc" },
    import_react61.default.createElement(
      import_react61.default.Fragment,
      null,
      hasSeparator && (message === null || message === void 0 ? void 0 : message.createdAt) && import_react61.default.createElement(
        DateSeparator,
        null,
        import_react61.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message === null || message === void 0 ? void 0 : message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, { locale: dateLocale }))
      ),
      (_a = {}, _a[MessageTypes.ADMIN] = function() {
        if ((message === null || message === void 0 ? void 0 : message.messageType) === "admin") {
          return import_react61.default.createElement(OpenChannelAdminMessage, { message });
        }
      }(), _a[MessageTypes.FILE] = function() {
        var _a2;
        if ((message === null || message === void 0 ? void 0 : message.messageType) === "file") {
          return import_react61.default.createElement(OpenChannelFileMessage, { message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, disabled: editDisabled, userId: currentUserId, showRemove: setShowRemove, resendMessage, chainTop, chainBottom });
        }
      }(), _a[MessageTypes.OG] = function() {
        var _a2;
        if ((message === null || message === void 0 ? void 0 : message.messageType) === "user" && isOgMessageEnabledInOpenChannel) {
          return import_react61.default.createElement(OpenChannelOGMessage, { message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, userId: currentUserId, showEdit: setShowEdit, disabled: editDisabled, showRemove: setShowRemove, resendMessage, chainTop, chainBottom });
        }
      }(), _a[MessageTypes.THUMBNAIL] = function() {
        var _a2;
        if ((message === null || message === void 0 ? void 0 : message.messageType) === "file") {
          return import_react61.default.createElement(OpenchannelThumbnailMessage, { message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, disabled: editDisabled, userId: currentUserId, showRemove: setShowRemove, resendMessage, onClick: setShowFileViewer, chainTop, chainBottom });
        }
      }(), _a[MessageTypes.USER] = function() {
        var _a2;
        if ((message === null || message === void 0 ? void 0 : message.messageType) === "user") {
          return import_react61.default.createElement(OpenchannelUserMessage, { message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, userId: currentUserId, disabled: editDisabled, showEdit: setShowEdit, showRemove: setShowRemove, resendMessage, chainTop, chainBottom });
        }
      }(), _a[MessageTypes.UNKNOWN] = /* @__PURE__ */ function() {
      }(), _a)[getMessageType(message, { isOgMessageEnabledInOpenChannel })],
      showRemove && import_react61.default.createElement(RemoveMessageModal2, { message, onCloseModal: function() {
        return setShowRemove(false);
      }, onDeleteMessage: function() {
        if ((message === null || message === void 0 ? void 0 : message.messageType) !== "admin") {
          deleteMessage(message);
        }
      } }),
      showFileViewer && (message === null || message === void 0 ? void 0 : message.messageType) === "file" && import_react61.default.createElement(FileViewer, { onClose: function() {
        return setShowFileViewer(false);
      }, message, onDelete: function() {
        return deleteMessage(message);
      }, isByMe })
    )
  );
}

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelMessageList.js
var import_react_dom36 = __toESM(require_react_dom(), 1);
function OpenChannelMessageList(props, ref) {
  var _a = useOpenChannelContext(), _b = _a.isMessageGroupingEnabled, isMessageGroupingEnabled = _b === void 0 ? true : _b, allMessages = _a.allMessages, hasMore = _a.hasMore, onScroll = _a.onScroll;
  var store = useSendbirdStateContext();
  var userId = store.config.userId;
  var localRef = (0, import_react62.useRef)(null);
  var scrollRef = ref || localRef;
  var _c = (0, import_react62.useState)(false), showScrollDownButton = _c[0], setShowScrollDownButton = _c[1];
  var scrollToBottom = function() {
    if (scrollRef && "current" in scrollRef && scrollRef.current) {
      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);
      setShowScrollDownButton(false);
    }
  };
  var handleOnScroll = useHandleOnScrollCallback({
    setShowScrollDownButton,
    hasMore,
    onScroll,
    scrollRef
  });
  var memoizedMessageList = (0, import_react62.useMemo)(function() {
    var _a2;
    if (allMessages.length > 0) {
      return allMessages.map(function(message, index) {
        var _a3;
        var previousMessage = allMessages[index - 1];
        var nextMessage = allMessages[index - 1];
        var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;
        var currentCreatedAt = message === null || message === void 0 ? void 0 : message.createdAt;
        var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));
        var _b2 = isMessageGroupingEnabled ? compareMessagesForGrouping(previousMessage, message, nextMessage) : [false, false], chainTop = _b2[0], chainBottom = _b2[1];
        var isByMe = ((_a3 = message === null || message === void 0 ? void 0 : message.sender) === null || _a3 === void 0 ? void 0 : _a3.userId) === userId;
        var key = (message === null || message === void 0 ? void 0 : message.messageId) || (message === null || message === void 0 ? void 0 : message.reqId);
        return import_react62.default.createElement(
          MessageProvider,
          { message, isByMe, key },
          import_react62.default.createElement(OpenChannelMessage, { message, chainTop, chainBottom, hasSeparator, renderMessage: props === null || props === void 0 ? void 0 : props.renderMessage })
        );
      });
    }
    return ((_a2 = props === null || props === void 0 ? void 0 : props.renderPlaceHolderEmptyList) === null || _a2 === void 0 ? void 0 : _a2.call(props)) || import_react62.default.createElement(PlaceHolder, { className: "sendbird-openchannel-conversation-scroll__container__place-holder", type: PlaceHolderTypes.NO_MESSAGES });
  }, [allMessages]);
  return import_react62.default.createElement(
    "div",
    { className: "sendbird-openchannel-conversation-scroll" },
    import_react62.default.createElement(
      "div",
      { className: "sendbird-openchannel-conversation-scroll__container" },
      import_react62.default.createElement("div", { className: "sendbird-openchannel-conversation-scroll__container__padding" }),
      import_react62.default.createElement("div", { className: [
        "sendbird-openchannel-conversation-scroll__container__item-container",
        allMessages.length > 0 ? "" : "no-messages"
      ].join(" "), onScroll: handleOnScroll, ref: scrollRef }, memoizedMessageList)
    ),
    showScrollDownButton && import_react62.default.createElement(
      "div",
      { className: "sendbird-openchannel-conversation-scroll__container__scroll-bottom-button", onClick: scrollToBottom, onKeyDown: scrollToBottom, tabIndex: 0, role: "button" },
      import_react62.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.CONTENT })
    )
  );
}
var OpenChannelMessageList$1 = import_react62.default.forwardRef(OpenChannelMessageList);

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelUI.js
var import_react_dom37 = __toESM(require_react_dom(), 1);
var COMPONENT_CLASS_NAME = "sendbird-openchannel-conversation";
var OpenChannelUI = function(_a) {
  var renderMessage = _a.renderMessage, renderHeader = _a.renderHeader, renderPlaceHolderEmptyList = _a.renderPlaceHolderEmptyList, renderPlaceHolderError = _a.renderPlaceHolderError, renderPlaceHolderLoading = _a.renderPlaceHolderLoading, renderMessageInput = _a.renderMessageInput, renderInput = _a.renderInput;
  var _b = useOpenChannelContext(), currentOpenChannel = _b.currentOpenChannel, amIBanned = _b.amIBanned, loading = _b.loading, isInvalid = _b.isInvalid, messageInputRef = _b.messageInputRef, conversationScrollRef = _b.conversationScrollRef;
  if (!currentOpenChannel || !(currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.url) || amIBanned) {
    return (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) || import_react63.default.createElement(
      "div",
      { className: COMPONENT_CLASS_NAME },
      import_react63.default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS })
    );
  }
  if (loading) {
    return (renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading()) || import_react63.default.createElement(
      "div",
      { className: COMPONENT_CLASS_NAME },
      import_react63.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING })
    );
  }
  if (isInvalid) {
    return (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) || import_react63.default.createElement(
      "div",
      { className: COMPONENT_CLASS_NAME },
      import_react63.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG })
    );
  }
  var renderInputComponent = renderMessageInput || renderInput;
  return import_react63.default.createElement(
    "div",
    { className: COMPONENT_CLASS_NAME },
    (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || import_react63.default.createElement(OpenchannelConversationHeader, null),
    (currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isFrozen) && import_react63.default.createElement(FrozenNotification2, null),
    import_react63.default.createElement(OpenChannelMessageList$1, { ref: conversationScrollRef, renderMessage, renderPlaceHolderEmptyList }),
    (renderInputComponent === null || renderInputComponent === void 0 ? void 0 : renderInputComponent()) || import_react63.default.createElement(OpenChannelInput, { ref: messageInputRef })
  );
};

// node_modules/@sendbird/uikit-react/OpenChannel.js
var import_react_dom38 = __toESM(require_react_dom(), 1);
var OpenChannel = function(props) {
  return import_react64.default.createElement(
    OpenChannelProvider,
    { channelUrl: props === null || props === void 0 ? void 0 : props.channelUrl, isMessageGroupingEnabled: props === null || props === void 0 ? void 0 : props.isMessageGroupingEnabled, queries: props === null || props === void 0 ? void 0 : props.queries, messageLimit: props === null || props === void 0 ? void 0 : props.messageLimit, onBeforeSendUserMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendUserMessage, onBeforeSendFileMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendFileMessage, onChatHeaderActionClick: props === null || props === void 0 ? void 0 : props.onChatHeaderActionClick, disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile, onBackClick: props === null || props === void 0 ? void 0 : props.onBackClick },
    import_react64.default.createElement(OpenChannelUI, { renderMessage: props === null || props === void 0 ? void 0 : props.renderMessage, renderHeader: props === null || props === void 0 ? void 0 : props.renderHeader, renderInput: props === null || props === void 0 ? void 0 : props.renderInput, renderMessageInput: props === null || props === void 0 ? void 0 : props.renderMessageInput, renderPlaceHolderEmptyList: props === null || props === void 0 ? void 0 : props.renderPlaceHolderEmptyList, renderPlaceHolderError: props === null || props === void 0 ? void 0 : props.renderPlaceHolderError, renderPlaceHolderLoading: props === null || props === void 0 ? void 0 : props.renderPlaceHolderLoading })
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings.js
var import_react74 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelSettingsUI.js
var import_react73 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannelSettings/context.js
var import_react65 = __toESM(require_react(), 1);
var OpenChannelSettingsContext = import_react65.default.createContext(null);
var OpenChannelSettingsProvider = function(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  var children = props.children, channelUrl = props.channelUrl, onCloseClick = props.onCloseClick, onChannelModified = props.onChannelModified, onBeforeUpdateChannel = props.onBeforeUpdateChannel, onDeleteChannel = props.onDeleteChannel;
  var globalStore = useSendbirdStateContext();
  var sdk = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;
  var isSDKInitialized = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.initialized;
  var logger = (_e = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _e === void 0 ? void 0 : _e.logger;
  var currentUserId = (_f = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _f === void 0 ? void 0 : _f.userId;
  var _j = (0, import_react65.useState)(null), currentChannel = _j[0], setChannel = _j[1];
  var _k = (0, import_react65.useState)(false), isChannelInitialized = _k[0], setChannelInitialized = _k[1];
  (0, import_react65.useEffect)(function() {
    if (!channelUrl || !sdk.openChannel) {
      setChannel(null);
      return;
    }
    sdk.openChannel.getChannel(channelUrl).then(function(channel) {
      logger.info("open channel setting: fetched", channel);
      channel.enter().then(function() {
        setChannel(channel);
        logger.info("OpenChannelSettings | Succeeded to enter channel", channel === null || channel === void 0 ? void 0 : channel.url);
        setChannelInitialized(true);
      }).catch(function(error) {
        setChannel(null);
        logger.warning("OpenChannelSettings | Failed to enter channel", error);
      });
    }).catch(function(error) {
      logger.error("open channel setting: error fetching", error);
      setChannel(null);
    });
    return function() {
      if (currentChannel && currentChannel.exit) {
        currentChannel.exit().then(function() {
          logger.info("OpenChannelSettings | Succeeded to exit channel", currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url);
        }).catch(function(error) {
          logger.warning("OpenChannelSettings | Failed to exit channel", error);
        });
      }
    };
  }, [channelUrl, isSDKInitialized]);
  (0, import_react65.useEffect)(function() {
    var _a2;
    var channelHandlerId = uuidv4();
    if (currentChannel !== null && ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a2 === void 0 ? void 0 : _a2.addOpenChannelHandler)) {
      var channelHandlerParams = new Ae({
        onOperatorUpdated: function(channel) {
          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
            setChannel(channel);
          }
        },
        onUserMuted: function(channel, user) {
          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {
            setChannel(channel);
          }
        },
        onUserUnmuted: function(channel, user) {
          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {
            setChannel(channel);
          }
        },
        onUserBanned: function(channel, user) {
          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {
            setChannel(null);
          }
        },
        onUserUnbanned: function(channel, user) {
          if ((user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {
            setChannel(channel);
          }
        },
        onChannelChanged: function(channel) {
          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
            setChannel(channel);
          }
        },
        onChannelDeleted: function(channelUrl2) {
          if (channelUrl2 === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
            setChannel(null);
          }
        }
      });
      sdk.openChannel.addOpenChannelHandler(channelHandlerId, channelHandlerParams);
    }
    return function() {
      var _a3, _b2, _c2;
      if (((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a3 === void 0 ? void 0 : _a3.removeOpenChannelHandler) && channelHandlerId) {
        logger.info("OpenChannelSettings | Removing channel handlers", channelHandlerId);
        (_c2 = (_b2 = sdk.openChannel).removeOpenChannelHandler) === null || _c2 === void 0 ? void 0 : _c2.call(_b2, channelHandlerId);
      }
    };
  }, [channelUrl]);
  return import_react65.default.createElement(
    OpenChannelSettingsContext.Provider,
    { value: {
      channelUrl,
      channel: currentChannel,
      isChannelInitialized,
      setChannel,
      onCloseClick,
      onChannelModified,
      onBeforeUpdateChannel,
      onDeleteChannel
    } },
    import_react65.default.createElement(UserProfileProvider, { isOpenChannel: true, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile, disableUserProfile: (_g = props === null || props === void 0 ? void 0 : props.disableUserProfile) !== null && _g !== void 0 ? _g : (_h = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _h === void 0 ? void 0 : _h.disableUserProfile }, children)
  );
};
var useOpenChannelSettingsContext = function() {
  var context = import_react65.default.useContext(OpenChannelSettingsContext);
  if (!context)
    throw new Error("OpenChannelSettingsContext not found. Use within the OpenChannelSettings module.");
  return context;
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OperatorUI.js
var import_react72 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelProfile.js
var import_react68 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/OpenChannelAvatar.js
var import_react66 = __toESM(require_react(), 1);
function ChannelAvatar2(_a) {
  var channel = _a.channel, theme = _a.theme, _b = _a.height, height = _b === void 0 ? 56 : _b, _c = _a.width, width = _c === void 0 ? 56 : _c;
  var stringSet = (0, import_react66.useContext)(LocalizationContext).stringSet;
  var memoizedAvatar = (0, import_react66.useMemo)(function() {
    return import_react66.default.createElement(Avatar$1, { className: "sendbird-chat-header__avatar--open-channel", src: getOpenChannelAvatar(channel), width: "".concat(width, "px"), height: "".concat(height, "px"), alt: (channel === null || channel === void 0 ? void 0 : channel.name) || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE });
  }, [channel === null || channel === void 0 ? void 0 : channel.coverUrl, theme]);
  return import_react66.default.createElement(import_react66.default.Fragment, null, memoizedAvatar);
}

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/EditDetailsModal.js
var import_react67 = __toESM(require_react(), 1);
var import_react_dom39 = __toESM(require_react_dom(), 1);
var EditDetails2 = function(props) {
  var onCancel = props.onCancel;
  var globalState = useSendbirdStateContext();
  var _a = globalState.config, logger = _a.logger, theme = _a.theme, pubSub = _a.pubSub;
  var _b = useOpenChannelSettingsContext(), channel = _b.channel, onBeforeUpdateChannel = _b.onBeforeUpdateChannel, onChannelModified = _b.onChannelModified, setChannel = _b.setChannel;
  var inputRef = (0, import_react67.useRef)(null);
  var formRef = (0, import_react67.useRef)(null);
  var hiddenInputRef = (0, import_react67.useRef)(null);
  var _c = (0, import_react67.useState)(null), currentImg = _c[0], setCurrentImg = _c[1];
  var _d = (0, import_react67.useState)(null), newFile = _d[0], setNewFile = _d[1];
  var stringSet = (0, import_react67.useContext)(LocalizationContext).stringSet;
  var title = channel === null || channel === void 0 ? void 0 : channel.name;
  return import_react67.default.createElement(
    Modal,
    { isFullScreenOnMobile: true, titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE, submitText: stringSet.BUTTON__SAVE, onCancel, onSubmit: function() {
      var _a2, _b2, _c2, _d2, _e;
      if (title !== "" && !((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.value)) {
        if ((_b2 = formRef.current) === null || _b2 === void 0 ? void 0 : _b2.reportValidity) {
          formRef.current.reportValidity();
        }
        return;
      }
      var currentTitle = (_d2 = (_c2 = inputRef.current) === null || _c2 === void 0 ? void 0 : _c2.value) !== null && _d2 !== void 0 ? _d2 : "";
      var currentImg2 = newFile;
      logger.info("ChannelSettings: Channel information being updated");
      var params = onBeforeUpdateChannel ? onBeforeUpdateChannel(currentTitle, currentImg2, (_e = channel === null || channel === void 0 ? void 0 : channel.data) !== null && _e !== void 0 ? _e : "") : {
        name: currentTitle,
        coverUrlOrImage: currentImg2 !== null && currentImg2 !== void 0 ? currentImg2 : void 0,
        data: channel === null || channel === void 0 ? void 0 : channel.data
      };
      logger.info("ChannelSettings: Updating channel information", params);
      channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function(updatedChannel) {
        logger.info("ChannelSettings: Channel information update succeeded", updatedChannel);
        onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(updatedChannel);
        setChannel === null || setChannel === void 0 ? void 0 : setChannel(updatedChannel);
        pubSub === null || pubSub === void 0 ? void 0 : pubSub.publish(pubSubTopics.UPDATE_OPEN_CHANNEL, updatedChannel);
      }).catch(function(error) {
        logger.error("ChannelSettings: Channel infomation update failed", error);
        setChannel === null || setChannel === void 0 ? void 0 : setChannel(null);
      });
      onCancel();
    }, type: ButtonTypes.PRIMARY },
    import_react67.default.createElement(
      "form",
      { className: "channel-profile-form", ref: formRef, onSubmit: function(e) {
        e.preventDefault();
      } },
      import_react67.default.createElement(
        "div",
        { className: "channel-profile-form__img-section" },
        import_react67.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE),
        import_react67.default.createElement("div", { className: "channel-profile-form__avatar" }, currentImg ? import_react67.default.createElement(Avatar$1, { height: "80px", width: "80px", src: currentImg }) : import_react67.default.createElement(ChannelAvatar2, { height: 80, width: 80, channel, theme })),
        import_react67.default.createElement("input", { ref: hiddenInputRef, type: "file", accept: "image/gif, image/jpeg, image/png", style: { display: "none" }, onChange: function(e) {
          if (e.target.files) {
            setCurrentImg(URL.createObjectURL(e.target.files[0]));
            setNewFile(e.target.files[0]);
          }
          if (hiddenInputRef.current)
            hiddenInputRef.current.value = "";
        } }),
        import_react67.default.createElement(
          TextButton,
          { className: "channel-profile-form__avatar-button", onClick: function() {
            var _a2;
            return (_a2 = hiddenInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
          }, disableUnderline: true },
          import_react67.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD)
        )
      ),
      import_react67.default.createElement(
        "div",
        { className: "channel-profile-form__name-section" },
        import_react67.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME),
        import_react67.default.createElement(Input, { required: title !== "", name: "channel-profile-form__name", ref: inputRef, value: title, placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelProfile.js
var import_react_dom40 = __toESM(require_react_dom(), 1);
function ChannelProfile2() {
  var _a, _b;
  var globalState = useSendbirdStateContext();
  var disabled = !((_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.isOnline);
  var theme = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.theme;
  var channel = useOpenChannelSettingsContext().channel;
  var title = channel === null || channel === void 0 ? void 0 : channel.name;
  var _c = (0, import_react68.useState)(false), showModal = _c[0], setShowModal = _c[1];
  var stringSet = (0, import_react68.useContext)(LocalizationContext).stringSet;
  return import_react68.default.createElement(
    "div",
    { className: "sendbird-openchannel-profile" },
    import_react68.default.createElement(
      "div",
      { className: "sendbird-openchannel-profile--inner" },
      import_react68.default.createElement(
        "div",
        { className: "sendbird-openchannel-profile__avatar" },
        import_react68.default.createElement(ChannelAvatar2, { channel, theme, height: 80, width: 80 })
      ),
      import_react68.default.createElement(Label, { type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1, className: "sendbird-openchannel-profile__title" }, title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE),
      import_react68.default.createElement(
        TextButton,
        { disabled, className: "sendbird-openchannel-profile__edit", onClick: function() {
          if (disabled) {
            return;
          }
          setShowModal(true);
        }, disableUnderline: true },
        import_react68.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)
      ),
      showModal && import_react68.default.createElement(EditDetails2, { onCancel: function() {
        return setShowModal(false);
      } })
    )
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CqCMcS8B.js
var import_react70 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/AccordionGroup.js
var import_react69 = __toESM(require_react(), 1);
var AccordionGroupContext = (0, import_react69.createContext)({
  openedListKeys: [],
  addOpenedListKey: noop,
  removeOpenedListKey: noop,
  clearOpenedListKeys: noop,
  allowMultipleOpen: false
});
var AccordionGroupProvider = function(_a) {
  var className = _a.className, children = _a.children, _b = _a.allowMultipleOpen, allowMultipleOpen = _b === void 0 ? false : _b;
  var _c = (0, import_react69.useState)([]), openedListKeys = _c[0], setOpenedListKeys = _c[1];
  var addOpenedListKey = function(key) {
    setOpenedListKeys(function(prevList) {
      if (!allowMultipleOpen) {
        return [key];
      }
      prevList.push(key);
      return prevList;
    });
  };
  var removeOpenedListKey = function(key) {
    setOpenedListKeys(function(prevList) {
      return prevList.filter(function(k) {
        return k !== key;
      });
    });
  };
  var clearOpenedListKeys = function() {
    setOpenedListKeys([]);
  };
  return import_react69.default.createElement(
    "div",
    { className: "sendbird-accordion-group-provider ".concat(className) },
    import_react69.default.createElement(AccordionGroupContext.Provider, { value: {
      openedListKeys,
      addOpenedListKey,
      removeOpenedListKey,
      clearOpenedListKeys,
      allowMultipleOpen
    } }, children)
  );
};
var useAccordionGroupContext = function() {
  var context = (0, import_react69.useContext)(AccordionGroupContext);
  if (!context)
    throw new Error("No accordion group context available. Make sure you are rending <AccordionGroupContext />.");
  return context;
};

// node_modules/@sendbird/uikit-react/chunks/bundle-CqCMcS8B.js
var import_react_dom41 = __toESM(require_react_dom(), 1);
function ParticipantsModal(_a) {
  var _b, _c, _d;
  var onCancel = _a.onCancel;
  var state = useSendbirdStateContext();
  var channel = useOpenChannelSettingsContext().channel;
  var stringSet = (0, import_react70.useContext)(LocalizationContext).stringSet;
  var _e = (0, import_react70.useState)([]), participants = _e[0], setParticipants = _e[1];
  var _f = (0, import_react70.useState)(null), participantListQuery = _f[0], setParticipantListQuery = _f[1];
  var userId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var sdk = (_d = (_c = state === null || state === void 0 ? void 0 : state.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;
  var isOperatorView = channel === null || channel === void 0 ? void 0 : channel.isOperator(userId);
  (0, import_react70.useEffect)(function() {
    if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {
      return;
    }
    var participantListQuery2 = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({});
    setParticipantListQuery(participantListQuery2);
    participantListQuery2.next().then(function(participantList) {
      setParticipants(participantList);
    });
  }, []);
  return import_react70.default.createElement(
    "div",
    null,
    import_react70.default.createElement(
      Modal,
      { hideFooter: true, isFullScreenOnMobile: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE },
      import_react70.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: function(e) {
        if (participantListQuery) {
          var hasNext = participantListQuery.hasNext;
          var target = e.target;
          var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
          if (hasNext && fetchMore) {
            participantListQuery.next().then(function(fetchedParticipants) {
              setParticipants(__spreadArray(__spreadArray([], participants !== null && participants !== void 0 ? participants : [], true), fetchedParticipants, true));
            });
          }
        }
      } }, participants === null || participants === void 0 ? void 0 : participants.map(function(p) {
        var _a2;
        var isOperator3 = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);
        return import_react70.default.createElement(UserListItem, { user: p, key: p.userId, currentUser: (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId, action: userId !== p.userId && isOperatorView ? function(_a3) {
          var actionRef = _a3.actionRef, parentRef = _a3.parentRef;
          return import_react70.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react70.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react70.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react70.default.createElement(
              MenuItems,
              { parentContainRef: parentRef, parentRef: actionRef, closeDropdown, openLeft: true },
              import_react70.default.createElement(OperatorMenuItem, { channel, user: p, onChange: function() {
                return closeDropdown();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_participant_context_menu_".concat(isOperator3 ? "unregister_operator" : "register_as_operator") }, isOperator3 ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR),
              import_react70.default.createElement(MuteMenuItem, { channel, user: p, onChange: function() {
                return closeDropdown();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_participant_context_menu_".concat(p.isMuted ? "unmute" : "mute") }, p.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),
              import_react70.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function() {
                  closeDropdown();
                });
              }, testID: "open_channel_setting_participant_context_menu_ban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN)
            );
          } });
        } : function() {
          return import_react70.default.createElement(import_react70.default.Fragment, null);
        } });
      }))
    )
  );
}
var UserListItem2 = function(_a) {
  var user = _a.user, currentUser = _a.currentUser, isOperator3 = _a.isOperator, action = _a.action;
  var avatarRef = (0, import_react70.useRef)(null);
  var actionRef = (0, import_react70.useRef)(null);
  var _b = (0, import_react70.useContext)(UserProfileContext), disableUserProfile = _b.disableUserProfile, renderUserProfile = _b.renderUserProfile;
  var stringSet = (0, import_react70.useContext)(LocalizationContext).stringSet;
  return import_react70.default.createElement(
    "div",
    { className: "sendbird-participants-accordion__member" },
    import_react70.default.createElement(
      "div",
      { className: "sendbird-participants-accordion__member-avatar" },
      import_react70.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return import_react70.default.createElement(
          import_react70.default.Fragment,
          null,
          import_react70.default.createElement(Avatar$1, { className: "sendbird-participants-accordion__member-avatar__avatar", onClick: function() {
            if (!disableUserProfile) {
              toggleDropdown();
            }
          }, ref: avatarRef, src: user.profileUrl, width: 24, height: 24 }),
          user instanceof Jt && user.isMuted ? import_react70.default.createElement(MutedAvatarOverlay, null) : ""
        );
      }, menuItems: function(closeDropdown) {
        return renderUserProfile ? renderUserProfile({
          user,
          currentUserId: currentUser !== null && currentUser !== void 0 ? currentUser : "",
          close: closeDropdown,
          avatarRef
        }) : import_react70.default.createElement(
          MenuItems,
          {
            openLeft: true,
            parentRef: avatarRef,
            // for catching location(x, y) of MenuItems
            parentContainRef: avatarRef,
            // for toggling more options(menus & reactions)
            closeDropdown,
            style: { paddingTop: "0px", paddingBottom: "0px" }
          },
          import_react70.default.createElement(UserProfile, { disableMessaging: true, user, currentUserId: currentUser, onSuccess: closeDropdown })
        );
      } })
    ),
    import_react70.default.createElement(
      Label,
      { className: "sendbird-participants-accordion__member__title", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 },
      user.nickname || stringSet.NO_NAME,
      currentUser === user.userId && stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__YOU
    ),
    // if there is now nickname, display userId
    !user.nickname && import_react70.default.createElement(Label, { className: "sendbird-participants-accordion__member__title user-id", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, user.userId),
    isOperator3 && import_react70.default.createElement(Label, { className: "sendbird-participants-accordion__member__title\n                ".concat((user === null || user === void 0 ? void 0 : user.userId) !== currentUser ? "operator" : "", "\n                ").concat((user === null || user === void 0 ? void 0 : user.userId) === currentUser ? "self-operator" : "", "\n              "), type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__OPERATOR),
    action && import_react70.default.createElement("div", { className: "sendbird-participants-accordion__member__action", ref: actionRef }, action({ actionRef }))
  );
};
function ParticipantList(_a) {
  var _b;
  var _c = _a.isOperatorView, isOperatorView = _c === void 0 ? false : _c;
  var globalState = useSendbirdStateContext();
  var currentUserId = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.userId;
  var channel = useOpenChannelSettingsContext().channel;
  var stringSet = (0, import_react70.useContext)(LocalizationContext).stringSet;
  var _d = (0, import_react70.useState)(null), participants = _d[0], setParticipants = _d[1];
  var _e = (0, import_react70.useState)(null), participantListQuery = _e[0], setParticipantListQuery = _e[1];
  var _f = (0, import_react70.useState)(false), showParticipantsModal = _f[0], setShowParticipantsModal = _f[1];
  (0, import_react70.useEffect)(function() {
    if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {
      return;
    }
    var participantListQuery2 = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({ limit: 10 });
    setParticipantListQuery(participantListQuery2);
    participantListQuery2.next().then(function(participants2) {
      setParticipants(participants2);
    });
  }, [channel]);
  var refreshList = (0, import_react70.useCallback)(function() {
    if (!channel) {
      setParticipants([]);
      return;
    }
    var participantListQuery2 = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({ limit: 10 });
    participantListQuery2.next().then(function(participants2) {
      setParticipants(participants2);
    });
  }, [channel]);
  return import_react70.default.createElement(
    "div",
    { className: "sendbird-openchannel-settings__participant-list", onScroll: function(e) {
      if (participantListQuery) {
        var hasNext = participantListQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          participantListQuery.next().then(function(fetchedParticipants) {
            setParticipants(__spreadArray(__spreadArray([], participants !== null && participants !== void 0 ? participants : [], true), fetchedParticipants, true));
          });
        }
      }
    } },
    import_react70.default.createElement(
      "div",
      null,
      participants === null || participants === void 0 ? void 0 : participants.map(function(p) {
        var isOperator3 = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);
        return import_react70.default.createElement(UserListItem2, { user: p, currentUser: currentUserId, key: p.userId, isOperator: isOperator3, action: function(_a2) {
          var actionRef = _a2.actionRef;
          return isOperatorView && currentUserId !== (p === null || p === void 0 ? void 0 : p.userId) ? import_react70.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react70.default.createElement(
              IconButton,
              { className: "sendbird-openchannel-participant-list__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react70.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react70.default.createElement(
              MenuItems,
              { parentRef: actionRef, closeDropdown, openLeft: true },
              import_react70.default.createElement(OperatorMenuItem, { channel, user: p, onChange: function() {
                closeDropdown();
                refreshList();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_partitipant_conext_menu_".concat(isOperator3 ? "unregister_operator" : "register_as_operator") }, isOperator3 ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR),
              import_react70.default.createElement(MuteMenuItem, { channel, user: p, onChange: function() {
                closeDropdown();
                refreshList();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_partitipant_conext_menu_".concat(p.isMuted ? "unmute" : "mute") }, p.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),
              import_react70.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function() {
                  closeDropdown();
                  refreshList();
                });
              }, testID: "open_channel_setting_partitipant_conext_menu_ban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN)
            );
          } }) : null;
        } });
      }),
      participants && participants.length === 0 ? import_react70.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null,
      import_react70.default.createElement("div", { className: "sendbird-openchannel-participant-list__footer" }, (participantListQuery === null || participantListQuery === void 0 ? void 0 : participantListQuery.hasNext) && import_react70.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        return setShowParticipantsModal(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE)),
      showParticipantsModal && import_react70.default.createElement(ParticipantsModal, { onCancel: function() {
        setShowParticipantsModal(false);
        refreshList();
      } })
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/Accordion.js
var import_react71 = __toESM(require_react(), 1);
var Accordion = function(_a) {
  var className = _a.className, id = _a.id, renderTitle = _a.renderTitle, renderContent = _a.renderContent, renderFooter = _a.renderFooter;
  var _b = useAccordionGroupContext(), openedListKeys = _b.openedListKeys, addOpenedListKey = _b.addOpenedListKey, removeOpenedListKey = _b.removeOpenedListKey;
  var isOpened = (0, import_react71.useMemo)(function() {
    return openedListKeys.includes(id);
  }, [openedListKeys]);
  var handleClick = function() {
    if (isOpened) {
      removeOpenedListKey(id);
    } else {
      addOpenedListKey(id);
    }
  };
  return import_react71.default.createElement(
    "div",
    { className: classnames("sendbird-accordion", className, isOpened ? "sendbird-accordion--opened" : "sendbird-accordion--closed") },
    import_react71.default.createElement(
      "div",
      { className: "sendbird-accordion__panel-header", id, role: "switch", "aria-checked": false, onClick: handleClick, onKeyDown: handleClick, tabIndex: 0 },
      renderTitle(),
      import_react71.default.createElement(Icon, { type: IconTypes.CHEVRON_RIGHT, className: [
        "sendbird-accordion__panel-icon-right",
        "sendbird-accordion__panel-icon--chevron",
        isOpened ? "sendbird-accordion__panel-icon--open" : ""
      ].join(" "), height: "24px", width: "24px" })
    ),
    isOpened && import_react71.default.createElement(
      "div",
      { className: "sendbird-accordion-opened-list" },
      import_react71.default.createElement("div", { className: "sendbird-accordion__list" }, renderContent()),
      renderFooter && import_react71.default.createElement("div", { className: "sendbird-accordion__footer" }, renderFooter())
    )
  );
};
var AccordionGroup = AccordionGroupProvider;

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OperatorUI.js
var import_react_dom42 = __toESM(require_react_dom(), 1);
function DeleteChannel() {
  var _a, _b;
  var _c = (0, import_react72.useState)(false), showDeleteChannelModal = _c[0], setShowDeleteChannelModal = _c[1];
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  var globalState = useSendbirdStateContext();
  var isOnline = (_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.isOnline;
  var logger = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.logger;
  var _d = useOpenChannelSettingsContext(), channel = _d.channel, onDeleteChannel = _d.onDeleteChannel;
  var deleteChannel = function() {
    channel === null || channel === void 0 ? void 0 : channel.delete().then(function(response) {
      logger.info("OpenChannelSettings: Delete channel success", response);
      if (onDeleteChannel) {
        onDeleteChannel(channel);
      }
    }).catch(function(error) {
      logger.warning("OpenChannelSettings: Delete channel failed", error);
    });
  };
  return import_react72.default.createElement(
    import_react72.default.Fragment,
    null,
    import_react72.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__panel-item\n          sendbird-openchannel-settings__delete-channel\n            ".concat(!isOnline ? "sendbird-openchannel-settings__panel-item__disabled" : ""), role: "button", tabIndex: 0, onKeyDown: function() {
        if (!isOnline) {
          return;
        }
        setShowDeleteChannelModal(true);
      }, onClick: function() {
        if (!isOnline) {
          return;
        }
        setShowDeleteChannelModal(true);
      } },
      import_react72.default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.ERROR, className: [
        "sendbird-openchannel-settings__panel-icon-left",
        "sendbird-openchannel-settings__panel-icon__delete"
      ].join(" "), height: "24px", width: "24px" }),
      import_react72.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)
    ),
    showDeleteChannelModal && import_react72.default.createElement(Modal, { isFullScreenOnMobile: true, onCancel: function() {
      setShowDeleteChannelModal(false);
    }, onSubmit: function() {
      deleteChannel();
    }, titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE, submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_CONTEXT)
  );
}
function OperatorListModal(_a) {
  var _b;
  var onCancel = _a.onCancel;
  var _c = (0, import_react72.useState)([]), users = _c[0], setUsers = _c[1];
  var _d = (0, import_react72.useState)(null), operatorQuery = _d[0], setOperatorQuery = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbirdStateContext();
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  (0, import_react72.useEffect)(function() {
    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery({
      limit: 20
    });
    if (operatorListQuery) {
      operatorListQuery.next().then(function(participants) {
        setUsers(participants);
      });
      setOperatorQuery(operatorListQuery);
    }
  }, []);
  return import_react72.default.createElement(
    "div",
    null,
    import_react72.default.createElement(
      Modal,
      { hideFooter: true, isFullScreenOnMobile: true, titleText: stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL, onCancel },
      import_react72.default.createElement("div", { className: "sendbird-more-users__popup-scroll", onScroll: function(e) {
        var hasNext = operatorQuery === null || operatorQuery === void 0 ? void 0 : operatorQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          operatorQuery.next().then(function(o) {
            setUsers(__spreadArray(__spreadArray([], users, true), o, true));
          });
        }
      } }, users.map(function(operator) {
        return import_react72.default.createElement(UserListItem, { currentUser: currentUserId, user: operator, key: operator.userId, action: function(_a2) {
          var parentRef = _a2.parentRef, actionRef = _a2.actionRef;
          return currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId) ? import_react72.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react72.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react72.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react72.default.createElement(
              MenuItems,
              { parentContainRef: parentRef, parentRef: actionRef, closeDropdown, openLeft: true },
              import_react72.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function() {
                  setUsers(users.filter(function(_a3) {
                    var userId = _a3.userId;
                    return userId !== operator.userId;
                  }));
                });
                closeDropdown();
              }, testID: "open_channel_setting_operator_context_menu_unregister_operator" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR)
            );
          } }) : import_react72.default.createElement(import_react72.default.Fragment, null);
        } });
      }))
    )
  );
}
function AddOperatorsModal2(_a) {
  var onCancel = _a.onCancel, onSubmit = _a.onSubmit;
  var _b = (0, import_react72.useState)([]), participants = _b[0], setParticipants = _b[1];
  var _c = (0, import_react72.useState)({}), selectedUsers = _c[0], setSelectedUsers = _c[1];
  var _d = (0, import_react72.useState)(null), participantQuery = _d[0], setParticipantQuery = _d[1];
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  var channel = useOpenChannelSettingsContext().channel;
  (0, import_react72.useEffect)(function() {
    var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({
      limit: 20
    });
    if (participantListQuery) {
      participantListQuery.next().then(function(users) {
        setParticipants(users);
      });
      setParticipantQuery(participantListQuery);
    }
  }, []);
  var selectedCount = Object.keys(selectedUsers).filter(function(m) {
    return selectedUsers[m];
  }).length;
  return import_react72.default.createElement(
    import_react72.default.Fragment,
    null,
    import_react72.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, type: ButtonTypes.PRIMARY, submitText: stringSet.CHANNEL_SETTING__OPERATORS__ADD_BUTTON, onCancel, onSubmit: function() {
        var users = Object.keys(selectedUsers).filter(function(m) {
          return selectedUsers[m];
        });
        channel === null || channel === void 0 ? void 0 : channel.addOperators(users).then(function() {
          onSubmit(users);
        });
      }, titleText: stringSet.OPEN_CHANNEL_CONVERSATION__SELECT_PARTICIPANTS },
      import_react72.default.createElement(Label, { color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, "".concat(selectedCount, " ").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),
      import_react72.default.createElement("div", { className: "sendbird-more-users__popup-scroll", onScroll: function(e) {
        var hasNext = participantQuery ? participantQuery.hasNext : false;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore && participantQuery) {
          participantQuery.next().then(function(o) {
            setParticipants(__spreadArray(__spreadArray([], participants, true), o, true));
          });
        }
      } }, participants.map(function(participant) {
        var isOperator3 = (channel === null || channel === void 0 ? void 0 : channel.operators.find(function(operator) {
          return (operator === null || operator === void 0 ? void 0 : operator.userId) === (participant === null || participant === void 0 ? void 0 : participant.userId);
        })) ? true : false;
        return import_react72.default.createElement(UserListItem, { user: participant, key: participant.userId, checkBox: true, checked: selectedUsers[participant.userId] || isOperator3, disabled: isOperator3, isOperator: isOperator3, onChange: function(event) {
          var _a2;
          var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a2 = {}, _a2[event.target.id] = event.target.checked, _a2));
          if (!event.target.checked) {
            delete modifiedSelectedUsers[event.target.id];
          }
          setSelectedUsers(modifiedSelectedUsers);
        } });
      }))
    )
  );
}
var OperatorList2 = function() {
  var _a, _b;
  var _c = (0, import_react72.useState)(false), showAdd = _c[0], setShowAdd = _c[1];
  var _d = (0, import_react72.useState)(false), showMore = _d[0], setShowMore = _d[1];
  var state = useSendbirdStateContext();
  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  var channel = useOpenChannelSettingsContext().channel;
  return import_react72.default.createElement(
    "div",
    null,
    (_b = channel === null || channel === void 0 ? void 0 : channel.operators) === null || _b === void 0 ? void 0 : _b.slice(0, 10).map(function(operator) {
      return import_react72.default.createElement(UserListItem2, { key: operator.userId, user: operator, currentUser: currentUserId, action: function(_a2) {
        var actionRef = _a2.actionRef;
        return currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId) ? import_react72.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react72.default.createElement(
            IconButton,
            { className: "sendbird-openchannel-operator-list__menu", width: "32px", height: "32px", onClick: toggleDropdown },
            import_react72.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
          );
        }, menuItems: function(closeDropdown) {
          return import_react72.default.createElement(
            MenuItems,
            { parentRef: actionRef, closeDropdown, openLeft: true },
            import_react72.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function() {
                closeDropdown();
              });
            }, testID: "open_channel_setting_operator_context_menu_unregister_operator" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR),
            import_react72.default.createElement(MuteMenuItem, { channel, user: operator, onChange: function() {
              return closeDropdown();
            }, onError: function() {
              closeDropdown();
            }, testID: "open_channel_setting_operator_context_menu_".concat(operator.isMuted ? "unmute" : "mute") }, operator.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),
            import_react72.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.banUser(operator).then(function() {
                closeDropdown();
              });
            }, testID: "open_channel_setting_operator_context_menu_ban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN)
          );
        } }) : import_react72.default.createElement(import_react72.default.Fragment, null);
      } });
    }),
    import_react72.default.createElement(
      "div",
      { className: "sendbird-openchannel-operator-list__footer" },
      import_react72.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowAdd(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ADD),
      (channel === null || channel === void 0 ? void 0 : channel.operators) && channel.operators.length > 10 && import_react72.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowMore(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL)
    ),
    showMore && import_react72.default.createElement(
      import_react72.default.Fragment,
      null,
      import_react72.default.createElement(OperatorListModal, { onCancel: function() {
        setShowMore(false);
      } })
    ),
    showAdd && import_react72.default.createElement(
      import_react72.default.Fragment,
      null,
      import_react72.default.createElement(AddOperatorsModal2, { onCancel: function() {
        return setShowAdd(false);
      }, onSubmit: function() {
        setShowAdd(false);
      } })
    )
  );
};
function MutedParticipantsModal(_a) {
  var _b;
  var onCancel = _a.onCancel;
  var _c = (0, import_react72.useState)([]), mutedUsers = _c[0], setMutedUsers = _c[1];
  var _d = (0, import_react72.useState)(null), userListQuery = _d[0], setUserListQuery = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbirdStateContext();
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  (0, import_react72.useEffect)(function() {
    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({
      limit: 10
    });
    mutedUserListQuery === null || mutedUserListQuery === void 0 ? void 0 : mutedUserListQuery.next().then(function(users) {
      setMutedUsers(users);
    });
    if (mutedUserListQuery) {
      setUserListQuery(mutedUserListQuery);
    }
  }, []);
  return import_react72.default.createElement(
    "div",
    null,
    import_react72.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE },
      import_react72.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: function(e) {
        var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          userListQuery.next().then(function(o) {
            setMutedUsers(__spreadArray(__spreadArray([], mutedUsers, true), o, true));
          });
        }
      } }, mutedUsers.map(function(mutedUser) {
        return import_react72.default.createElement(UserListItem, { currentUser: currentUserId, user: mutedUser, key: mutedUser.userId, action: function(_a2) {
          var actionRef = _a2.actionRef;
          return (mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId ? import_react72.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react72.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react72.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react72.default.createElement(
              MenuItems,
              { parentRef: actionRef, closeDropdown, openLeft: true },
              import_react72.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function() {
                  closeDropdown();
                  setMutedUsers(mutedUsers.filter(function(u2) {
                    return u2.userId !== mutedUser.userId;
                  }));
                });
              }, testID: "open_channel_setting_muted_member_context_menu_unmute" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE)
            );
          } }) : import_react72.default.createElement(import_react72.default.Fragment, null);
        } });
      }))
    )
  );
}
var MutedParticipantList = function() {
  var _a;
  var _b = (0, import_react72.useState)([]), mutedUsers = _b[0], setMutedUsers = _b[1];
  var _c = (0, import_react72.useState)(false), hasNext = _c[0], setHasNext = _c[1];
  var _d = (0, import_react72.useState)(false), showModal = _d[0], setShowModal = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbirdStateContext();
  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  (0, import_react72.useEffect)(function() {
    if (!channel) {
      setMutedUsers([]);
      return;
    }
    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({
      limit: 10
    });
    mutedUserListQuery.next().then(function(members) {
      setMutedUsers(members);
      setHasNext(mutedUserListQuery.hasNext);
    });
  }, [channel]);
  var refreshList = (0, import_react72.useCallback)(function() {
    if (!channel) {
      setMutedUsers([]);
      return;
    }
    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({
      limit: 10
    });
    mutedUserListQuery.next().then(function(members) {
      setMutedUsers(members);
      setHasNext(mutedUserListQuery.hasNext);
    });
  }, [channel]);
  return import_react72.default.createElement(
    import_react72.default.Fragment,
    null,
    mutedUsers.map(function(mutedUser) {
      return import_react72.default.createElement(UserListItem2, { key: mutedUser.userId, user: mutedUser, currentUser: currentUserId, isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(mutedUser.userId), action: function(_a2) {
        var actionRef = _a2.actionRef;
        return (mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId ? import_react72.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react72.default.createElement(
            IconButton,
            { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
            import_react72.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
          );
        }, menuItems: function(closeDropdown) {
          return import_react72.default.createElement(
            MenuItems,
            { closeDropdown, openLeft: true, parentRef: actionRef },
            import_react72.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function() {
                refreshList();
                closeDropdown();
              });
            }, testID: "open_channel_setting_muted_member_context_menu_unmute" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE)
          );
        } }) : import_react72.default.createElement(import_react72.default.Fragment, null);
      } });
    }),
    mutedUsers && mutedUsers.length === 0 && import_react72.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__NO_ONE),
    hasNext && import_react72.default.createElement(
      "div",
      { className: "sendbird-channel-settings-muted-participant-list__footer" },
      import_react72.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE_ALL)
    ),
    showModal && import_react72.default.createElement(MutedParticipantsModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    } })
  );
};
function BannedUsersModal2(_a) {
  var _b;
  var onCancel = _a.onCancel;
  var _c = (0, import_react72.useState)([]), bannedUsers = _c[0], setBannedUsers = _c[1];
  var _d = (0, import_react72.useState)(null), userListQuery = _d[0], setUserListQuery = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbirdStateContext();
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  (0, import_react72.useEffect)(function() {
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();
    bannedUserListQuery === null || bannedUserListQuery === void 0 ? void 0 : bannedUserListQuery.next().then(function(users) {
      setBannedUsers(users);
    });
    setUserListQuery(bannedUserListQuery !== null && bannedUserListQuery !== void 0 ? bannedUserListQuery : null);
  }, []);
  return import_react72.default.createElement(
    "div",
    null,
    import_react72.default.createElement(
      Modal,
      { hideFooter: true, isFullScreenOnMobile: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE },
      import_react72.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: function(e) {
        var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          userListQuery.next().then(function(o) {
            setBannedUsers(__spreadArray(__spreadArray([], bannedUsers, true), o, true));
          });
        }
      } }, bannedUsers.map(function(bannedUser) {
        return import_react72.default.createElement(UserListItem, { user: bannedUser, key: bannedUser.userId, action: function(_a2) {
          var actionRef = _a2.actionRef;
          return (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId ? import_react72.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react72.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react72.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react72.default.createElement(
              MenuItems,
              { parentRef: actionRef, closeDropdown, openLeft: true },
              import_react72.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function() {
                  closeDropdown();
                  setBannedUsers(bannedUsers.filter(function(u2) {
                    return u2.userId !== bannedUser.userId;
                  }));
                });
              }, testID: "open_channel_setting_banned_user_context_menu_unban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN)
            );
          } }) : import_react72.default.createElement(import_react72.default.Fragment, null);
        } });
      }))
    )
  );
}
var BannedUserList2 = function() {
  var _a;
  var _b = (0, import_react72.useState)([]), bannedUsers = _b[0], setBannedUsers = _b[1];
  var _c = (0, import_react72.useState)(false), hasNext = _c[0], setHasNext = _c[1];
  var _d = (0, import_react72.useState)(false), showModal = _d[0], setShowModal = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbirdStateContext();
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  (0, import_react72.useEffect)(function() {
    if (!channel) {
      setBannedUsers([]);
      return;
    }
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();
    bannedUserListQuery.next().then(function(users) {
      setBannedUsers(users);
      setHasNext(bannedUserListQuery.hasNext);
    });
  }, [channel]);
  var refreshList = (0, import_react72.useCallback)(function() {
    if (!channel) {
      setBannedUsers([]);
      return;
    }
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();
    bannedUserListQuery.next().then(function(users) {
      setBannedUsers(users);
      setHasNext(bannedUserListQuery.hasNext);
    });
  }, [channel]);
  return import_react72.default.createElement(
    import_react72.default.Fragment,
    null,
    bannedUsers.map(function(bannedUser) {
      return import_react72.default.createElement(UserListItem2, { key: bannedUser.userId, user: bannedUser, isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(bannedUser.userId), action: function(_a2) {
        var actionRef = _a2.actionRef;
        return (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId ? import_react72.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react72.default.createElement(
            IconButton,
            { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
            import_react72.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
          );
        }, menuItems: function(closeDropdown) {
          return import_react72.default.createElement(
            MenuItems,
            { parentRef: actionRef, closeDropdown, openLeft: true },
            import_react72.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function() {
                closeDropdown();
                refreshList();
              });
            }, testID: "open_channel_setting_banned_user_context_menu_unban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN)
          );
        } }) : import_react72.default.createElement(import_react72.default.Fragment, null);
      } });
    }),
    bannedUsers && bannedUsers.length === 0 && import_react72.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__NO_ONE),
    hasNext && import_react72.default.createElement(
      "div",
      { className: "sendbird-channel-settings-banned-user-list__footer" },
      import_react72.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE_ALL)
    ),
    showModal && import_react72.default.createElement(BannedUsersModal2, { onCancel: function() {
      setShowModal(false);
      refreshList();
    } })
  );
};
var copyToClipboard2 = function(text) {
  if (window.clipboardData && window.clipboardData.setData) {
    return window.clipboardData.setData("Text", text);
  }
  if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
    var textarea = document.createElement("textarea");
    textarea.textContent = text;
    textarea.style.position = "fixed";
    document.body.appendChild(textarea);
    textarea.select();
    try {
      return document.execCommand("copy");
    } catch (ex) {
      return false;
    } finally {
      document.body.removeChild(textarea);
    }
  }
  return false;
};
var OperatorUI = function(_a) {
  var renderChannelProfile = _a.renderChannelProfile;
  var stringSet = (0, import_react72.useContext)(LocalizationContext).stringSet;
  var _b = useOpenChannelSettingsContext(), onCloseClick = _b.onCloseClick, channel = _b.channel;
  return import_react72.default.createElement(
    import_react72.default.Fragment,
    null,
    import_react72.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__header" },
      import_react72.default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__HEADER__TITLE),
      import_react72.default.createElement(Icon, { className: "sendbird-openchannel-settings__close-icon", type: IconTypes.CLOSE, height: "24px", width: "24px", onClick: function() {
        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
      } })
    ),
    import_react72.default.createElement("div", { className: "sendbird-openchannel-settings__profile" }, (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || import_react72.default.createElement(ChannelProfile2, null)),
    import_react72.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__url" },
      import_react72.default.createElement(Icon, { className: "sendbird-openchannel-settings__copy-icon", type: IconTypes.COPY, height: "22px", width: "22px", onClick: function() {
        var _a2;
        copyToClipboard2((_a2 = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _a2 !== void 0 ? _a2 : "");
      } }),
      import_react72.default.createElement(Label, { className: "sendbird-openchannel-settings__url-label", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL),
      import_react72.default.createElement(Label, { className: "sendbird-openchannel-settings__url-value", type: LabelTypography.SUBTITLE_2 }, channel === null || channel === void 0 ? void 0 : channel.url)
    ),
    import_react72.default.createElement(
      AccordionGroup,
      null,
      import_react72.default.createElement(Accordion, { className: "sendbird-openchannel-settings__operators-list", id: "operators", renderTitle: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(Icon, { className: "sendbird-openchannel-settings__operator-accordion-icon", type: IconTypes.OPERATOR, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
          import_react72.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS_TITLE)
        );
      }, renderContent: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(OperatorList2, null)
        );
      } }),
      import_react72.default.createElement(Accordion, { className: "sendbird-channel-settings__operators-list", id: "participants", renderTitle: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(Icon, { type: IconTypes.MEMBERS, fillColor: IconColors.PRIMARY, width: 24, height: 24, className: "sendbird-openchannel-settings__operator-accordion-icon" }),
          import_react72.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE)
        );
      }, renderContent: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(ParticipantList, { isOperatorView: true })
        );
      } }),
      import_react72.default.createElement(Accordion, { className: "sendbird-channel-settings__operators-list", id: "mutedMembers", renderTitle: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(Icon, { className: "sendbird-openchannel-settings__operator-accordion-icon", type: IconTypes.MUTE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
          import_react72.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE)
        );
      }, renderContent: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(MutedParticipantList, null)
        );
      } }),
      import_react72.default.createElement(Accordion, { className: "sendbird-channel-settings__operators-list", id: "bannedUsers", renderTitle: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(Icon, { className: "sendbird-openchannel-settings__operator-accordion-icon", type: IconTypes.BAN, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
          import_react72.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE)
        );
      }, renderContent: function() {
        return import_react72.default.createElement(
          import_react72.default.Fragment,
          null,
          import_react72.default.createElement(BannedUserList2, null)
        );
      } })
    ),
    import_react72.default.createElement(DeleteChannel, null)
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelSettingsUI.js
var import_react_dom43 = __toESM(require_react_dom(), 1);
function InvalidChannel(_a) {
  var onCloseClick = _a.onCloseClick;
  var stringSet = (0, import_react73.useContext)(LocalizationContext).stringSet;
  return import_react73.default.createElement(
    "div",
    { className: "sendbird-openchannel-settings" },
    import_react73.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__header" },
      import_react73.default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__HEADER__TITLE),
      import_react73.default.createElement(Icon, { type: IconTypes.CLOSE, className: "sendbird-openchannel-settings__close-icon", height: "24px", width: "24px", onClick: function() {
        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
      } })
    ),
    import_react73.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__placeholder" },
      import_react73.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG })
    )
  );
}
var OpenChannelUI2 = function(_a) {
  var _b, _c, _d;
  var renderOperatorUI = _a.renderOperatorUI, renderParticipantList = _a.renderParticipantList;
  var _e = useOpenChannelSettingsContext(), channel = _e.channel, onCloseClick = _e.onCloseClick, isChannelInitialized = _e.isChannelInitialized;
  var globalStore = useSendbirdStateContext();
  var logger = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _b === void 0 ? void 0 : _b.logger;
  var user = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.userStore) === null || _d === void 0 ? void 0 : _d.user;
  var stringSet = (0, import_react73.useContext)(LocalizationContext).stringSet;
  if (isChannelInitialized && !channel) {
    return import_react73.default.createElement(InvalidChannel, { onCloseClick: function() {
      logger.info("OpenChannelSettings: Click close");
      if (onCloseClick) {
        onCloseClick();
      }
    } });
  }
  return import_react73.default.createElement(
    "div",
    { className: "sendbird-openchannel-settings" },
    (channel === null || channel === void 0 ? void 0 : channel.isOperator(user)) && ((renderOperatorUI === null || renderOperatorUI === void 0 ? void 0 : renderOperatorUI()) || import_react73.default.createElement(OperatorUI, null)),
    !(channel === null || channel === void 0 ? void 0 : channel.isOperator(user)) && import_react73.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__participant" },
      import_react73.default.createElement(
        "div",
        { className: "sendbird-openchannel-settings__header" },
        import_react73.default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE),
        import_react73.default.createElement(Icon, { type: IconTypes.CLOSE, className: "sendbird-openchannel-settings__close-icon", height: "24px", width: "24px", onClick: function() {
          onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
        } })
      ),
      (renderParticipantList === null || renderParticipantList === void 0 ? void 0 : renderParticipantList()) || import_react73.default.createElement(ParticipantList, null)
    )
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings.js
var import_react_dom44 = __toESM(require_react_dom(), 1);
var OpenChannelSetting = function(props) {
  return import_react74.default.createElement(
    OpenChannelSettingsProvider,
    { channelUrl: props === null || props === void 0 ? void 0 : props.channelUrl, onCloseClick: props === null || props === void 0 ? void 0 : props.onCloseClick, onBeforeUpdateChannel: props === null || props === void 0 ? void 0 : props.onBeforeUpdateChannel, onChannelModified: props === null || props === void 0 ? void 0 : props.onChannelModified, onDeleteChannel: props === null || props === void 0 ? void 0 : props.onDeleteChannel, disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile },
    import_react74.default.createElement(OpenChannelUI2, { renderOperatorUI: props === null || props === void 0 ? void 0 : props.renderOperatorUI, renderParticipantList: props === null || props === void 0 ? void 0 : props.renderParticipantList })
  );
};

// node_modules/@sendbird/uikit-react/index.js
var import_react75 = __toESM(require_react());
var import_react_dom45 = __toESM(require_react_dom());
export {
  App,
  Channel,
  ChannelList,
  ChannelSettings,
  MessageSearchPannel as MessageSearch,
  OpenChannel,
  OpenChannelSetting as OpenChannelSettings,
  SendbirdProvider as SendBirdProvider,
  TypingIndicatorType,
  getStringSet,
  sendbirdSelectors as sendBirdSelectors,
  sendbirdSelectors,
  useSendbirdStateContext,
  withSendbirdContext as withSendBird
};
//# sourceMappingURL=@sendbird_uikit-react.js.map

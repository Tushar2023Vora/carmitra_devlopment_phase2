var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback, useEffect, useState } from 'react';
import { isGif } from '../../util';
import { RMTImageCanvas } from './index.canvas';
import { RMTImageDefault } from './index.img';
import { RMTImagePlaceholder } from './index.placeholder';
export const RMTImage = (_a) => {
    var { tintColor, metaData } = _a, props = __rest(_a, ["tintColor", "metaData"]);
    const { hasError, onError } = useImageLoadError(props.src);
    if (props.onError)
        console.warn('`onError` is intercepted and not executed in the ReactMessageTemplateImage.');
    if (hasError) {
        return React.createElement(RMTImagePlaceholder, Object.assign({}, props));
    }
    else if (tintColor && !isGif(props.src)) {
        return React.createElement(RMTImageCanvas, Object.assign({}, props, { onError: onError, tintColor: tintColor, metaData: metaData }));
    }
    else {
        return React.createElement(RMTImageDefault, Object.assign({}, props, { onError: onError }));
    }
};
const useImageLoadError = (source) => {
    const [hasError, setHasError] = useState(false);
    useEffect(() => setHasError(false), [source]);
    return {
        hasError,
        onError: useCallback(() => setHasError(true), []),
    };
};

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { FlexSizeSpecValue, defaultProperties } from '@sendbird/uikit-message-template';
import { useCarousel } from './useCarousel';
export const RMTCarousel = (_a) => {
    var { children, style, spacing = defaultProperties.carousel.style.spacing, maxChildWidth = defaultProperties.carousel.style.maxChildWidth, inlineStyle } = _a, props = __rest(_a, ["children", "style", "spacing", "maxChildWidth", "inlineStyle"]);
    const _b = style !== null && style !== void 0 ? style : {}, { paddingInlineStart = 0, paddingInlineEnd = 0 } = _b, restStyle = __rest(_b, ["paddingInlineStart", "paddingInlineEnd"]);
    const { carouselRef, childrenRefs, handlers } = useCarousel({
        spacing,
        childrenLength: children.length,
        paddingInlineStart: Number(paddingInlineStart),
        paddingInlineEnd: Number(paddingInlineEnd),
    });
    return (React.createElement("div", Object.assign({}, handlers, { ref: carouselRef, style: Object.assign(Object.assign(Object.assign({}, restStyle), { gap: spacing, width: '100%', overflow: 'visible' }), inlineStyle) }, props), children.map((item, index) => (React.createElement(RMTCarouselChild, { ref: childrenRefs.current[index], key: index, maxChildWidth: maxChildWidth }, item)))));
};
const RMTCarouselChild = React.forwardRef(function CarouselChild({ maxChildWidth, children }, ref) {
    const maxWidth = shouldSetMaxChildWidth(children.props, maxChildWidth) ? maxChildWidth : 'fit-content';
    return (React.createElement("div", { ref: ref, style: { maxWidth, width: '100%', flexShrink: 0, overflow: 'hidden', userSelect: 'none' } }, children));
});
// Note: Set the maxChildWidth because it's impossible to determine the maximum width of items in the Carousel Child template when they have FillParent
function shouldSetMaxChildWidth(props, maxChildWidth) {
    return !!props.templateItems.find((it) => {
        var _a;
        const width = (_a = it.width) !== null && _a !== void 0 ? _a : defaultProperties.view.size.width;
        const hasFillWidth = width.type === 'flex' && width.value === FlexSizeSpecValue.FillParent;
        const overMaxChildWidth = width.type === 'fixed' && width.value >= maxChildWidth;
        return hasFillWidth || overMaxChildWidth;
    });
}

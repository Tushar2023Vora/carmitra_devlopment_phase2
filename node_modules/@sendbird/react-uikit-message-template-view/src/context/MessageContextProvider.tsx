// create a context provider for MessageComponent
//  - this is a wrapper for MessageComponent
import React from 'react';

import type { BaseMessage } from '@sendbird/chat/message';
import type { Action, ComponentsUnion } from '@sendbird/uikit-message-template';

export type MessageContextProps = React.PropsWithChildren<{
  message: BaseMessage;
  handleWebAction?(event: React.SyntheticEvent, action: Action, message: BaseMessage): null;
  handleCustomAction?(event: React.SyntheticEvent, action: Action, message: BaseMessage): null;
  handlePredefinedAction?(event: React.SyntheticEvent, action: Action, message: BaseMessage): null;

  /**
   * @internal DO NOT USE THIS, this is for internal use only.
   * This interface allows for detecting and injecting highlight styles into areas that include variables.
   */
  highlight?: {
    getContainerClassName?(raw: ComponentsUnion['properties']): string;
    getContainerInlineStyle?(raw: ComponentsUnion['properties']): React.CSSProperties;
    renderText?(text: string): React.ReactNode;
  };
}>;

export type MessageContextInterface = Omit<MessageContextProps, 'children'>;

const MessageContext = React.createContext<MessageContextInterface | null>(null);
const MessageProvider = ({
  message,
  handleWebAction,
  handleCustomAction,
  handlePredefinedAction,
  highlight,
  children,
}: MessageContextProps) => {
  const value = React.useMemo(
    () => ({
      message,
      handleWebAction,
      handleCustomAction,
      handlePredefinedAction,
      highlight,
    }),
    [message?.updatedAt, highlight?.getContainerClassName, highlight?.getContainerInlineStyle, highlight?.renderText],
  );

  return <MessageContext.Provider value={value}>{children}</MessageContext.Provider>;
};

const useMessageContext = () => {
  const context = React.useContext(MessageContext);
  if (!context) {
    throw new Error('useMessageContext must be used within a MessageProvider');
  }
  return context;
};

export { MessageProvider, useMessageContext };

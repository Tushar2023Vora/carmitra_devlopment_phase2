import React from 'react';

import { type BasicProps, ComponentType, type ComponentsUnion } from '@sendbird/uikit-message-template';

import { useMessageContext } from '../context/MessageContextProvider';
import { useRecalculateWidth } from '../hook/useRecalculationSize';
import type { ReactParsedProperties } from '../styles';
import { clx, getValidURL } from '../util';

export type ActionHandlerProps = React.PropsWithChildren<{
  props: BasicProps<ComponentsUnion['properties'], ReactParsedProperties>;
  children: React.ReactElement | React.ReactNode;
  style?: ReactParsedProperties;
  className?: string;
  elementId?: string;
  inlineStyle?: React.CSSProperties;
}>;

// todo: semantic html here is not perfect, need to revisit. Same for Button
export const ActionHandler = ({ children, props, className, style, inlineStyle }: ActionHandlerProps) => {
  const { recalculatedStyle, elemRef } = useRecalculateWidth({ style, props });
  const { message, handleWebAction, handleCustomAction, handlePredefinedAction } = useMessageContext();

  const borderClass = props.viewStyle?.borderWidth ? 'sb-message-template__border' : '';
  const actionClass = props.action ? 'sb-message-template__action' : '';
  const paddingStyles = {
    paddingBlockStart: props.viewStyle?.padding?.top,
    paddingBlockEnd: props.viewStyle?.padding?.bottom,
    paddingInlineStart: props.viewStyle?.padding?.left,
    paddingInlineEnd: props.viewStyle?.padding?.right,
  };

  const onClick = (e: React.SyntheticEvent) => {
    if (props.action?.type === 'web') {
      if (handleWebAction) {
        handleWebAction(e, props.action, message);
      } else {
        window?.open(getValidURL(props?.action?.data), '_blank', 'noopener noreferrer')?.focus();
      }
    } else if (props.action?.type === 'custom') {
      if (handleCustomAction) {
        handleCustomAction(e, props.action, message);
      } else {
        window?.open(getValidURL(props?.action?.data), '_blank', 'noopener noreferrer')?.focus();
      }
    } else if (props.action?.type === 'uikit') {
      handlePredefinedAction?.(e, props.action, message);
    }
  };

  if (props.type === ComponentType.TextButton) {
    return (
      <button
        className={clx(className, borderClass, actionClass)}
        data-sb-template-id={props.elementId}
        style={{ ...style, ...paddingStyles, ...inlineStyle }}
        onClick={onClick}
      >
        {children}
      </button>
    );
  }

  const { display, flexDirection, justifyContent, alignItems, objectFit, ...wrapperStyles } = recalculatedStyle;

  return (
    <div
      ref={elemRef}
      className={clx(className, borderClass, actionClass)}
      data-sb-template-id={props.elementId}
      style={{ ...wrapperStyles, ...inlineStyle }}
      onClick={onClick}
    >
      <div
        style={{
          display,
          flexDirection,
          justifyContent,
          alignItems,
          objectFit,
          width: '100%',
          height: '100%',
          ...paddingStyles,
        }}
      >
        {children}
      </div>
    </div>
  );
};
